<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Gitlab CI/CD 小记]]></title>
      <url>/2023/06/29/gitlabci/</url>
      <content type="html"><![CDATA[<p>最近项目使用Gitlab CI/CD进行自动化构建的一些记录，所有项目均使用Git Tag触发</p>
<a id="more"></a>
<h3 id="Vue项目打包并暂存"><a href="#Vue项目打包并暂存" class="headerlink" title="Vue项目打包并暂存"></a>Vue项目打包并暂存</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build-job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:16</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - if:</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line">  	<span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"$&#123;CI_COMMIT_TAG&#125;"</span></span><br><span class="line"><span class="attr">    expire_in:</span> <span class="number">3</span> <span class="string">days</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">dist</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node_modules/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">dist/</span></span><br></pre></td></tr></table></figure>
<p>npm安装后打包，在artifacts暂存3天，构建完成后可以在pipeline点击下载，文件名为Git Tag</p>
<h3 id="修改版本号提交"><a href="#修改版本号提交" class="headerlink" title="修改版本号提交"></a>修改版本号提交</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version-job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">version</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:16</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - if:</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="bullet">-git-tag-version=false</span> <span class="string">version</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">ci</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">ci@email.com</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-am</span> <span class="string">"Update verison $CI_COMMIT_TAG"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">push</span> <span class="string">"https://access_token_name:$&#123;CI_PUSH_TOKEN&#125;@gitlab.com/project_name.git"</span> <span class="attr">HEAD:$CI_COMMIT_REF_NAME</span></span><br></pre></td></tr></table></figure>
<p>将package.json中的版本号修改为Git Tag版本号，并提交代码库</p>
<blockquote>
<p>这里需要生成gitlab的access token，并且配置到CI/CD的Variables中使用</p>
</blockquote>
<h3 id="打包文件上传到测试服务器"><a href="#打包文件上传到测试服务器" class="headerlink" title="打包文件上传到测试服务器"></a>打包文件上传到测试服务器</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy-job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:16</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - if:</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line"><span class="attr">  before_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">eval</span> <span class="string">$(ssh-agent</span> <span class="bullet">-s)</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">"$SSH_PRIVATE_KEY"</span> <span class="string">| tr -d '\r' | ssh-add -</span></span><br><span class="line"><span class="string"></span><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ssh</span> <span class="bullet">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="bullet">-p</span> <span class="number">22</span> <span class="string">user@host</span> <span class="string">"rm -rf xxxx/* &amp;&amp; exit"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">scp</span> <span class="bullet">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="bullet">-P</span> <span class="number">22</span> <span class="bullet">-r</span> <span class="string">dist/*</span> <span class="string">user@host</span> <span class="string">:xxxx/</span></span><br></pre></td></tr></table></figure>
<p>安装ssh后，通过ssh删除原有文件，然后scp复制到远程服务器</p>
<blockquote>
<p>需要配置ssh key并配置到CI/CD的Variables中使用</p>
</blockquote>
<h3 id="Electron打包windows"><a href="#Electron打包windows" class="headerlink" title="Electron打包windows"></a>Electron打包windows</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build-job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">electronuserland/builder:wine</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - if:</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"$&#123;CI_COMMIT_TAG&#125;"</span></span><br><span class="line"><span class="attr">    expire_in:</span> <span class="number">3</span> <span class="string">days</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node_modules/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">dist/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">build/</span></span><br></pre></td></tr></table></figure>
<p>因为直接构建windows会提示缺少wine，安装起来比较麻烦，可以直接使用镜像<code>electronuserland/builder:wine</code>进行构建</p>
<h3 id="Docker镜像并上传Harbor"><a href="#Docker镜像并上传Harbor" class="headerlink" title="Docker镜像并上传Harbor"></a>Docker镜像并上传Harbor</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build-job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - if:</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line"><span class="attr">  image:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">anjia0532/kaniko-project.executor:debug</span></span><br><span class="line"><span class="attr">    entrypoint:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">"&#123;\"auths\":&#123;\"$HARBOR_URL\":&#123;\"auth\":\"$(echo -n $HARBOR_USERNAME:$HARBOR_PASSWORD | base64)\"&#125;&#125;&#125;"</span> <span class="string">&gt; /kaniko/.docker/config.json</span></span><br><span class="line"><span class="string">    - /kaniko/executor</span></span><br><span class="line"><span class="string">      --context "$&#123;CI_PROJECT_DIR&#125;"</span></span><br><span class="line"><span class="string">      --dockerfile "$&#123;CI_PROJECT_DIR&#125;/Dockerfile"</span></span><br><span class="line"><span class="string">      --destination "$&#123;DOCKER_IMAGE_NAME&#125;:$&#123;CI_COMMIT_TAG&#125;"</span></span><br><span class="line"><span class="string">      --snapshotMode=redo</span></span><br><span class="line"><span class="string">      --use-new-run</span></span><br></pre></td></tr></table></figure>
<p>借助<code>kaniko</code>，将项目打包成docker镜像后，上传到Harbor镜像仓库</p>
<h3 id="Docker镜像部署k8s"><a href="#Docker镜像部署k8s" class="headerlink" title="Docker镜像部署k8s"></a>Docker镜像部署k8s</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy-job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - if:</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line"><span class="attr">  image:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">bitnami/kubectl:1.27</span></span><br><span class="line"><span class="attr">    entrypoint:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kubectl</span> <span class="string">config</span> <span class="string">get-contexts</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kubectl</span> <span class="string">config</span> <span class="string">use-context</span> <span class="string">$&#123;CONTEXT_NAME&#125;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kubectl</span> <span class="string">config</span> <span class="string">view</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kubectl</span> <span class="bullet">--namespace</span> <span class="string">develop</span> <span class="string">get</span> <span class="string">deployments</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kubectl</span> <span class="bullet">--namespace</span> <span class="string">develop</span> <span class="string">describe</span> <span class="string">deployments/$&#123;DEPLOYMENT_NAME&#125;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kubectl</span> <span class="bullet">--namespace</span> <span class="string">develop</span> <span class="string">set</span> <span class="string">image</span> <span class="string">deployments/$&#123;DEPLOYMENT_NAME&#125;</span> <span class="string">$&#123;CONTAINER_NAME&#125;=$&#123;DOCKER_IMAGE_NAME&#125;:$&#123;CI_COMMIT_TAG&#125;</span></span><br></pre></td></tr></table></figure>
<p>借助<code>kubectl</code>，将k8s部署容器替换为最新构建的镜像</p>
<blockquote>
<p>To Be Continue</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gitlab </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回顾一下我的2022]]></title>
      <url>/2023/02/03/review-2022/</url>
      <content type="html"><![CDATA[<p>持续摆烂ing<br><a id="more"></a><br>就…发现我好久没有更新博客了，最初写博客的目的是为了接触新技术时，能够自己记录一遍加深理解。</p>
<p>现在似乎只有日常佛系躺平，emmmm….怎么办呢</p>
<p>那么今年的大事记：</p>
<ul>
<li>房子装修好了没有入住</li>
<li>基金还没回本</li>
<li>想买车一直没买</li>
<li>健身环救我狗命</li>
<li>俄乌冲突、环台湾军演</li>
<li>新冠疫情管控全面放开，两周感染89%</li>
<li>还是一成不变的社畜生活</li>
</ul>
<p>今年的flag：</p>
<ul>
<li>搬出去自己住</li>
<li>等一辆15w的魔豆3</li>
<li>挣大钱</li>
</ul>
<p>就这样吧</p>
]]></content>
      
        <categories>
            
            <category> 年度总结 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[EMQX搭建对接WSS]]></title>
      <url>/2022/05/26/emqx-wss/</url>
      <content type="html"><![CDATA[<p>小前端用了这么久WSS，还是头一次自己搭，折腾一下午才弄好，记录一下吧<br><a id="more"></a><br>后台服务用的是之前装的<a href="https://www.emqx.com" target="_blank" rel="noopener">‘EMQX’</a>，用于多端的Mqtt通信，这个就不多介绍了，安装方式见<a href="https://www.emqx.com/zh/try?product=enterprise" target="_blank" rel="noopener">‘EMQX下载安装’</a></p>
<h3 id="WS"><a href="#WS" class="headerlink" title="WS"></a>WS</h3><p>要用websocket的话比较简单，因为EMQX提供的有ws端口，默认的8083端口，可以通过配置文件修改，改成<code>0.0.0.0:8083</code>，支持外部访问，并且服务器安全组要开放8083端口</p>
<p>这里要提一点就是有时候修改配置文件restart不生效，后台查了一下发现是emqx有个守护进程需要关掉，正确姿势就是先stop，然后<code>ps -aux | grep emq</code>找到守护进程kill掉，再start启动</p>
<p>前端使用的是<a href="https://github.com/mqttjs/MQTT.js" target="_blank" rel="noopener">‘MQTT’</a> ，因为是老项目，发现最近版本有不兼容的语法，于是找了个使用最多的老版本<code>npm i mqtt@2.18.8 --save</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'mqtt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接</span></span><br><span class="line"><span class="keyword">const</span> client = connect(<span class="string">'ws://xxx.com:8083/mqtt'</span>, &#123;</span><br><span class="line">  username,</span><br><span class="line">  password</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接成功后订阅topic</span></span><br><span class="line">client.on(<span class="string">'connect'</span>, () =&gt; &#123;</span><br><span class="line">  client.subscribe([<span class="string">'presence'</span>])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line">client.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">topic, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (topic) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'presence'</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(message.toString());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>本来到这里就以为可以愉快的结束了，部署上线之后才想起来ssl，含泪上WSS</p>
<h3 id="WSS"><a href="#WSS" class="headerlink" title="WSS"></a>WSS</h3><p>我干的第一件事是百度了一下WSS跟https的ssl证书是用同一个，省了点事</p>
<p>跟上面一样，先改下WSS的8084端口，支持外部访问</p>
<p>然后改一下emqx配置文件，把证书配上，因为不知道是哪个所以都改了</p>
<figure class="highlight apacheconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Path to the file containing the user's private PEM-encoded key.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## See: http://erlang.org/doc/man/ssl.html</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Value: File</span></span><br><span class="line"><span class="attribute">listener</span>.ssl.external.keyfile = your certfile.key</span><br><span class="line"></span><br><span class="line"><span class="comment">## Path to a file containing the user certificate.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## See: http://erlang.org/doc/man/ssl.html</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Value: File</span></span><br><span class="line"><span class="attribute">listener</span>.ssl.external.certfile = your certfile.pem</span><br><span class="line"></span><br><span class="line"><span class="comment">## Path to the file containing the user's private PEM-encoded key.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## See: listener.ssl.&lt;name&gt;.keyfile</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Value: File</span></span><br><span class="line"><span class="attribute">listener</span>.wss.external.keyfile = your certfile.key</span><br><span class="line"></span><br><span class="line"><span class="comment">## Path to a file containing the user certificate.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## See: listener.ssl.&lt;name&gt;.certfile</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Value: File</span></span><br><span class="line"><span class="attribute">listener</span>.wss.external.certfile = your certfile.pem</span><br></pre></td></tr></table></figure>
<p>需要确保emqx是有访问权限的</p>
<p>然后是nginx的配置，一种方法是反向代理，如果不想把端口暴露给外部，可以配置一下代理到内部8084端口，我是单独写了个配置文件把wss端口给出来了<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server</span> &#123;</span><br><span class="line">    <span class="attribute"><span class="nomarkup">listen</span></span> 8084 ssl;</span><br><span class="line">    <span class="attribute">server_name</span> server.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">ssl_certificate</span> your certfile.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> your certfile.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /mqtt &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server.com:8084;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> 1.1;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade $http_upgrade;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> 1800s;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> 1800s;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> 1800s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>前端对接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'mqtt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接</span></span><br><span class="line"><span class="keyword">const</span> client  = connect(<span class="string">'wss://xxx.com:8084/mqtt'</span>, &#123;</span><br><span class="line">  username,</span><br><span class="line">  password</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>完结撒花</p>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> EMQX </tag>
            
            <tag> mqtt </tag>
            
            <tag> websocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回顾一下我的2021]]></title>
      <url>/2022/04/20/review-2021/</url>
      <content type="html"><![CDATA[<p>为什么一个人可以懒到4月份才开始写上一年的年度总结呢<br><a id="more"></a><br>今年已经是工作的第五年了，回忆一下过去一年，似乎并没有什么太大的变化。最初的三年，感觉自己一直处于一个飞速进步的阶段，对技术充满热情，对于未知事物存在很强的求知欲，每天都在朝着更好的方向去努力。反观现在，好像已经没有了最初的动力，不光是技术上，个人工作态度上也进入了瓶颈，有些躺平的意思，今年要努力呢。</p>
<p>反思时间结束，下面是今年的大事记：</p>
<ul>
<li>5月底交房了，虽然不及预期槽点满满，心里总归还是比较开心的</li>
<li>纪念党的100周年，我们生在国旗下，长在春风里，一起为党庆生</li>
<li>720暴雨，疫情封城，虽然天灾人祸接踵而至，但是还是要给郑州点赞的</li>
<li>开始买基金，目前亏损18%，嗯。。。今年目标是回本</li>
<li>工作方面没啥变化，依旧是每天做着赔钱的项目</li>
</ul>
<p>今年的flag：</p>
<ul>
<li>锻炼身体</li>
<li>学好英语</li>
<li><del>出国旅游</del> 出省旅游</li>
<li>装修入住</li>
<li>攒钱买车</li>
</ul>
<p>怀抱希望，今年一定会有好运。。。的吧？</p>
]]></content>
      
        <categories>
            
            <category> 年度总结 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[回顾一下我的2020]]></title>
      <url>/2021/01/02/review-2020/</url>
      <content type="html"><![CDATA[<p>流光容易把人抛，虽然每年都会说时间过得很快，但我现在回首2020，感觉发生了很多事，又一时想不起来做了什么，不得不再老套的感慨一下，今年过得真快。<br><a id="more"></a><br>相比前两年，在个人技能树方面似乎没有太大的进步，没有学到太多的新技术，甚至自己也没有写出什么拿的出手的东西，真是怠惰呢，就不做总结了。</p>
<p>今年的大事记：</p>
<ul>
<li>突如其来的新冠疫情，打乱了一整年的生活节奏，希望2021没有新冠</li>
<li>5月份的一次感冒，感觉把我身体整个的一个亚健康状态打破了，胸闷、反酸、心率不齐，几个月的时间里不停的往医院跑，中间因为某庸医开的药导致了一段时间的高血压，各种吃药的副作用，最终在一家中医院调理好的。算是为自己敲响警钟吧，以后一定要注意身体</li>
<li>独自一人青海甘肃半自由行，头一次体验拼车游的方式，好评</li>
<li>十几年没住过院了吧，针灸跟拔罐真的疼</li>
<li>交房延期了，装修的钱也没攒够</li>
<li>有小伙伴真好</li>
</ul>
<p>然后是今年的flag：</p>
<ul>
<li>锻炼身体</li>
<li>学好英语</li>
<li>出国旅游</li>
<li>装修房子</li>
</ul>
<p>最后感叹一下我多灾多难的本命年吧，上一个本命年雪灾、地震、金融危机，这一个本命年疫情、火灾。<br>希望新的2021年，山河无恙，人间皆安。</p>
]]></content>
      
        <categories>
            
            <category> 年度总结 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[IOT开源项目Thingsboard开发环境搭建]]></title>
      <url>/2020/11/05/thingsboard/</url>
      <content type="html"><![CDATA[<p>Thingsboard社区版本地开发环境搭建，Java小白的不完全攻略，陆续补充<br><a id="more"></a></p>
<h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><p>本机已有的系统环境</p>
<ol>
<li>MacOS 10.15.6</li>
<li>JDK 1.8</li>
<li>Git 2.24.3</li>
<li>Node 10.16.0</li>
<li>IDEA</li>
</ol>
<h3 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h3><p>使用HomeBrew安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install maven</span><br></pre></td></tr></table></figure></p>
<h3 id="代码编译"><a href="#代码编译" class="headerlink" title="代码编译"></a>代码编译</h3><p>github拉取代码，并切换到最新分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/thingsboard/thingsboard.git</span><br><span class="line">git checkout release-3.1</span><br></pre></td></tr></table></figure></p>
<p>maven编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install -DskipTests</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>时间较长，为了避免yarn安装报错，可以先cd到ui-ngx目录下执行yarn install，等待的同时可以先安装下postgresql</p>
</blockquote>
<h3 id="安装postgresql"><a href="#安装postgresql" class="headerlink" title="安装postgresql"></a>安装postgresql</h3><p>使用HomeBrew安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install postgresql</span><br></pre></td></tr></table></figure></p>
<p>安装完成后本地创建postgresql数据库，并修改/application/src/main/resources目录下thingsboard.yml文件中的数据库配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SQL DAO Configuration</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    jpa:</span></span><br><span class="line"><span class="attr">      repositories:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    open-in-view:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">"none"</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">"$&#123;SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.PostgreSQLDialect&#125;"</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driverClassName:</span> <span class="string">"$&#123;SPRING_DRIVER_CLASS_NAME:org.postgresql.Driver&#125;"</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">"$&#123;SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/thingsboard&#125;"</span> <span class="string">//数据库连接</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">"$&#123;SPRING_DATASOURCE_USERNAME:postgres&#125;"</span> <span class="string">//</span> <span class="string">用户名</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">"$&#123;SPRING_DATASOURCE_PASSWORD:postgres&#125;"</span> <span class="string">//</span> <span class="string">密码</span></span><br><span class="line"><span class="attr">    hikari:</span></span><br><span class="line"><span class="attr">      maximumPoolSize:</span> <span class="string">"$&#123;SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:16&#125;"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Maven构建"><a href="#Maven构建" class="headerlink" title="Maven构建"></a>Maven构建</h3><p>使用IDEA打开项目，右键项目根目录下的pom.xml文件，添加为maven项目，之后右键Maven-&gt;Reload project<br><img src="/img/thingsboard1.png" alt="&#39;&#39;"></p>
<h3 id="填充数据"><a href="#填充数据" class="headerlink" title="填充数据"></a>填充数据</h3><p>项目的数据表sql文件位于/dao/src/main/resources/sql目录下，用户数据填充文件是/dao/src/test/resources/sql目录下的system-data.sql，最初的时候我是手动导入的sql文件，后来发现了正确的打开方式</p>
<p>提供了有一个脚本文件来填充数据，在项目根目录执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd application/target/bin/install</span><br><span class="line">chmod a+x install_dev_db.sh</span><br><span class="line">sudo ./install_dev_db.sh</span><br></pre></td></tr></table></figure></p>
<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>找到/application/src/main/java/org.thingsboard.server目录下的ThingsboardServerApplication文件，右键运行即可</p>
<p>运行成功后访问localhost:8080，使用填充的测试用户登录</p>
<p>系统管理员 用户名：sysadmin@thingsboard.org 密码：sysadmin</p>
<p>租户 用户名：tenant@thingsboard.org 密码：tenant</p>
<p>顾客 用户名：customer@thingsboard.org 密码：customer</p>
<h3 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h3><p>命令行进入ui-ngx目录，执行npm run start运行访问localhost:4200即可，需要后台同时运行</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">application: 应用程序主目录，整体项目打包时也是这个Module</span><br><span class="line">common: 公共工具集、方法集模块</span><br><span class="line">dao: 数据访问对象集合，整个应用的DAO层，一般只要dao的都要data，以实现不同数据库数据结构兼容。</span><br><span class="line">docker: 集群部署-docker容器解决方案，包含了部署环境和shell脚本</span><br><span class="line">k8s: 容器编排工具Kubernetes的配置文件和自动化脚本</span><br><span class="line">msa: 微服务半自动构建模块，包含了黑盒测试、js执行引擎等</span><br><span class="line">netty-mqtt: TB的MQTT协议的实现，包括连接、发布、订阅、遗嘱、关闭等</span><br><span class="line">rule-engine: TB的规则引擎，TB没有用开源的Drools等工具，而是自己开发了一套规则引擎，主要包含3个组件和1套服务接口</span><br><span class="line">tools: 工具模块，主要实现了MQTT with SSL客户端和REST客户端。可以测试用。</span><br><span class="line">transport: 三种消息传输服务启动器，服务的实现参考common/transport,mqtt协议的实现见netty-mqtt</span><br><span class="line">ui: TB的用户界面，主要使用AngularJS和react组件，单页应用（要替换掉，用Vue）</span><br></pre></td></tr></table></figure>
<blockquote>
<p>To Be Continue</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
            <category> 项目实例 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular </tag>
            
            <tag> java </tag>
            
            <tag> iot </tag>
            
            <tag> thingsboard </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cordova混合开发APP踩坑记录]]></title>
      <url>/2020/08/18/cordova/</url>
      <content type="html"><![CDATA[<p>最近一段时间做了两个混合开发APP的项目，分别使用了<a href="https://ionicframework.com/" target="_blank" rel="noopener">‘Ionic’</a>和<a href="http://quasar-framework.org/" target="_blank" rel="noopener">‘Quasar’</a>进行开发，<a href="https://cordova.apache.org/" target="_blank" rel="noopener">‘Cordova’</a>进行移动应用构建<br><a id="more"></a><br>Cordova是一个开发跨平台Web App的工具, 将Web开发项目构建成移动应用，基于浏览器进行开发，同时可以依赖各种Cordova插件进行原生APP的操作，这里就主要写一下用到的一些插件</p>
<h3 id="切换到iOS-WkWebView"><a href="#切换到iOS-WkWebView" class="headerlink" title="切换到iOS WkWebView"></a>切换到iOS WkWebView</h3><p>Ionic和Quasar默认使用的都是UIWebView，但是在iOS 12.0中已弃用，在开发时就需要做一下切换，推荐使用cordova-plugin-wkwebview-engine插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-wkwebview-engine</span><br></pre></td></tr></table></figure></p>
<p>安装完成后在config.xml中platform ios部分添加添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;platform name=&quot;ios&quot;&gt;</span><br><span class="line">    &lt;preference name=&quot;WKWebViewOnly&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">&lt;/platform&gt;</span><br></pre></td></tr></table></figure></p>
<p>详见<a href="https://github.com/apache/cordova-plugin-wkwebview-engine" target="_blank" rel="noopener">‘https://github.com/apache/cordova-plugin-wkwebview-engine’</a></p>
<h3 id="状态栏设置"><a href="#状态栏设置" class="headerlink" title="状态栏设置"></a>状态栏设置</h3><p>推荐使用cordova-plugin-statusbar，可以对状态栏字体，背景色等作出调整<br>比如iOS状态栏字体默认是黑色的，想要修改成白色，在config.xml添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;preference name=&quot;StatusBarStyle&quot; value=&quot;lightcontent&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>详见<a href="https://github.com/apache/cordova-plugin-statusbar" target="_blank" rel="noopener">‘https://github.com/apache/cordova-plugin-statusbar’</a></p>
<h3 id="状态栏高度"><a href="#状态栏高度" class="headerlink" title="状态栏高度"></a>状态栏高度</h3><p>由于不同型号手机状态栏高度不一致，我们有时候需要去获取到状态栏高度，可以使用cordova-plugin-statusbar-height插件<br>详见<a href="https://github.com/wangjunget/cordova-plugin-statusbar-height" target="_blank" rel="noopener">‘https://github.com/wangjunget/cordova-plugin-statusbar-height’</a></p>
<h3 id="启动图"><a href="#启动图" class="headerlink" title="启动图"></a>启动图</h3><p>推荐使用cordova-plugin-splashscreen，配置启动图和相关设置<br>需要注意加入一下配置，避免安卓启动图显示比例出现问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;preference name=&quot;SplashMaintainAspectRatio&quot; value=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>详见<a href="https://github.com/apache/cordova-plugin-splashscreen" target="_blank" rel="noopener">‘https://github.com/apache/cordova-plugin-splashscreen’</a></p>
<p>需要注意的坑点</p>
<ol>
<li>iOS启动图名字需要严格按照文档中来，否则不会生效</li>
<li>安卓启动图不能只设置横屏或者竖屏，否则安装包解析会出错</li>
</ol>
<h3 id="横竖屏"><a href="#横竖屏" class="headerlink" title="横竖屏"></a>横竖屏</h3><p>Cordova应用默认是可以切换横竖屏显示，如果想要固定一种显示，可以添加配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 固定竖屏</span><br><span class="line">&lt;preference name=&quot;Orientation&quot; value=&quot;portrait&quot; /&gt;</span><br><span class="line">// 固定横屏</span><br><span class="line">&lt;preference name=&quot;Orientation&quot; value=&quot;landscape&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果想要动态的去设置的话，可以安装cordova-plugin-screen-orientation插件来操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 固定横屏</span><br><span class="line">screen.orientation.lock(&apos;landscape&apos;);</span><br><span class="line">// 取消固定</span><br><span class="line">screen.orientation.unlock();</span><br></pre></td></tr></table></figure></p>
<p>config.xml中的配置和cordova-plugin-screen-orientation是可以结合使用的<br>详见<a href="https://github.com/apache/cordova-plugin-screen-orientation" target="_blank" rel="noopener">‘https://github.com/apache/cordova-plugin-screen-orientation’</a></p>
<blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> cordova </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SonarQube简介与Mac快速搭建]]></title>
      <url>/2020/07/02/sonarqube/</url>
      <content type="html"><![CDATA[<p>SonarQube是一个开源平台，用于管理代码的质量<br><a id="more"></a><br>主要从以下七个维度检测代码质量</p>
<ol>
<li>不遵循代码标准<br> sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具规范代码编写。</li>
<li>潜在的缺陷<br> sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具检 测出潜在的缺陷。</li>
<li>糟糕的复杂度分布<br> 文件、类、方法等，如果复杂度过高将难以改变，这会使得开发人员 难以理解它们, 且如果没有自动化的单元测试，对于程序中的任何组件的改变都将可能导致需要全面的回归测试。</li>
<li>重复率<br> 检查重复的代码块，避免大量的复制粘贴。</li>
<li>注释不足或者过多<br> 没有注释将使代码可读性变差，特别是当不可避免地出现人员变动时，程序的可读性将大幅下降。而过多的注释又会使得开发人员将精力过多地花费在阅读注释上，亦违背初衷。</li>
<li>单元测试覆盖率<br>sonar可以很方便地统计并展示单元测试覆盖率。</li>
<li>糟糕的设计<br> 通过sonar可以找出循环，展示包与包、类与类之间的相互依赖关系，可以检测自定义的架构规则。通过sonar可以管理第三方的jar包，可以利用LCOM4检测单个任务规则的应用情况， 检测藕合。</li>
</ol>
<h3 id="Docker快速安装"><a href="#Docker快速安装" class="headerlink" title="Docker快速安装"></a>Docker快速安装</h3><p>使用安装包还需要安装并配置数据库环境，而且SonarQube 8.0以上版本是不支持mysql的，所以选择使用Docker快速安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sonarqube</span><br></pre></td></tr></table></figure></p>
<p>镜像安装完成后，命名并在9000端口启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name sonarqube -p 9000:9000 sonarqube</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>9000是默认端口，其他端口启动的话在使用SonarScanner时需要修改配置文件</p>
</blockquote>
<p>访问9000端口查看是否启动成功，首次启动成功后，后续使用时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 启动</span><br><span class="line">docker start sonarqube</span><br><span class="line">// 关闭</span><br><span class="line">docker stop sonarqube</span><br></pre></td></tr></table></figure></p>
<h3 id="安装SonarScanner"><a href="#安装SonarScanner" class="headerlink" title="安装SonarScanner"></a>安装SonarScanner</h3><p>SonarScanner用于扫描项目代码，安装比较简单，官网下载安装包解压即可，<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/" target="_blank" rel="noopener">‘点击安装’</a></p>
<blockquote>
<p>一般不需要修改配置，要修改比如默认端口号之类的配置的话，编辑<code>conf/sonar-scanner.properties</code>，按官网说明修改即可。</p>
</blockquote>
<p>解压完成后，需要配置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SONAR_RUNNER_HOME=/your path/SonarQube/sonar-scanner</span><br><span class="line">export PATH=$PATH:$SONAR_RUNNER_HOME/bin</span><br></pre></td></tr></table></figure></p>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>扫描项目代码时需要在代码根目录下创建<code>sonar-project.properties</code>文件，具体见官网，下面简单介绍一下我用到的几个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 项目ID，唯一</span><br><span class="line">sonar.projectKey=siemens</span><br><span class="line"># 平台显示的项目名</span><br><span class="line">sonar.projectName=siemens</span><br><span class="line"># 版本号</span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line"># 路径</span><br><span class="line">sonar.sources=./</span><br><span class="line"># 编程语言</span><br><span class="line">sonar.language=js,ts</span><br><span class="line"># 编码</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br><span class="line"># 测试覆盖率排除的文件</span><br><span class="line">sonar.coverage.exclusions=**/*.spec.ts</span><br><span class="line"># 代码扫描排除的文件</span><br><span class="line">sonar.exclusions=**/*.spec.ts,**/*.scss,e2e/**/*.*</span><br><span class="line"># 测试报告路径</span><br><span class="line">sonar.typescript.lcov.reportPaths=coverage/lcov.info</span><br></pre></td></tr></table></figure></p>
<p>配置好之后在项目根目录执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner</span><br></pre></td></tr></table></figure></p>
<p>成功后访问9000端口查看报告即可</p>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sonarqube </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Otter数据同步简介]]></title>
      <url>/2020/03/29/otter/</url>
      <content type="html"><![CDATA[<p>Otter是阿里巴巴开源的增量数据同步工具，因为项目用到了，简单记录一下<br><a id="more"></a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>定位：基于数据库增量日志解析，准实时同步到本机房或异地机房的mysql/oracle数据库. 一个分布式数据库同步系统<br>项目地址：<a href="https://github.com/alibaba/otter" target="_blank" rel="noopener">‘https://github.com/alibaba/otter’</a></p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="/img/otter.jpeg" alt=""></p>
<ul>
<li>通过<a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">‘Canal’</a>做数据库增量订阅，获取增量数据</li>
<li>Web管理系统manager进行同步配置，推送到node节点</li>
<li>node节点将同步状态反馈到manager上</li>
<li>基于zookeeper，解决分布式状态调度的，允许多node节点之间协同工作</li>
</ul>
<p>所以在建立数据同步时，需要满足的条件是：</p>
<ul>
<li>搭建manager管理平台</li>
<li>数据源需要配置canal，如果是双向同步，两边都需要配置canal</li>
<li>位于同一个zookeeper集群</li>
<li>至少一个node节点</li>
</ul>
<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ol>
<li>Docker安装模式<br>详见官方文档<a href="https://github.com/alibaba/otter/wiki/Docker_QuickStart" target="_blank" rel="noopener">‘Docker_QuickStart’</a></li>
<li>手工安装模式<br>详见官方文档<a href="https://github.com/alibaba/otter/wiki/Manager_Quickstart" target="_blank" rel="noopener">‘Manager_Quickstart’</a> <a href="https://github.com/alibaba/otter/wiki/Node_Quickstart" target="_blank" rel="noopener">‘Node_Quickstart’</a></li>
</ol>
<h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><p>通过manager平台来创建数据同步服务，流程如下</p>
<ol>
<li>创建zookeeper</li>
<li>创建node</li>
<li>添加数据库配置</li>
<li>添加数据同步表配置</li>
<li>创建canal<br>canal对应一个数据源，每一个数据同步任务都需要至少一个canal，不能重复使用</li>
<li>创建channel</li>
<li>创建pipeline<br>channel下具体的数据同步任务，需要选择node和canal</li>
<li>设置pipeline的数据同步映射规则<br>定义源数据表和目标数据表的同步关系</li>
<li>启动channel</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> otter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里云RDS快速上手]]></title>
      <url>/2020/03/28/rds/</url>
      <content type="html"><![CDATA[<p>介绍一下如何创建阿里云RDS实例、进行基本设置以及连接实例数据库<br><a id="more"></a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>阿里云关系型数据库（Relational Database Service，简称 RDS）是一种稳定可靠、可弹性伸缩的在线数据库服务。基于阿里云分布式文件系统和高性能存储，RDS 支持 MySQL、SQL Server、PostgreSQL 和 PPAS（Postgre Plus Advanced Server，一种高度兼容 Oracle 的数据库）引擎，并且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，彻底解决数据库运维的烦恼</p>
<blockquote>
<p>太长不看：其实就是个独立的、可直接访问的云数据库</p>
</blockquote>
<h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>购买流程不多介绍，说一下需要注意的几个点</p>
<ul>
<li>地域<br>实例所在的地理位置，购买后将无法更换地域，只能在同一地域迁移可用区，需要确保RDS实例与需要连接的RES实例在同一个地域，否则无法发挥最佳性能</li>
<li>数据库类型<br>选择合适的数据库类型：MySQL、SQL Server、PostgreSQL和PPAS，以及对应的版本，如MySQL5.5、5.6、5.7、8.0，不同地域所支持的数据库不同</li>
<li>存储空间<br>RDS的存储空间包括数据空间、系统文件空间、Binlog文件空间和事务文件空间。我在导入数据后发现有额外占用了3G左右的存储空间，所以在购买时需要注意除了本身的数据外，留出足够的空间</li>
</ul>
<h3 id="设置白名单"><a href="#设置白名单" class="headerlink" title="设置白名单"></a>设置白名单</h3><p>RDS实例默认的白名单只包含默认IP地址127.0.0.1，表示任何设备均无法访问该RDS实例<br><img src="/img/rds_1.png" alt=""><br>设置白名单包括两种操作：</p>
<ol>
<li>设置IP名单<br>添加IP地址，使这些IP地址可以访问该RDS实例</li>
<li>设置ECS安全组<br>添加ECS安全组，使ECS安全组内的ECS实例可以访问该RDS实例，只有部分版本和地域支持</li>
</ol>
<blockquote>
<p>若将白名单设置为%或者0.0.0.0/0，表示允许任何IP地址访问该RDS实例，建议只有本地调试时使用，上线后不要这么做</p>
</blockquote>
<h3 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h3><p>可以在RDS实例控制台-&gt;基本信息中查看<br><img src="/img/rds_2.png" alt=""></p>
<ol>
<li>内网访问<br>默认开放内网地址，也是推荐使用的地址，只有ECS和DMS可以通过内网访问RDS，并且需要满足以下条件<ul>
<li>ECS和RDS属于同一个阿里云主账号。</li>
<li>ECS和RDS位于同一个地域。</li>
<li>ECS和RDS的网络类型相同。</li>
<li>如果ECS和RDS网络类型都是VPC，则必须处于同一个VPC。</li>
<li>ECS的私网IP已添加到RDS白名单</li>
</ul>
</li>
<li>公网访问<br>公网也叫外网，通过公网访问RDS就是使用RDS实例的外网地址进行访问。RDS实例默认不提供外网地址，如果要通过公网访问，需要在数据库连接页面申请外网地址</li>
</ol>
<h3 id="创建账号和数据库"><a href="#创建账号和数据库" class="headerlink" title="创建账号和数据库"></a>创建账号和数据库</h3><p>RDS for MySQL实例支持两种数据库账号</p>
<ol>
<li>高权限账号<br>一个实例中只能创建一个高权限账号，可以管理所有普通账号和数据库</li>
<li>普通账号<br>一个实例可以创建多个普通账号，需要手动给普通账号授予特定数据库的权限<br><img src="/img/rds_3.png" alt=""></li>
</ol>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>不再赘述，通过内网/外网地址，使用创建好的账号登录即可</p>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> rds </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql优化：Explain分析介绍]]></title>
      <url>/2020/01/22/explain/</url>
      <content type="html"><![CDATA[<p>使用Explain命令可以查看SQL语句对于查询和连接表的执行效果，帮助我们选择更好的索引，完成查询的优化<br><a id="more"></a><br>使用方法，在SQL语句前加上explain就可以了<br>例如：explain select * from users<br>得到的结果类似：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">select_type</th>
<th style="text-align:center">table</th>
<th style="text-align:center">partitions</th>
<th style="text-align:center">type</th>
<th style="text-align:center">possible_keys</th>
<th style="text-align:center">key</th>
<th style="text-align:center">key_len</th>
<th style="text-align:center">ref</th>
<th style="text-align:center">rows</th>
<th style="text-align:center">filtered</th>
<th style="text-align:center">Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">SIMPLE</td>
<td style="text-align:center">users</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">ALL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">39484</td>
<td style="text-align:center">100.00</td>
<td style="text-align:center">NULL</td>
</tr>
</tbody>
</table>
<p>下面具体介绍下每一项的含义</p>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>SELECT识别符。这是SELECT的查询序列号</p>
<h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>SELECT类型,可以为以下任何一种:</p>
<ul>
<li>SIMPLE: 简单SELECT(不使用UNION或子查询)</li>
<li>PRIMARY: 最外面的SELECT</li>
<li>UNION: UNION中的第二个或后面的SELECT语句</li>
<li>DEPENDENT UNION: UNION中的第二个或后面的SELECT语句,取决于外面的查询</li>
<li>UNION RESULT: UNION 的结果</li>
<li>SUBQUERY: 子查询中的第一个SELECT</li>
<li>DEPENDENT SUBQUERY: 子查询中的第一个SELECT,取决于外面的查询</li>
<li>DERIVED: 导出表的SELECT(FROM子句的子查询)</li>
</ul>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>输出的行所引用的表</p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>联接类型。下面给出各种联接类型,按照从最佳类型到最坏类型进行排序:</p>
<ul>
<li>system: 表仅有一行(=系统表)。这是const联接类型的一个特例。</li>
<li>const: 表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!</li>
<li>eq_ref: 对于每个来自于前面的表的行组合,从该表中读取一行。这可能是最好的联接类型,除了const类型。</li>
<li>ref: 对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取。</li>
<li>ref_or_null: 该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。</li>
<li>index_merge: 该联接类型表示使用了索引合并优化方法。</li>
<li>unique_subquery: 该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。</li>
<li>index_subquery: 该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)</li>
<li>range: 只检索给定范围的行,使用一个索引来选择行。</li>
<li>index: 该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。</li>
<li>ALL: 对于每个来自于先前的表的行组合,进行完整的表扫描。</li>
</ul>
<h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p>指出MySQL能使用哪个索引在该表中找到行</p>
<h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>显示MySQL实际决定使用的键(索引)。如果没有选择索引,键是NULL。</p>
<h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>显示MySQL决定使用的键长度。如果键是NULL,则长度为NULL。</p>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>显示使用哪个列或常数与key一起从表中选择行。</p>
<h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><p>显示MySQL认为它执行查询时必须检查的行数。多行之间的数据相乘可以估算要处理的行数。</p>
<h3 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a>filtered</h3><p>显示了通过条件过滤出的行数的百分比估计值。</p>
<h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><p>该列包含MySQL解决查询的详细信息</p>
<ul>
<li>Distinct:MySQL发现第1个匹配行后,停止为当前的行组合搜索更多的行。</li>
<li>Not exists:MySQL能够对查询进行LEFT JOIN优化,发现1个匹配LEFT JOIN标准的行后,不再为前面的的行组合在该表内检查更多的行。</li>
<li>range checked for each record (index map: #):MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。</li>
<li>Using filesort:MySQL需要额外的一次传递,以找出如何按排序顺序检索行。</li>
<li>Using index:从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。</li>
<li>Using temporary:为了解决查询,MySQL需要创建一个临时表来容纳结果。</li>
<li>Using where:WHERE 子句用于限制哪一个行匹配下一个表或发送到客户。</li>
<li>Using sort_union(…), Using union(…), Using intersect(…):这些函数说明如何为index_merge联接类型合并索引扫描。</li>
<li>Using index for group-by:类似于访问表的Using index方式,Using index for group-by表示MySQL发现了一个索引,可以用来查 询GROUP BY或DISTINCT查询的所有列,而不要额外搜索硬盘访问实际的表。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[插件:DragMap]]></title>
      <url>/2020/01/15/drag-map/</url>
      <content type="html"><![CDATA[<p>最近做的一个拖拽定位工具类，主要应用场景为各种IOT项目的示意图，设备定位功能<br><a id="more"></a><br>目前分为两种模式</p>
<ul>
<li>Canvas：地图由<code>Canvas</code>绘制，支持拖拽和缩放，包含位点数据的管理和一系列配置方法，相比定位版，使用起来更加方便，功能更加齐全，推荐使用</li>
<li>定位：绝对定位版本，比较简易，主要提供了拖拽方法，事件发送和位点绝对定位数据的转换，不包含对dom结构和数据的管理，作者已放弃治疗，请慎用</li>
</ul>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>仓库地址: <a href="https://github.com/gitliyu/drag-map" target="_blank" rel="noopener">‘https://github.com/gitliyu/drag-map’</a></p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>Demo: <a href="https://www.liyu.fun/demo/drag-map">‘https://www.liyu.fun/demo/drag-map’</a></p>
<p>Demo源码示例： <a href="https://github.com/gitliyu/drag-map/blob/master/demo/src/views/Canvas.vue" target="_blank" rel="noopener">‘Canvas’</a>  <a href="https://github.com/gitliyu/drag-map/blob/master/demo/src/views/Position.vue" target="_blank" rel="noopener">‘定位’</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install drag-map</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DragMap <span class="keyword">from</span> <span class="string">'drag-map'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dragMap = <span class="keyword">new</span> DragMap();</span><br></pre></td></tr></table></figure>
<h3 id="Canvas版本"><a href="#Canvas版本" class="headerlink" title="Canvas版本"></a>Canvas版本</h3><p>默认html结构如下，可在配置项中修改<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"drag-list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag-target"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag-target"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag-target"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"drag-map"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h4><p>在实例化时可接受参数，除<code>type</code>和<code>options</code>外均为非必填项，以下为默认值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> DragMap(&#123;</span><br><span class="line">  <span class="built_in">document</span>, <span class="comment">// 文档对象注入</span></span><br><span class="line">  type: <span class="string">'canvas'</span>, <span class="comment">// 使用canvas版本时必须设置</span></span><br><span class="line">  list: <span class="string">'#drag-list'</span>,   <span class="comment">// 可选目标列表</span></span><br><span class="line">  map: <span class="string">'#drag-map'</span>,     <span class="comment">// 拖拽目标区域</span></span><br><span class="line">  target: <span class="string">'.drag-target'</span>,  <span class="comment">// 拖拽目标</span></span><br><span class="line">  options: &#123;&#125;,  <span class="comment">// 可选区域的数据列表</span></span><br><span class="line">  data: [],  <span class="comment">// 初始化的数据</span></span><br><span class="line">  bgImage: <span class="string">'bg.png'</span>,  <span class="comment">// 背景图片地址</span></span><br><span class="line">  maxScale: <span class="number">3</span>,  <span class="comment">// 最大放大倍数，默认为3</span></span><br><span class="line">  minScale: <span class="number">1</span>,  <span class="comment">// 最小缩放倍数，默认为1</span></span><br><span class="line">  scaleStep: <span class="number">0.05</span>, <span class="comment">// 鼠标滑轮每次缩放比例, 默认为0.05</span></span><br><span class="line">  readonly: <span class="literal">false</span>,  <span class="comment">// 只读模式</span></span><br><span class="line">  deleteImage: <span class="string">'close.png'</span>, <span class="comment">// 删除按钮图片地址</span></span><br><span class="line">  deleteImageSize: <span class="number">20</span>, <span class="comment">// 删除按钮尺寸，默认为20px</span></span><br><span class="line">  labelStyle: &#123;&#125;  <span class="comment">// 位点标签样式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>其中<code>options</code>为拖拽位点图片数据，格式如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  key: <span class="number">1</span>, <span class="comment">// key值必须设置，作为唯一标识符，与drag-list索引值对应</span></span><br><span class="line">  url: <span class="string">'xxx.png'</span>, <span class="comment">// 位点图片地址</span></span><br><span class="line">  label: <span class="string">'label'</span>, <span class="comment">// 位点标签</span></span><br><span class="line">  disabled: <span class="literal">false</span>, <span class="comment">// 选项禁用</span></span><br><span class="line">  ...options <span class="comment">// 其他自定义数据，会在事件和记录的位点数据中一并记录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>位点数据<code>data</code>格式如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  key: <span class="number">1</span>,</span><br><span class="line">  x: <span class="number">0.2</span>, <span class="comment">// 横坐标 保留4位</span></span><br><span class="line">  y: <span class="number">0.3</span>, <span class="comment">// 纵坐标</span></span><br><span class="line">  width: <span class="number">70</span>,  <span class="comment">// 位点图像宽度</span></span><br><span class="line">  height: <span class="number">70</span>,  <span class="comment">// 位点图像高度</span></span><br><span class="line">  ...options <span class="comment">// options中自定义数据</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p>
<p>位点标签样式<code>labelStyle</code>格式如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  font: <span class="string">'16px bold 黑体'</span>, <span class="comment">// 字体样式字符串</span></span><br><span class="line">  fillStyle: <span class="string">'#333'</span>,  <span class="comment">// 字体颜色</span></span><br><span class="line">  margin: <span class="number">15</span>, <span class="comment">// label间距，默认15</span></span><br><span class="line">  position: <span class="string">'bottom'</span>  <span class="comment">// label位置，默认bottom top|bottom|left|right</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>对于拖拽各个过程的数据，都会以事件的形式发送出来，监听方式如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dragMap = <span class="keyword">new</span> DragMap();</span><br><span class="line"></span><br><span class="line">dragMap.on(<span class="string">'drop'</span>, (data, event) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'drop'</span>, data, event);</span><br><span class="line">&#125;);</span><br><span class="line">dragMap.on(<span class="string">'click'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'click'</span>, data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>以下是所有事件介绍</p>
<ul>
<li><strong><em>dragstart(data, event)</em></strong> 拖拽开始</li>
<li><strong><em>dragenter(data, event)</em></strong> 进入目标区域</li>
<li><strong><em>dragover(data, event)</em></strong> 在目标区域中拖拽</li>
<li><strong><em>drop(data, event)</em></strong> 拖拽完成</li>
<li><strong><em>dragleave(data, event)</em></strong> 拖拽离开目标区域</li>
<li><strong><em>click(data, event)</em></strong> 点击位点图像</li>
<li><strong><em>delete(data)</em></strong> 点击位点删除按钮</li>
<li><strong><em>mouseover(data, event)</em></strong> 鼠标经过位点</li>
<li><strong><em>mouseleave(data, event)</em></strong> 鼠标移出位点</li>
</ul>
<p>事件接受参数<code>event</code>为原生事件参数，<code>data</code>为当前位点数据格式同实力化格式一致</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>操作类</p>
<ul>
<li><strong><em>refresh()</em></strong> 当dom元素发生变化后调用，重新刷新dom节点并绑定事件</li>
<li><strong><em>draw()</em></strong> 重绘画布</li>
<li><strong><em>clear()</em></strong> 清空数据并重置画布，保留背景图</li>
</ul>
<p>数据类</p>
<ul>
<li><p><strong><em>setOptions(options)</em></strong> 设置可选项数据，返回<code>Promise</code>，设置后需要等待图片加载完成再进行下一步</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dragMap.setOptions(options).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><em>setData(data)</em></strong> 设置位点数据</p>
</li>
<li><strong><em>getData()</em></strong> 获取位点数据</li>
</ul>
<p>配置类</p>
<ul>
<li><strong><em>setBgImage(url)</em></strong> 设置背景图</li>
<li><strong><em>setScale(scale)</em></strong> 设置当前缩放倍数</li>
<li><strong><em>setMinScale(scale)</em></strong> 设置最小缩放倍数，默认<code>1</code></li>
<li><strong><em>setMaxScale(scale)</em></strong> 设置最大缩放倍数，默认<code>3</code></li>
<li><strong><em>setScaleStep(step)</em></strong> 设置每次缩放比例，默认<code>0.05</code></li>
<li><p><strong><em>setImageSize(width, height)</em></strong> 设置位点图片大小，默认为图片本身大小,<code>height</code>不传时默认和<code>width</code>相同</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dragMap.setImageSize(<span class="number">70</span>)</span><br><span class="line">dragMap.setImageSize(<span class="number">50</span>, <span class="number">60</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><em>setDeleteImage(url)</em></strong> 设置删除按钮图片</p>
</li>
<li><strong><em>setDeleteImageSize(size)</em></strong> 设置删除按钮尺寸</li>
<li><p><strong><em>setOptionDisabled(index, disabled)</em></strong> 设置选项禁用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dragMap.setOptionDisabled(<span class="number">1</span>) <span class="comment">// 索引为1的禁用</span></span><br><span class="line">dragMap.setOptionDisabled(<span class="number">2</span>, <span class="literal">false</span>) <span class="comment">// 取消禁用</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><em>setLabelStyle(style)</em></strong> 设置label样式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dragMap.setLabelStyle(&#123;</span><br><span class="line">  font: <span class="string">'16px bold 黑体'</span>,</span><br><span class="line">  fillStyle: <span class="string">'#333'</span>,</span><br><span class="line">  margin: <span class="number">15</span>,</span><br><span class="line">  position: <span class="string">'bottom'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定位版本"><a href="#定位版本" class="headerlink" title="定位版本"></a>定位版本</h3><p>默认html结构为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"drag-list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag-target"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag-target"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag-target"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"drag-map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="配置项-1"><a href="#配置项-1" class="headerlink" title="配置项"></a>配置项</h4><p>在实例化时可接受参数，以下为默认值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> DragMap(&#123;</span><br><span class="line">  <span class="built_in">document</span>, <span class="comment">// 文档对象注入</span></span><br><span class="line">  list: <span class="string">'#drag-list'</span>,   <span class="comment">// 可选目标列表</span></span><br><span class="line">  map: <span class="string">'#drag-map'</span>,     <span class="comment">// 拖拽目标区域</span></span><br><span class="line">  target: <span class="string">'.drag-target'</span>  <span class="comment">// 拖拽目标</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h4 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h4><ul>
<li><strong><em>dragstart(data, event)</em></strong> 拖拽开始</li>
<li><strong><em>dragenter(data, event)</em></strong> 进入目标区域</li>
<li><strong><em>dragover(data, event)</em></strong> 在目标区域中拖拽</li>
<li><strong><em>drop(data, event)</em></strong> 拖拽完成</li>
<li><strong><em>dragleave(data, event)</em></strong> 拖拽离开目标区域</li>
</ul>
<blockquote>
<p>移动端只支持drop事件</p>
</blockquote>
<p>相比于<code>canvas</code>版本，<code>data</code>数据格式有所不同<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  action: <span class="string">'add'</span>   <span class="comment">// 操作类型 'add'|'edit'</span></span><br><span class="line">  index: <span class="number">1</span>  <span class="comment">// 拖拽对象索引值</span></span><br><span class="line">  offsetX: <span class="number">155</span>  <span class="comment">// 水平偏移量，单位px</span></span><br><span class="line">  offsetY: <span class="number">106</span>  <span class="comment">// 垂直偏移量，单位px</span></span><br><span class="line">  percentX: <span class="number">10.18</span>   <span class="comment">// 水平偏移百分比</span></span><br><span class="line">  percentY: <span class="number">27.04</span>   <span class="comment">// 垂直偏移百分比</span></span><br><span class="line">  style: <span class="string">'left: 155px;top: 106px;'</span>, <span class="comment">// style字符串</span></span><br><span class="line">  percentStyle: <span class="string">'left: 10.18%;top: 27.04%;'</span> <span class="comment">// 百分比style字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul>
<li><strong><em>refresh()</em></strong> 当dom元素发生变化后调用，重新刷新dom节点并绑定事件</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> canvas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从无到有搭建Superset(Mac)]]></title>
      <url>/2020/01/04/superset/</url>
      <content type="html"><![CDATA[<p><a href="https://airbnb.io/projects/superset/" target="_blank" rel="noopener">‘Superset’</a>是一款由Airbnb开源的“现代化的企业级 BI（商业智能） Web 应用程序”，其通过创建和分享dashboard，为数据分析提供了轻量级的数据查询和可视化方案。<br><a id="more"></a></p>
<h3 id="Superset简介"><a href="#Superset简介" class="headerlink" title="Superset简介"></a>Superset简介</h3><p>  <code>Superset</code>的前端主要用到了React和NVD3/D3，而后端则基于<code>Python</code>的Flask框架和Pandas、SQLAlchemy等依赖库，主要提供了这几方面的功能：</p>
<ul>
<li>集成数据查询功能，支持多种数据库，包括 MySQL、PostgresSQL、Oracle、SQL Server、SQLite、SparkSQL 等，并深度支持 Druid。</li>
<li>通过 NVD3/D3 预定义了多种可视化图表，满足大部分的数据展示功能。如果还有其他需求，也可以自开发更多的图表类型，或者嵌入其他的 JavaScript 图表库（如 HighCharts、ECharts）。</li>
<li>提供细粒度安全模型，可以在功能层面和数据层面进行访问控制。支持多种鉴权方式（如数据库、OpenID、LDAP、OAuth、REMOTE_USER 等）。</li>
</ul>
<h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>由于我本地没有安装<code>Python</code>，所有首先用Homebrew安装下Python3.7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure></p>
<p>之后需要配置环境变量，按步骤执行以下操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 编辑bash_profile文件</span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"># 末尾添加一行，指向本地安装路径</span><br><span class="line">alias python=/usr/local/bin/python3.7</span><br><span class="line"># 环境变量生效</span><br><span class="line">source .bash_profile</span><br><span class="line"># 查看python版本</span><br><span class="line">python -v</span><br></pre></td></tr></table></figure></p>
<h4 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h4><p><code>Superset</code>的依赖包较多，为了避免冲突，需要先搭建虚拟环境，再进行安装，网上查找到的教程基本上都是推荐使用<code>Anaconda</code>自带的conda工具创建虚拟环境，安装方式可以查看<a href="https://blog.csdn.net/lq_547762983/article/details/81003528" target="_blank" rel="noopener">‘mac下anaconda的安装及简单使用’</a><br>安装配置完成后开始创建虚拟环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n superset python=3.7</span><br></pre></td></tr></table></figure></p>
<p>创建完成后启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate superset</span><br></pre></td></tr></table></figure></p>
<h4 id="Superset安装"><a href="#Superset安装" class="headerlink" title="Superset安装"></a>Superset安装</h4><p>首先需要安装Python包管理工具<code>pip</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo easy_install pip</span><br></pre></td></tr></table></figure></p>
<p>之后安装superset，推荐使用豆瓣源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install superset -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure></p>
<h4 id="初始化并启动"><a href="#初始化并启动" class="headerlink" title="初始化并启动"></a>初始化并启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建管理员账号</span><br><span class="line">fabmanager create-admin --app superset </span><br><span class="line"></span><br><span class="line"># 初始化数据库</span><br><span class="line">superset db upgrade</span><br><span class="line"></span><br><span class="line"># 载入案例数据</span><br><span class="line">superset load_examples</span><br><span class="line"></span><br><span class="line"># 初始化角色和权限</span><br><span class="line">superset init</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">superset run -p 8088</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于启动命令，我找到的教程都是使用<code>superset runserver</code>，但我实测时发现使用<code>run</code>命令才能启动，应该是版本不一致导致的</p>
<p>未完待续</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> superset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回顾一下我的2019]]></title>
      <url>/2020/01/01/review-2019/</url>
      <content type="html"><![CDATA[<p>不知不觉又一年，终于到了全国人民心心念念的全面小康了，很庆幸自己没有作为贫困人口被消灭掉<br><a id="more"></a><br>&emsp;&emsp;首先说一下工作方面的吧，这一年感觉自己的技能树都有些点歪了，我本人还是希望能够在前端领域更深入一些，但是也是做外包的无奈吧，感觉横向发展更多一些<br>&emsp;&emsp;一句话总结，去年的话主要是完成了前端到全栈开发的一个转变，后端的工作比较多，今年的话，感觉是从单纯的开发，到目前更侧重于架构和项目管理吧，工作面也变得更加广泛。虽然自己觉得步子大了些，好在也还在我的承受范围内。回忆下今年的发生的值得纪念的事</p>
<ul>
<li>做了一年多的项目（18年12月）终于上线并且稳定使用了，和客户签下了长期的维护合同，并且陆续又有相关的新项目，有种苦日子熬出头的感觉</li>
<li>参与了某世界一百强合作项目，感觉在继鹅厂之后心中对于所谓大公司水平的评价又下了一层</li>
<li>由于老电脑不堪重负光荣退休，终于一咬牙买了台<code>Mac</code>，仿佛打开了新世界的大门，后悔自己没有早点买</li>
<li>第一次准备项目报价，不出意外的因为经验不足对项目的成本估计有误，还好也不算凉透，目前还在抢救中</li>
<li>当上了项目经理，才知道项目规划是真难顶啊，我这个人管自己都嫌累还要管别人，而且本身不擅长跟客户打交道，磕磕绊绊的进行中，希望接下来项目顺利吧</li>
</ul>
<p>&emsp;&emsp;然后是一些技术相关的</p>
<ul>
<li><code>Vue</code>: 看了看源码，写了些总结，整了几个插件，做了次分享，之后坐等3.0</li>
<li><code>Angular + Ionic</code>: 跟项目做了一款混合开发的APP，个人感觉<code>Angular</code>真是不好用，<code>Ionic</code>做混合性能也很差，不说跟原生相比，跟<code>React Native</code>都有一段差距</li>
<li><code>Redis</code>: 接触了之后感觉应用场景蛮多的，项目中都有用到，可以用来做数据缓存，并发处理，排名和队列等等</li>
<li><code>Mqtt</code>: 几个物联网项目都有用到，应该算是目前比较常用的通信方式了，可用性挺强的</li>
<li><code>Laravel</code>: 不得不说<code>Laravel</code>挺好用的，但是方法是真繁杂啊，感觉比接触过的所有前端框架都复杂，想熟悉的话挺费时间的</li>
<li>其他的就不一一列出来了，今年的收获还是挺多的</li>
</ul>
<p>&emsp;&emsp;然后是个人生活方面，感觉又是平平淡淡的一年吧，没有什么大的变化，看了看自己去年年初立下的flag，似乎没有一个目标说的是完成了的，感慨万分，但是今年的flag还是要立的，万一实现了呢</p>
<ul>
<li>掌握一门新的编程语言</li>
<li>了解更多云服务器相关的知识</li>
<li>今年10月就要交房了，攒够装修的钱吧</li>
<li>出国旅游</li>
</ul>
<p>&emsp;&emsp;最后，今年到了自己本命年了，希望新的一年能够有更多的好运吧</p>
<blockquote>
<p>先从年会中奖开始吧，没中的话我再来把这句话删掉(抽到了一套比较精致的餐具四件套，虽然说没有中大奖，但是还是高于期望值的，就不删了)</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 年度总结 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[MAMP配置PHP环境的一些问题]]></title>
      <url>/2019/08/07/mamp/</url>
      <content type="html"><![CDATA[<p>踩坑实录<br><a id="more"></a></p>
<h3 id="切换默认PHP版本"><a href="#切换默认PHP版本" class="headerlink" title="切换默认PHP版本"></a>切换默认PHP版本</h3><p>由于Mac自带PHP环境，在使用MAMP切换版本后全局PHP版本并不会生效（Apache使用的PHP版本会生效），那么如果想要PHP版本的话，使用以下步骤来设置：</p>
<ol>
<li><p>终端输入，编辑或创建<code>bash_profile</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bash_profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>将以下代码添加到<code>bash_profile</code>脚本里，路径指向PHP安装路径的bin目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/Applications/MAMP/bin/php/phpxxx/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行文件，使其生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="php-artisan-相关命令没有效果且没有错误提示"><a href="#php-artisan-相关命令没有效果且没有错误提示" class="headerlink" title="php artisan 相关命令没有效果且没有错误提示"></a>php artisan 相关命令没有效果且没有错误提示</h3><p>默认设置下命令行中的<code>php</code>禁用了错误提示。于是搜索后找到了办法，很简单，只需为<code>php</code>创建一个别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias php=&quot;php -d display_errors&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="切换MAMP中的php老版本"><a href="#切换MAMP中的php老版本" class="headerlink" title="切换MAMP中的php老版本"></a>切换MAMP中的php老版本</h3><p>MAMP比较坑的一点就是虽然提供了很多php版本来使用，但是只有在付费版的MAMP Pro才可以进行切换，免费版只允许切换最新的两个版本<br>后来了解到，它是根据文件夹来获取的版本，于是想到，找到<code>/Applications/MAMP/bin/php</code>目录，将不需要的php文件夹改个名字就好了，比如我想要使用版本为<code>7.0.33</code>，就可以这样设置<br><img src="/img/mamp-php.png" alt=""><br>就可以选择自己想要的版本了<br><img src="/img/mamp-php-version.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis常用命令及数据结构介绍]]></title>
      <url>/2019/05/16/redis/</url>
      <content type="html"><![CDATA[<p><code>Redis</code>是一个使用<code>ANSI C</code>编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库，常用于数据缓存，排行，消息队列等功能<br><a id="more"></a></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">时间复杂度 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">keys [pattern]</td>
<td style="text-align:center">遍历所有key</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">dbsize</td>
<td style="text-align:center">查询存储数量</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">exists</td>
<td style="text-align:center">检查key是否存在</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">del key</td>
<td style="text-align:center">删除指定的key-value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">expire key seconds</td>
<td style="text-align:center">key在seconds秒后过期</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">ttl key</td>
<td style="text-align:center">查看key剩余的过期时间</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">persist key</td>
<td style="text-align:center">去掉key的过期时间</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">type key</td>
<td style="text-align:center">返回key的类型</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">rename key newKey</td>
<td style="text-align:center">修改key的名称</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">flushall</td>
<td style="text-align:center">清空所有数据</td>
<td style="text-align:center">O(1)</td>
</tr>
</tbody>
</table>
<p><strong>演示</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set msg1 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set msg2 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys msg*</span><br><span class="line">1) &quot;msg1&quot;</span><br><span class="line">2) &quot;msg2&quot;</span><br><span class="line">127.0.0.1:6379&gt; del msg2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys msg*</span><br><span class="line">1) &quot;msg1&quot;</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; exists msg1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; expire msg1 60</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl msg1</span><br><span class="line">(integer) 55</span><br><span class="line">127.0.0.1:6379&gt; persist msg1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl msg1</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; type msg1</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure></p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img src="/img/redis-database.png" alt="&#39;redis-database&#39;"><br>如上图所示，<code>Redis</code>虽然是键值对存储数据库，但是不仅仅是简单的<code>key-value</code>格式，它的数据结构分为<code>String</code>(字符串), <code>Hash</code>(字典),     <code>List</code>(列表), <code>Set</code>(集合), <code>ZSet</code>(有序集合)五种，下面分别介绍一下</p>
<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p><code>String</code>是最常用的<code>key-value</code>格式，内容可以是字符串（json字符串)，数字，以及二进制<br><strong>API</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">get key</td>
<td style="text-align:center">获取key对应的value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">set key value</td>
<td style="text-align:center">设置key value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">del key</td>
<td style="text-align:center">删除key-value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">incr</td>
<td style="text-align:center">key自增1， 如果key不存在，自增后get(key) = 1</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">decr</td>
<td style="text-align:center">key自减1， 如果key不存在，自增后get(key) = -1</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">incrby key k</td>
<td style="text-align:center">key自增k， 如果key不存在，自增后get(key) = k</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">decr key k</td>
<td style="text-align:center">key自减k， 如果key不存在，自增后get(key) = -k</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">setnx key value</td>
<td style="text-align:center">key不存在，才设置</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">set key value xx</td>
<td style="text-align:center">key存在，才设置</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">mget key1 key2 key3</td>
<td style="text-align:center">批量获取key，原子操作</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">mset key1 value1 key2 value2</td>
<td style="text-align:center">批量设置key-value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">getset key newvalue</td>
<td style="text-align:center">set key newvalue并返回旧的value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">append key value</td>
<td style="text-align:center">将value追加到旧的value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">strlen key</td>
<td style="text-align:center">返回字符串的长度（注意中文，utf8下一个中文占用3个字符）</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">incrbyfloat key 3.5</td>
<td style="text-align:center">增加key对应的值3.5</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">getrange key start end</td>
<td style="text-align:center">获取字符串指定下标所有的值</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">setrange key index value</td>
<td style="text-align:center">设置指定下标所有对应的值</td>
<td style="text-align:center">O(1)</td>
</tr>
</tbody>
</table>
<p><strong>演示</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set msg hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get msg</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; incr number</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get number</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; incrby number 10</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; setnx msg test</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; set number 20 xx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get number</span><br><span class="line">&quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; append msg world</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; get msg</span><br><span class="line">&quot;helloworld&quot;</span><br><span class="line">127.0.0.1:6379&gt; strlen msg</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; mget msg number</span><br><span class="line">1) &quot;helloworld&quot;</span><br><span class="line">2) &quot;20&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希键值结构区别于<code>String</code>的<code>key-value</code>格式，使用了<code>key-filed-value</code>的形式，如下图<br><img src="/img/redis-hash.png" alt="&#39;redis-hash&#39;"><br><strong>API</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">时间复杂度 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">hset key field</td>
<td style="text-align:center">设置hash key对应field的value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">hget key field</td>
<td style="text-align:center">获取hash key对应field的value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">hdel key field</td>
<td style="text-align:center">获取hash key对应field的value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">hexists key field</td>
<td style="text-align:center">判断hash key 是否有field</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">hlen key</td>
<td style="text-align:center">获取hash key field的数量</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">hmget key field1 field2…fieldN</td>
<td style="text-align:center">批量获取hash key的一批field对应的值</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">hset key field1 value1 …fieldN valueN</td>
<td style="text-align:center">批量设置hash key的一批field value</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">hgetall key</td>
<td style="text-align:center">返回hash key对应所有的field和value</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">hvals key</td>
<td style="text-align:center">返回hash key对应所有的field的value</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">hkeys key</td>
<td style="text-align:center">返回hash key对应所有的field</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">hsetnx key field value</td>
<td style="text-align:center">设置has key 对应的field的value(如果field已经存在，则失败）</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">hincrby key field intCounter</td>
<td style="text-align:center">hash key对应的field的value自增intCounter</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">hincrbyfloat key field floatCounter</td>
<td style="text-align:center">浮点数版本hincrby</td>
<td style="text-align:center">O(1)</td>
</tr>
</tbody>
</table>
<p><strong>演示</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-cli</span><br><span class="line">127.0.0.1:6379&gt; hset user name liyu</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user age 23</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget user name</span><br><span class="line">&quot;liyu&quot;</span><br><span class="line">127.0.0.1:6379&gt; hexists user gender</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hexists user name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; hmget user name age</span><br><span class="line">1) &quot;liyu&quot;</span><br><span class="line">2) &quot;23&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;liyu&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;23&quot;</span><br><span class="line">127.0.0.1:6379&gt; hincrby user age 1</span><br><span class="line">(integer) 24</span><br><span class="line">127.0.0.1:6379&gt; hincrbyfloat user age 1.5</span><br><span class="line">&quot;25.5&quot;</span><br><span class="line">127.0.0.1:6379&gt; hdel user age</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></p>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><code>List</code>是一个有序的列表结构，内容可重复，可以从两侧或者中间的任意位置插入，常用于队列功能<br><img src="/img/redis-list.png" alt="&#39;redis-list&#39;"><br><strong>API</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">时间复杂度 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">lpush key value1,value2..valueN</td>
<td style="text-align:center">从列表左侧插入value</td>
<td style="text-align:center">O(1-N)</td>
</tr>
<tr>
<td style="text-align:center">Rpush key value1,value2..valueN</td>
<td style="text-align:center">从列表右侧插入value</td>
<td style="text-align:center">O(1-N)</td>
</tr>
<tr>
<td style="text-align:center">linsert key before/after value newValue</td>
<td style="text-align:center">在列表指定value前/后插入newValue</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">lpop key</td>
<td style="text-align:center">删除并返回列表左侧第一个子项</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">rpop key</td>
<td style="text-align:center">删除并返回列表右侧第一个子项</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">lrem key count value</td>
<td style="text-align:center">(1) count&gt;0,从左到右删除count个和value相同的子项 (2) count&lt;0,从右到左删除 (3) count=0,删除所有</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">ltrim key start end</td>
<td style="text-align:center">按索引范围修剪列表，不在范围内的子项将被删除</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">lrange key start end</td>
<td style="text-align:center">获取所有范围内所有子项，不会修改列表</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">lindex key index</td>
<td style="text-align:center">获取列表指定索引的子项</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">llen key</td>
<td style="text-align:center">获取列表长度</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">lset key index newValue</td>
<td style="text-align:center">设置列表指定索引值为newValue</td>
<td style="text-align:center">O(N)</td>
</tr>
<tr>
<td style="text-align:center">blpop key timeout</td>
<td style="text-align:center">lpop阻塞版本,如果列表没有子项会阻塞列表直到等待超时(timeout)或发现元素为止</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">brpop key timeout</td>
<td style="text-align:center">rpop阻塞版本</td>
<td style="text-align:center">O(1)</td>
</tr>
</tbody>
</table>
<p><strong>演示</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-cli</span><br><span class="line">127.0.0.1:6379&gt; lpush list a b c d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; rpush list e f g h</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;a&quot;</span><br><span class="line">5) &quot;e&quot;</span><br><span class="line">6) &quot;f&quot;</span><br><span class="line">7) &quot;g&quot;</span><br><span class="line">8) &quot;h&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop list</span><br><span class="line">&quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list</span><br><span class="line">&quot;h&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert list after a b</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">4) &quot;b&quot;</span><br><span class="line">5) &quot;e&quot;</span><br><span class="line">6) &quot;f&quot;</span><br><span class="line">7) &quot;g&quot;</span><br><span class="line">127.0.0.1:6379&gt; lindex list 5</span><br><span class="line">&quot;f&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem list 0 a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; llen list</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 5</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;e&quot;</span><br><span class="line">4) &quot;f&quot;</span><br><span class="line">5) &quot;g&quot;</span><br><span class="line">127.0.0.1:6379&gt; lset list 1 a</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;e&quot;</span><br><span class="line">4) &quot;f&quot;</span><br><span class="line">5) &quot;g&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><code>Set</code>是一个<code>string</code>类型的无序集合，并且集合成员是唯一的不可重复的数据，包含集合间的操作，常用于数据唯一处理，得到交集等功能<br><strong>API</strong><br>集合内的操作：</p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sadd key value1,value2…valueN</td>
<td style="text-align:center">向集合key添加value(如果value已经存在，添加失败）</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">srem key value1,value2…valueN</td>
<td style="text-align:center">将集合key中的value移除掉</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">scard key</td>
<td style="text-align:center">计算集合大小</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">sismember key value</td>
<td style="text-align:center">判断value 是否在集合中</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">srandmember key count</td>
<td style="text-align:center">从集合中随机挑count个元素</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">spop key count</td>
<td style="text-align:center">从集合中随机删除并返回count个元素</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">smembers key</td>
<td style="text-align:center">获取集合所有元素</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">srem key value</td>
<td style="text-align:center">将集合key中的value移除掉</td>
<td style="text-align:center">O(1)</td>
</tr>
</tbody>
</table>
<p>集合间的操作:</p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sdiff key1 key2</td>
<td style="text-align:center">差集</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">sinter key1 key2</td>
<td style="text-align:center">交集</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">sunion key1 key2</td>
<td style="text-align:center">并集</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">sidff/sinter/suion + store destkey</td>
<td style="text-align:center">将差集、交集、并集保存在destkey中</td>
<td style="text-align:center">O(1)</td>
</tr>
</tbody>
</table>
<p><strong>演示</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-cli</span><br><span class="line">127.0.0.1:6379&gt; sadd set a b c d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; srem set b</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; scard set</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sismember set a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; srandmember set 2</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop set 1</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; srem set a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd set b c</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; sadd set2 c d e f</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; sdiff set set2</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; sinter set set2</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; sunion set set2</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;f&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;e&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h4><p>有序集合<code>ZSet</code>和集合一样也是<code>string</code>类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个<code>double</code>类型的分数,通过分数来为集合中的成员进行从小到大的排序,有序集合的成员是唯一的,但分数(score)却可以重复，常用于排名功能<br><strong>API</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">zadd key score value</td>
<td style="text-align:center">添加score和value</td>
<td style="text-align:center">O(logN)</td>
</tr>
<tr>
<td style="text-align:center">zrem key value1,value2…valueN</td>
<td style="text-align:center">将集合中的value移除掉</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">zscore key value</td>
<td style="text-align:center">返回元素的分数</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">zincrby key increScore value</td>
<td style="text-align:center">增加或减少元素的分数</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">zcard key</td>
<td style="text-align:center">返回元素的总个数</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">zrank(zrevrank) key member</td>
<td style="text-align:center">返回元素的排名</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">zrange(zrevrank) key start end [WITHSCORES]</td>
<td style="text-align:center">返回指定索引范围内的升序元素[分值]</td>
<td style="text-align:center">O(logN + m)</td>
</tr>
<tr>
<td style="text-align:center">zrangebyscore(zrevrangebyscore) key minScore maxScore</td>
<td style="text-align:center">返回指定分数范围内的升序元素</td>
<td style="text-align:center">O(logN + m)</td>
</tr>
<tr>
<td style="text-align:center">zcount key minScore maxScore</td>
<td style="text-align:center">返回有序集合内在指定分数范围内的个数</td>
<td style="text-align:center">O(logN + m)</td>
</tr>
<tr>
<td style="text-align:center">zremrangebyrank key start end</td>
<td style="text-align:center">删除指定排名内的升序元素</td>
<td style="text-align:center">O(logN + m)</td>
</tr>
<tr>
<td style="text-align:center">zremrangebyscore key minScore maxScore</td>
<td style="text-align:center">删除指定分数内的升序元素</td>
<td style="text-align:center">O(logN + m)</td>
</tr>
<tr>
<td style="text-align:center">zintersti=ore destination numkeys(表示key的个数) key [key …]</td>
<td style="text-align:center">计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zunionstore destination numkeys key [key …]</td>
<td style="text-align:center">计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Crontab定时任务]]></title>
      <url>/2019/05/15/crontab/</url>
      <content type="html"><![CDATA[<p><code>Linux</code>系统的<code>crontab</code>是用来定期执行程序的命令，简单总结一下使用方法<br><a id="more"></a><br>首先要说的是，<code>linux</code>任务调度的工作主要分为以下两类：</p>
<ol>
<li>系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li>
<li>个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有信息，这些工作可由每个用户自行设置</li>
</ol>
<h3 id="系统任务"><a href="#系统任务" class="headerlink" title="系统任务"></a>系统任务</h3><p>可以通过编辑<code>/etc/crontab</code>文件给所有角色分配任务，格式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minute hour day month week user command</span><br></pre></td></tr></table></figure></p>
<p>字段含义如下</p>
<ul>
<li><strong>minute</strong>： 表示分钟(0-59)</li>
<li><strong>hour</strong>： 表示小时(0-23)</li>
<li><strong>day</strong>： 表示日期(1-31)</li>
<li><strong>month</strong>： 表示月份(1-12)</li>
<li><strong>week</strong>： 表示星期几(0-7，这里的0和7代表周日)</li>
<li><strong>user</strong>: 执行命令的用户名</li>
<li><strong>command</strong>： 要执行的命令，可以是系统命令，也可以是自己编写的脚本文件等</li>
</ul>
<p>在以上各个字段中，还可以使用以下特殊字符：</p>
<ul>
<li><strong>星号(*)</strong>：代表所有可能的值，例如<code>minute</code>字段如果是星号，则表示在满足其它字段的制约条件后每每分钟都会执行</li>
<li><strong>逗号(,)</strong>：可以用逗号隔开的值指定一个列表范围，例如’1,2,3,6’</li>
<li><strong>中杠(-)</strong>：可以用整数之间的中杠表示一个整数范围，例如’2-6’表示’2,3,4,5,6’</li>
<li><strong>正斜线(/)</strong>：可以用正斜线指定时间的间隔频率，例如’0-23/2’表示每两小时执行一次</li>
</ul>
<blockquote>
<p>修改<code>/etc/crontab</code>这种方法只有<code>root</code>用户能用，这种方法更加方便的直接给其他用户设置计划任务，指定执行命令等</p>
</blockquote>
<h3 id="用户任务"><a href="#用户任务" class="headerlink" title="用户任务"></a>用户任务</h3><p><code>Linux</code>用户登录时，可以使用<code>crontab -e</code>编辑自身的定时任务，具体的使用方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u user] file</span><br><span class="line">crontab [-u user] [ -e | -l | -r ]</span><br></pre></td></tr></table></figure></p>
<p>命令参数含义</p>
<ul>
<li><strong>-u user</strong>：用来设定某个用户的<code>crontab</code>服务，此参数一般由<code>root</code>用户来运行</li>
<li><strong>file</strong>：<code>file</code>是命令文件的名字,表示将<code>file</code>做为<code>crontab</code>的任务列表文件并载入<code>crontab</code></li>
<li><strong>-e</strong>：编辑某个用户的<code>crontab</code>文件内容，默认为自身</li>
<li><strong>-l</strong>：显示某个用户的<code>crontab</code>文件内容，默认为自身</li>
<li><strong>-r</strong>：删除某个用户的<code>crontab</code>文件，默认为自身</li>
<li><strong>-i</strong>：在删除用户的<code>crontab</code>文件时给确认提示</li>
</ul>
<blockquote>
<p>此外，可以在<code>/var/spool/cron</code>目录查看用户<code>crontab</code>配置文件</p>
</blockquote>
<p>在编辑任务时，和系统任务相比少了角色的配置，其他参数相同<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minute hour day month week command</span><br></pre></td></tr></table></figure></p>
<h3 id="举一些栗子"><a href="#举一些栗子" class="headerlink" title="举一些栗子"></a>举一些栗子</h3><p>每1分钟执行一次command<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * command</span><br></pre></td></tr></table></figure></p>
<p>每天早上7点半执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 7 * * * command</span><br></pre></td></tr></table></figure></p>
<p>每小时的第3和第15分钟执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 * * * * command</span><br></pre></td></tr></table></figure></p>
<p>在上午8点到11点的第3和第15分钟执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * * command</span><br></pre></td></tr></table></figure></p>
<p>每隔两天的上午8点到11点的第3和第15分钟执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 */2 * * command</span><br></pre></td></tr></table></figure></p>
<p>每个星期一的上午8点到11点的第3和第15分钟执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * 1 command</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP执行命令关闭Linux服务器]]></title>
      <url>/2019/05/14/shutdown/</url>
      <content type="html"><![CDATA[<p>项目中的需求，希望用户可以通过后台关闭/重启内网服务器，记录下功能实现的过程<br><a id="more"></a><br>功能主要分为三部分：</p>
<ul>
<li>Linux相关命令</li>
<li>php执行系统命令</li>
<li>服务器权限问题</li>
</ul>
<h3 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h3><p>我选择使用<code>shutdown</code>命令来关机，调用方式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [-t seconds] [-rkhncfF] time [message]</span><br></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li><strong>-t seconds</strong>: 设定在几秒钟之后进行关机程序</li>
<li><strong>-k</strong>: 并不会真的关机，只是将警告讯息传送给所有使用者</li>
<li><strong>-r</strong>: 关机后重新开机</li>
<li><strong>-h</strong>: 关机后停机</li>
<li><strong>-n</strong>: 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机</li>
<li><strong>-c</strong>: 取消目前已经进行中的关机动作</li>
<li><strong>-f</strong>: 关机时，不做<code>fcsk</code>动作(检查 Linux 档系统)</li>
<li><strong>-F</strong>: 关机时，强迫进行<code>fsck</code>动作</li>
<li><strong>time</strong>: 设定关机的时间</li>
<li><strong>message</strong>: 传送给所有使用者的警告讯息</li>
</ul>
<p>举一些例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r now #立刻关机并重启</span><br><span class="line">shutdown -h now #立刻关机并停机</span><br><span class="line">shutdown -r +10 #10分钟后重启</span><br><span class="line">shutdown -r 10:00 #10点钟重启</span><br><span class="line">shutdown -t5 -r now #立刻重启, 但在警告和删除进程之间,延迟5秒钟.</span><br><span class="line">shutdown -c #取消之前的shutdown命令</span><br></pre></td></tr></table></figure></p>
<p>当然，还有<code>poweroff</code>,<code>reboot</code>,<code>halt</code>,<code>init</code>这些其他的关机命令，大致用法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">halt     [-n] [-w] [-d] [-f] [-i] [-p] [-h]</span><br><span class="line">reboot   [-n] [-w] [-d] [-f] [-i]</span><br><span class="line">poweroff [-n] [-w] [-d] [-f] [-i] [-h]</span><br></pre></td></tr></table></figure></p>
<h3 id="php执行系统命令"><a href="#php执行系统命令" class="headerlink" title="php执行系统命令"></a>php执行系统命令</h3><p>php提供了如下几种方法来执行系统命令</p>
<ul>
<li><strong>exec()</strong>: 执行外部程序<br>返回命令执行结果的最后一行内容, 如果想要获取命令的输出内容, 请确保使用<code>output</code>参数</li>
<li><strong>system()</strong>: 执行外部程序(命令行)，并且显示输出<br>这个函数会将结果直接进行输出(注意是直接输出而不是返回值)，命令成功后返回输出的最后一行，失败返回<code>FALSE</code></li>
<li><strong>shell_exec()</strong>: 通过<code>shell</code>环境执行命令，并且将完整的输出以字符串的方式返回<br>命令执行的输出。 如果执行过程中发生错误或者进程不产生输出，则返回<code>NULL</code></li>
<li><strong>passthru()</strong>: 执行外部程序并且显示原始输出</li>
</ul>
<p>这里选用任何一个方法都可以，综上，要在php文件中执行关闭服务器的命令<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">'shutdown -h now'</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="服务器权限"><a href="#服务器权限" class="headerlink" title="服务器权限"></a>服务器权限</h3><p>如果服务器存在多个角色的话，实际执行<code>shutdown</code>命令的时候会出现如下报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please retry operation after closing inhibitors and logging out other users.</span><br><span class="line">Alternatively, ignore inhibitors and users with &apos;systemctl reboot -i&apos;.</span><br></pre></td></tr></table></figure></p>
<p>这种情况下可以通过使用<code>sudo</code>命令执行<code>shutdown</code>来进行关机，那么就涉及到一个问题，如何在php文件中调用<code>sudo</code>，我查到到了一种解决方案，在<code>etc/sudoers</code>文件配置以下权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%xxx ALL=(ALL) NOPASSWD: ALL  // 设置xxx组下面的用户使用sudo不需要输入密码</span><br></pre></td></tr></table></figure></p>
<p>首先要做的是获取到执行php脚本的用户，一般都是<code>www-data</code>，不清楚的话可以在php文件中使用以下方法获取用户名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(&apos;whoami&apos;);</span><br></pre></td></tr></table></figure></p>
<p>还有一个问题就是，给用户开放所有免密权限，风险实在太大了，我们只需要开放<code>shutdown</code>的权限就好了，所以最终的配置应该是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%www-data ALL=(ALL) NOPASSWD: /sbin/shutdown</span><br></pre></td></tr></table></figure></p>
<p>在php文件中执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">'sudo shutdown -h now'</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Predis操作Redis]]></title>
      <url>/2019/05/09/predis/</url>
      <content type="html"><![CDATA[<p><code>Predis</code>是<code>php</code>连接<code>Redis</code>的操作库，支持已知的所有<code>Redis</code>客户端命令，由于项目中用来处理<code>session</code>和数据缓存，简单整理一下<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> predis/predis</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>如果在连接时不加任何参数，默认会把<code>127.0.0.1</code>和<code>6379</code>作为默认的<code>host</code>和<code>port</code>并且连接超时时间是<code>5</code>秒，以下几种声明方式均可<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认连接</span></span><br><span class="line">$redis = <span class="keyword">new</span> Predis\Client();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组形式</span></span><br><span class="line">$redis = <span class="keyword">new</span> Predis\Client([</span><br><span class="line">    <span class="string">'scheme'</span> =&gt; <span class="string">'tcp'</span>,</span><br><span class="line">    <span class="string">'host'</span>   =&gt; <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="string">'port'</span>   =&gt; <span class="number">6379</span>,</span><br><span class="line">]);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// URI 形式:</span></span><br><span class="line">$redis = <span class="keyword">new</span> Predis\Client(<span class="string">'tcp://127.0.0.1:6379'</span>);</span><br></pre></td></tr></table></figure></p>
<p><code>Client</code>的更多配置参数可以通过第二个参数传进去<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$client = <span class="keyword">new</span> Predis\Client(</span><br><span class="line">    $connection_parameters,</span><br><span class="line">    [<span class="string">'profile'</span> =&gt; <span class="string">'2.8'</span>, <span class="string">'prefix'</span> =&gt; <span class="string">'sample:'</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p><code>Redis</code>会给所需要的参数默认值，参数主要有：</p>
<ul>
<li>profile: 针对特定版本的配置，因为不同版本对同样操作可能有差异</li>
<li>prefix: 自动给要处理的<code>key</code>前面加上一个前缀</li>
<li>exceptions: <code>Redis</code>出错时是否返回结果</li>
<li>connections: 客户端要使用的连接工厂</li>
<li>cluster: 集群中使用哪个后台 (<code>predis</code>, <code>redis</code>或者客户端配置)</li>
<li>replication: 主/从中使用哪个后台 (<code>predis</code>或者客户端配置)</li>
<li>aggregate: 合并连接方式 (覆盖<code>cluster</code>和<code>replication</code>)</li>
</ul>
<p>以下是常用的操作方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通set/get操作</span></span><br><span class="line">$redis-&gt;set(<span class="string">'library'</span>, <span class="string">'predis'</span>);</span><br><span class="line">$redis-&gt;get(<span class="string">'library'</span>);  <span class="comment">// 'predis'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// del 删除</span></span><br><span class="line">$redis-&gt;del(<span class="string">'foo'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// setex set一个存储时效</span></span><br><span class="line">$redis-&gt;setex(<span class="string">'str'</span>, <span class="number">10</span>, <span class="string">'bar'</span>); <span class="comment">// 表示存储有效期为10秒</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// setnx/msetnx 相当于add操作,不会覆盖已有值</span></span><br><span class="line">$redis-&gt;setnx(<span class="string">'foo'</span>,<span class="number">12</span>); <span class="comment">// true</span></span><br><span class="line">$redis-&gt;setnx(<span class="string">'foo'</span>,<span class="number">34</span>); <span class="comment">// false</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// getset操作,set的变种,结果返回替换前的值</span></span><br><span class="line">$redis-&gt;getset(<span class="string">'foo'</span>,<span class="number">56</span>); <span class="comment">// 返回34</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// incrby/incr/decrby/decr 对值的递增和递减</span></span><br><span class="line">$redis-&gt;incr(<span class="string">'foo'</span>); <span class="comment">// foo为57</span></span><br><span class="line">$redis-&gt;incrby(<span class="string">'foo'</span>,<span class="number">2</span>); <span class="comment">// foo为59</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// exists检测是否存在某值</span></span><br><span class="line">$redis-&gt;exists(<span class="string">'foo'</span>); <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// type 类型检测,字符串返回string,列表返回list,set表返回set/zset,hash表返回hash</span></span><br><span class="line">$redis-&gt;type(<span class="string">'foo'</span>); <span class="comment">// 不存在,返回none</span></span><br><span class="line">$redis-&gt;set(<span class="string">'str'</span>,<span class="string">'test'</span>);</span><br><span class="line">$redis-&gt;type(<span class="string">'str'</span>); <span class="comment">// 字符串，返回string</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// append 连接到已存在字符串</span></span><br><span class="line">$redis-&gt;append(<span class="string">'str'</span>,<span class="string">'_123'</span>); <span class="comment">// 返回累加后的字符串长度8,此进str为 'test_123'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// setrange 部分替换操作</span></span><br><span class="line">$redis-&gt;setrange(<span class="string">'str'</span>,<span class="number">0</span>,<span class="string">'abc'</span>); <span class="comment">// 返回3,参数2为0时等同于set操作</span></span><br><span class="line">$redis-&gt;setrange(<span class="string">'str'</span>,<span class="number">2</span>,<span class="string">'cd'</span>); <span class="comment">// 返回4,表示从第2个字符后替换,这时'str'为'abcd'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// substr 部分获取操作</span></span><br><span class="line">$redis-&gt;substr(<span class="string">'str'</span>,<span class="number">0</span>,<span class="number">2</span>); <span class="comment">// 表示从第0个起，取到第2个字符，共3个，返回'abc'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// strlen 获取字符串长度</span></span><br><span class="line">$redis-&gt;strlen(<span class="string">'str'</span>); <span class="comment">// 返回4</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// setbit/getbit 位存储和获取</span></span><br><span class="line">$redis-&gt;setbit(<span class="string">'binary'</span>,<span class="number">31</span>,<span class="number">1</span>); <span class="comment">// 表示在第31位存入1,这边可能会有大小端问题?不过没关系,getbit 应该不会有问题</span></span><br><span class="line">$redis-&gt;getbit(<span class="string">'binary'</span>,<span class="number">31</span>); <span class="comment">// 返回1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// keys 模糊查找功能,支持*号以及?号(匹配一个字符)</span></span><br><span class="line">$redis-&gt;set(<span class="string">'foo1'</span>,<span class="number">123</span>);</span><br><span class="line">$redis-&gt;set(<span class="string">'foo2'</span>,<span class="number">456</span>);</span><br><span class="line">$redis-&gt;keys(<span class="string">'foo*'</span>); <span class="comment">// 返回满足条件的键值对数组 ['foo1', 'foo2']</span></span><br><span class="line">$redis-&gt;keys(<span class="string">'f?o?'</span>); <span class="comment">// 同上</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// randomkey 随机返回一个key</span></span><br><span class="line">$redis-&gt;randomkey(); <span class="comment">// 可能是返回 'foo1'或者是'foo2'及其它任何一存在redis的key</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// rename/renamenx 对key进行改名,所不同的是renamenx不允许改成已存在的key</span></span><br><span class="line">$redis-&gt;rename(<span class="string">'str'</span>,<span class="string">'str2'</span>); <span class="comment">// 把原先命名为'str'的key改成了'str2'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// expire设置key-value的时效性,ttl获取剩余有效期,persist重新设置为永久存储</span></span><br><span class="line">$redis-&gt;expire(<span class="string">'foo'</span>, <span class="number">1</span>); <span class="comment">// 设置有效期为1秒</span></span><br><span class="line">$redis-&gt;ttl(<span class="string">'foo'</span>); <span class="comment">// 返回有效期值1s</span></span><br><span class="line">$redis-&gt;expire(<span class="string">'foo'</span>); <span class="comment">// 取消expire行为</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// dbsize 返回redis当前数据库的记录总数</span></span><br><span class="line">$redis-&gt;dbsize();</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Npm代理和镜像源设置]]></title>
      <url>/2019/04/25/npm-proxy/</url>
      <content type="html"><![CDATA[<p>今天又被npm这个东西坑了一次，整理下我找到的一些方法<br><a id="more"></a></p>
<h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><p>设置代理和https代理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set proxy=http:/server:port</span><br><span class="line">npm config set https-proxy http://server:port</span><br></pre></td></tr></table></figure></p>
<p>认证用户名和密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set proxy http://username:password@server:port</span><br><span class="line">npm confit set https-proxy http://username:password@server:port</span><br></pre></td></tr></table></figure></p>
<p>删除代理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure></p>
<h3 id="镜像源设置"><a href="#镜像源设置" class="headerlink" title="镜像源设置"></a>镜像源设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.npmjs.org</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h3 id="全局配置文件设置"><a href="#全局配置文件设置" class="headerlink" title="全局配置文件设置"></a>全局配置文件设置</h3><p><code>npm config edit</code>打开<code>.npmrc</code>文件 ，在文件中如下位置添加如下代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">;;;;</span><br><span class="line">; npm userconfig file</span><br><span class="line">; this is a simple ini-formatted file</span><br><span class="line">; lines that start with semi-colons are comments.</span><br><span class="line">; read `npm help config` for help on the various options</span><br><span class="line">;;;;</span><br><span class="line"></span><br><span class="line">registry=http://registry.npmjs.org/</span><br><span class="line">proxy=http://10.127.0.0.1:1008/</span><br><span class="line"></span><br><span class="line">;;;;</span><br><span class="line">; all options with default values</span><br><span class="line">;;;;</span><br></pre></td></tr></table></figure></p>
<h3 id="使用nrm切换npm源"><a href="#使用nrm切换npm源" class="headerlink" title="使用nrm切换npm源"></a>使用nrm切换npm源</h3><p>安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nrm -g</span><br></pre></td></tr></table></figure></p>
<p>列出可用的源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-&gt;</span> nrm ls</span><br><span class="line">npm ---- https://registry.npmjs.org/</span><br><span class="line">cnpm --- http://r.cnpmjs.org/</span><br><span class="line">taobao - https://registry.npm.taobao.org/</span><br><span class="line">nj ----- https://registry.nodejitsu.com/</span><br><span class="line">npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">edunpm - http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure></p>
<p>切换<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-&gt;</span> npm use taobao</span><br><span class="line">Registry has been set to: http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></p>
<p>增加源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm add taobao http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></p>
<p>删除源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm del taobao</span><br></pre></td></tr></table></figure></p>
<p>测试速度<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm test taobao</span><br></pre></td></tr></table></figure></p>
<h3 id="npm-config相关命令"><a href="#npm-config相关命令" class="headerlink" title="npm config相关命令"></a>npm config相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm config set &lt;key&gt; &lt;value&gt; [-g|--global]</span><br><span class="line">npm config get &lt;key&gt;</span><br><span class="line">npm config delete &lt;key&gt;</span><br><span class="line">npm config list</span><br><span class="line">npm config edit</span><br><span class="line">npm get &lt;key&gt;</span><br><span class="line">npm set &lt;key&gt; &lt;value&gt; [-g|--global]</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Npm包：electron-update-helper]]></title>
      <url>/2019/04/24/electron-update-helper/</url>
      <content type="html"><![CDATA[<p>依赖<code>electron-builder</code>和<code>electron-updater</code>的<code>electron</code>版本更新方法，自己基于原有方法进行了封装<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用npm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-update-helper</span><br></pre></td></tr></table></figure></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>主进程，在创建<code>BrowserWindow</code>后使用<code>MainHelper</code>，初始化实例即可，详见<a href="https://github.com/gitliyu/electron-update-helper/blob/master/demo/main.js" target="_blank" rel="noopener">‘demo’</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;MainHelper&#125; <span class="keyword">from</span> <span class="string">'electron-update-helper'</span></span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    height: <span class="number">768</span>,</span><br><span class="line">    width: <span class="number">1024</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接受两个参数</span></span><br><span class="line">  <span class="comment">// 1 创建的BrowserWindow对象</span></span><br><span class="line">  <span class="comment">// 2 版本更新地址，需要和package.json中electron-builder的publish url配置相同</span></span><br><span class="line">  <span class="keyword">new</span> MainHelper(mainWindow, URL);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>渲染进程中，使用<code>RenderHelper</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;RenderHelper&#125; from &apos;electron-update-helper&apos;</span><br><span class="line"></span><br><span class="line">let renderHelper = new RenderHelper();</span><br></pre></td></tr></table></figure></p>
<p>渲染进程事件，详见<a href="https://github.com/gitliyu/electron-update-helper/blob/master/demo/render.html" target="_blank" rel="noopener">‘demo’</a></p>
<ul>
<li><code>checkForUpdates</code>: 触发版本更新</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renderHelper.checkForUpdates();</span><br></pre></td></tr></table></figure>
<ul>
<li><code>setMessageHandle</code>: 更新通知的处理函数，参数为以下四种提示</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">renderHelper.setMessageHandle(<span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (message) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'error'</span>:</span><br><span class="line">      alert(<span class="string">'更新异常'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'checking'</span>:</span><br><span class="line">      alert(<span class="string">'开始检查更新'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'update'</span>:</span><br><span class="line">      alert(<span class="string">'正在下载更新中'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'new'</span>:</span><br><span class="line">      alert(<span class="string">'当前是最新版本，无需更新'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>setProgressHandle</code>： 进度条处理函数，参数为进度条对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">renderHelper.setProgressHandle(<span class="function"><span class="params">progressObj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`当前更新进度为<span class="subst">$&#123;progressObj.percent&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>setUpdatedHandle</code>: 更新完成后的回调，参数为一个事件，当done方法被调用时，会退出并执行更新</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">renderHelper.setUpdatedHandle(<span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (confirm(<span class="string">'已下载完成,现在退出并更新吗？'</span>)) &#123;</span><br><span class="line">    done();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在使用<code>electron-updater</code>进行版本更新时，需要在<code>package.json</code>中添加一下配置，注意<code>url</code>地址应当与<code>MainHelper</code>传入的一致<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"build"</span>: &#123;</span><br><span class="line">    <span class="attr">"productName"</span>: <span class="string">"Name"</span>,</span><br><span class="line">    <span class="attr">"appId"</span>: <span class="string">"org.simulatedgreg.electron-vue"</span>,</span><br><span class="line">    <span class="attr">"publish"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"provider"</span>: <span class="string">"generic"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"your url"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"directories"</span>: &#123;</span><br><span class="line">      <span class="attr">"output"</span>: <span class="string">"build"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul>
<li><a href="https://www.npmjs.com/package/electron-builder" target="_blank" rel="noopener">‘Electron-builder’</a></li>
<li><a href="https://www.npmjs.com/package/electron-updater" target="_blank" rel="noopener">‘electron-updater’</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> electron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue插件:Vue-lazyload-widget]]></title>
      <url>/2019/03/14/lazyload-widget/</url>
      <content type="html"><![CDATA[<p>基于浏览器<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver" target="_blank" rel="noopener">‘IntersectionObserver’</a>接口，实现的<code>Vue</code>懒加载组件，目前还没有开发完成，初步计划是有实现图片懒加载以及模块的懒加载两种内容，分别以指令和组件的形式来使用<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用npm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-lazyload-widget</span><br></pre></td></tr></table></figure></p>
<p>在<code>main.js</code>中引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vueLazyloadWidget <span class="keyword">from</span> <span class="string">'vue-lazyload-widget'</span></span><br><span class="line"></span><br><span class="line">Vue.use(vueLazyloadWidget)</span><br></pre></td></tr></table></figure></p>
<p>直接引入文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/vue-lazyload-widget.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>设置图片路径时有两种可用方式，直接将路径设置为指令属性值或者设置为<code>data-src</code>属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-lazy-img</span>=<span class="string">"path"</span>&gt;</span></span><br><span class="line">// or</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">dat-src</span>=<span class="string">"path"</span> <span class="attr">v-lazy-img</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>图片路径需要设置绝对路径，或者提前引入图片，参考<a href="https://github.com/gitliyu/vue-lazyload-widget/blob/master/demo/Directive.vue" target="_blank" rel="noopener">‘Demo’</a></p>
</blockquote>
<h3 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lazy-widget</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组件内容--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"skeleton"</span>&gt;</span><span class="comment">&lt;!--预加载内容，比如骨架--&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lazy-widget</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>没有设置骨架时，组件未加载之前默认显示loading图片</p>
<h3 id="组件Event"><a href="#组件Event" class="headerlink" title="组件Event"></a>组件Event</h3><p>接受唯一参数<code>el</code>,为当前组件dom实例</p>
<ul>
<li><code>before-leave</code>: 预加载内容即将离开</li>
<li><code>after-leave</code>: 预加载内容已离开</li>
<li><code>before-enter</code>: 组件内容即将进入</li>
<li><code>after-enter</code>: 组件内容已进入</li>
<li><code>before-init</code>: 组件内容即将被渲染</li>
<li><code>after-enter</code>: 组件内容已渲染完成</li>
</ul>
<h3 id="关于配置项"><a href="#关于配置项" class="headerlink" title="关于配置项"></a>关于配置项</h3><p>目前包括以下配置项</p>
<ul>
<li><code>root</code>  视图窗口viewport的dom对象，默认为当前浏览器窗口</li>
<li><code>rootMargin</code> 触发懒加载的视图外边距，默认值为”0px 0px 0px 0px”，例如设置为”10px”时，会在距离视图<code>10px</code>时开始加载</li>
</ul>
<p>目前设计的有三种配置方式，按优先级从低到高来看</p>
<ul>
<li><p>在注册时直接传入</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options  = &#123;&#125;;</span><br><span class="line">Vue.use(vueLazyloadWidget, options)</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件中修改配置项，会优先读取组件中的<code>lazyOptions</code>属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  lazyOptions: &#123;</span><br><span class="line">    root: <span class="literal">null</span>,</span><br><span class="line">    rootMargin: <span class="string">'0px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件注册时传入,如果父组件内有定义，会直接读取父级配置，只有需要单独对组件进行配置时需要传入</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lazy-widget</span> <span class="attr">:options</span>=<span class="string">"lazyOptions"</span> <span class="attr">:height</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">lazy-widget</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>组件上额外的配置</p>
<ul>
<li><code>height</code>: 表示组件内容未加载时的高度，默认为<code>50px</code></li>
<li><code>name</code>: 组件中<code>transition</code>过度组件的name，用于设置过渡动画，默认为<code>lazy-widget</code></li>
</ul>
<h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><p>默认的过渡动画效果为<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.lazy-widget-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.lazy-widget-enter</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以通过自定义样式和<code>name</code>来修改过渡动画</p>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>由于主要依赖于<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver" target="_blank" rel="noopener">‘IntersectionObserver’</a>接口，目前只适用于部分高版本浏览器，如果要兼容低版本，需要额外安装<a href="https://github.com/w3c/IntersectionObserver/tree/master/polyfill" target="_blank" rel="noopener">‘IntersectionObserver Polyfill’</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install intersection-observer</span><br></pre></td></tr></table></figure></p>
<p>之后在文件内引入即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'intersection-observer'</span>);</span><br></pre></td></tr></table></figure></p>
<p>or<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/intersection-observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意<code>intersection-observer</code>的引用要在本组件之前</p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver" target="_blank" rel="noopener">‘IntersectionObserver’</a></li>
<li><a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noopener">‘hilongjw/vue-lazyload’</a></li>
<li><a href="https://github.com/xunleif2e/vue-lazy-component" target="_blank" rel="noopener">‘xunleif2e/vue-lazy-component’</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回顾一下我的2018]]></title>
      <url>/2019/01/22/review-2018/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;每次到年初都会觉得上一年是过的最快的一年，但是这次我真的觉得，过去的一年是我过的最充实的一年，感觉自己经历了很多，收获了很多。一句话来总结的话，就是完成了从蹒跚学步到独当一面的转变（咳咳）。<br><a id="more"></a><br>&emsp;&emsp;2017年大学毕业，毕业答辩完的第二天开始投简历，在经历了3次失败的面试后到了现在所在的公司，求职过程顺利的不可思议，一直到现在我想想都会觉得很疑惑，当时我是怎么混进来的。于是带着大学自学的一些基础和零星的实习经验，就这样开始了我作为一个菜鸟前端工程师的生涯，半年时间辗转经历了3个项目，自己一直是抱着学习的心态在不断的积累，直到年底新项目开始。。。</p>
<p>&emsp;&emsp;这个项目几乎贯穿了我整个2018年，是一个为上海某俱乐部私人定制的一套包含管理后台，点餐收银系统，APP，微信小程序，游戏控制器等内容的大项目，也由此拉开了我被赶鸭子上架强行速成的序幕，先来回顾一下一些我主要学到的东西</p>
<ul>
<li><code>PHP</code>： emmm..由于管理端使用的是一个基于<code>Laravel</code>改写的<code>php</code>框架，在项目缺人的情况下，只能让某前端开发者自行负责需要的接口，于是便一发不可收拾了，在项目进行了一年后的今天，基本上已经算是后台主力了</li>
<li><code>Electron</code>： 我们的点餐收银系统是使用<code>electron-vue</code>进行开发的一款桌面应用，从架构，开发到上线都由我一个人负责，在踩过无数次的坑之后，可以说是比较熟悉了</li>
<li><code>Vue</code>： 作为我最喜欢的一个前端框架，在公司项目和个人项目都是首选，过去的一年自己也写了几个小插件，并且研究了一段时间的源码，感兴趣的可以戳<a href="https://github.com/gitliyu/vue-notes" target="_blank" rel="noopener">‘Vue源码分析’</a></li>
<li><code>Nginx</code>： 最近的接触的项目基本上都是<code>ubuntu</code> + <code>nginx</code>的组合，于是自己也买了个服务器开始折腾，在经历了个人和项目的摧残之后，也算是初见成效</li>
<li><code>Linux</code>： 同上，尤其是在项目上线到现在的维护阶段，基本上每天都要收到客户反馈去查各种log，面临各种问题，讲道理十分羡慕其他同事花里胡哨的各种命令操作，这也是今年的主要目标之一</li>
<li><code>Docker</code>： 感觉从下半年开始就不停的听到容器这个概念，在公司每月的技术分享上也有大佬进行了全方位解析（虽然大部分没听懂），后来自己也查阅过相关资料，大概了解了基本使用</li>
<li>三方平台的对接： 经历很多和三方平台对接的业务，比如微信支付宝的支付退款，登录功能，App用到的极光推送以及收银用到的旺POS等 </li>
</ul>
<p>&emsp;&emsp;当然除了拓宽了技术栈之外，还有很多其他的收获的，比如说这是第一个我直接跟客户沟通的项目，自己一个人出差到上海店里确认需求，维护系统。从埋头写代码到现在的转变，我觉得是一个很好的开始。</p>
<p>&emsp;&emsp;另外最大的收获就是在十一的时候开始了我的房奴生涯，而且由于今年国家政策比较好，导致我比正常情况下多出了一千多的月供，从此开始了在家混吃混喝基本月光的生活。值得一提的是，交房是在2020年10月，刚好是在本命年生日过后。</p>
<p>&emsp;&emsp;一时间也想不起来有什么要写的，直接进行最后一步吧，展望一下美好的2019：</p>
<ul>
<li>去年学会了<code>php</code>，今年的目标就暂定为<code>node</code>吧</li>
<li>熟悉<code>Linux</code>命令和服务器配置</li>
<li>学英语！学英语！学英语！</li>
<li>出国旅行一次</li>
</ul>
<p>&emsp;&emsp;正式告别22岁的自己，希望在明年年初回忆今年的时候，也是充满收获的一年！    Over    </p>
]]></content>
      
        <categories>
            
            <category> 年度总结 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[微信&支付宝退款]]></title>
      <url>/2019/01/10/wechat-refund/</url>
      <content type="html"><![CDATA[<p>在之前做支付的时候我就想着可能会有这么一天，该来的终究是要来的，这两天开始研究一下微信和支付宝的退款<br><a id="more"></a><br>关于微信支付的方法可以看一下在我之前写的一篇博客<a href="https://www.liyu.fun/2018/06/15/wechat/">‘微信H5支付&amp;公众号支付大型攻略’</a>，几个月过去了，现在想想还是觉得很难受，完全不想再回忆这个流程</p>
<h3 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h3><p>先来看一下支付宝的文档<a href="https://docs.open.alipay.com/api_1/alipay.trade.refund" target="_blank" rel="noopener">‘统一收单交易退款接口’</a>，可以说是非常贴心了，下面直接贴了各种语言的demo，基本上复制粘贴过来参数改了就能用了，需要依赖官网SDK<a href="https://docs.open.alipay.com/54/cyz7do/" target="_blank" rel="noopener">‘SDK下载’</a>，下面上代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$aop = <span class="keyword">new</span> AopClient ();</span><br><span class="line"><span class="comment">// 设置请求参数</span></span><br><span class="line">$aop-&gt;gatewayUrl = <span class="string">'https://openapi.alipay.com/gateway.do'</span>;</span><br><span class="line">$aop-&gt;appId = <span class="string">'appid'</span>;</span><br><span class="line">$aop-&gt;rsaPrivateKey = <span class="string">'商户私钥'</span>;</span><br><span class="line">$aop-&gt;alipayrsaPublicKey = <span class="string">'支付公钥'</span>;</span><br><span class="line">$aop-&gt;apiVersion = <span class="string">'1.0'</span>;</span><br><span class="line">$aop-&gt;signType = <span class="string">'RSA2'</span>;</span><br><span class="line">$aop-&gt;postCharset = <span class="string">'GBK'</span>;  <span class="comment">// 这里要注意编码一致，虽然文档写的是GBK，但是大部分情况下都是UTF-8</span></span><br><span class="line">$aop-&gt;format = <span class="string">'json'</span>;</span><br><span class="line">$request = <span class="keyword">new</span> AlipayTradeRefundRequest ();</span><br><span class="line">$request-&gt;setBizContent(json_encode([</span><br><span class="line">    <span class="string">'out_trade_no'</span> =&gt; <span class="keyword">$this</span>-&gt;order[<span class="string">'order_sn'</span>],		<span class="comment">// 外部订单号，与流水号二选一</span></span><br><span class="line">    <span class="string">'trade_no'</span> =&gt; <span class="keyword">$this</span>-&gt;order[<span class="string">'trade_no'</span>],	<span class="comment">// 支付时支付宝返回的流水号，与外部订单号二选一</span></span><br><span class="line">    <span class="string">'refund_amount'</span> =&gt; <span class="keyword">$this</span>-&gt;order[<span class="string">'order_amount'</span>]	<span class="comment">// 退款金额，单位是元，支持两位，需要和微信区别开</span></span><br><span class="line">]));</span><br><span class="line"><span class="comment">// 处理参数，发起请求</span></span><br><span class="line">$result = $aop-&gt;execute($request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到请求响应数据 $result-&gt;$responseNode </span></span><br><span class="line">$responseNode = str_replace(<span class="string">"."</span>, <span class="string">"_"</span>, $request-&gt;getApiMethodName()) . <span class="string">"_response"</span>;</span><br><span class="line">$resultCode = $result-&gt;$responseNode-&gt;code;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($resultCode) &amp;&amp; $resultCode == <span class="number">10000</span>)&#123;</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上就是需要配置的一些参数了，还有一些请求参数都是在sdk方法中完成的，接下来看一下微信的，基本上也是依赖官方sdk的</p>
<h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h3><p>依旧先找到文档<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=9_4&amp;index=4" target="_blank" rel="noopener">‘微信支付开发文档’</a>，下载sdk<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=11_1" target="_blank" rel="noopener">‘SDK下载’</a>，不过微信的sdk，在使用的时候基本上都需要根据自己项目二次封装，这里就不多说了，主要需要用到的是<code>WxPay.Api.php</code>和<code>WxPay.Data.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装后的WxPay.Data.php</span></span><br><span class="line">$input = <span class="keyword">new</span> WxPayRefund();</span><br><span class="line">$input-&gt;SetAppid(<span class="string">'appid'</span>);</span><br><span class="line">$input-&gt;SetMch_id(<span class="string">'mch_id'</span>);</span><br><span class="line">$input-&gt;SetOut_trade_no(<span class="keyword">$this</span>-&gt;order[<span class="string">'order_sn'</span>]);	<span class="comment">// 外部订单号和交易单号至少要有一个</span></span><br><span class="line">$input-&gt;SetOut_refund_no(<span class="keyword">$this</span>-&gt;order[<span class="string">'order_sn'</span>] . time()); <span class="comment">// 需要保证每次退款的退款号不同</span></span><br><span class="line">$input-&gt;SetTotal_fee(<span class="keyword">$this</span>-&gt;order[<span class="string">'order_amount'</span>] * <span class="number">100</span>);	 <span class="comment">// 订单总额，主意单位为分</span></span><br><span class="line">$input-&gt;SetRefund_fee(<span class="keyword">$this</span>-&gt;order[<span class="string">'order_amount'</span>] * <span class="number">100</span>);  <span class="comment">// 退款金额</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用WxPay.Api.php中的refund方法，返回的数据格式是数组</span></span><br><span class="line">$result = WxPayApi::refund($input);</span><br><span class="line"><span class="keyword">if</span> ($result[<span class="string">'return_code'</span>] != <span class="string">'SUCCESS'</span>) &#123;</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码部分看上去很简单，不过需要注意的细节还是挺多的，不过做过微信支付的话再做退款可以说是轻车熟路了，大部分东西都已经配好了，不过需要注意的一点就是退款相比支付需要安装一个微信支付安全证书，首先这个证书是需要在微信商户后台进行申请的，关于流程微信文档写的还是比较详细的，照着一步一步来就好了<a href="https://kf.qq.com/faq/161222NneAJf161222U7fARv.html" target="_blank" rel="noopener">‘如何获取API证书’</a></p>
<p>然后照着文档把证书申请下载下来之后，接下来的问题就是怎么使用证书了，文档上是这么写的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请将生成的证书文件转交给技术人员，由技术人员将证书部署到服务器上</span><br></pre></td></tr></table></figure></p>
<p>你tm在逗我？无奈之下只好自己研究了一下，发现sdk中调用退款请求时，比支付多了一个参数，顺着找到了<code>postXmlCurl</code>方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">postXmlCurl</span><span class="params">($xml, $url, $useCert = false, $second = <span class="number">30</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    <span class="comment">//设置超时</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_TIMEOUT, $second);</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">if</span>($useCert == <span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//设置证书</span></span><br><span class="line">        <span class="comment">//使用证书：cert 与 key 分别属于两个.pem文件</span></span><br><span class="line">        <span class="comment">//证书文件请放入服务器的非web目录下</span></span><br><span class="line">        $sslCertPath = <span class="string">""</span>;</span><br><span class="line">        $sslKeyPath = <span class="string">""</span>;</span><br><span class="line">        $config-&gt;GetSSLCertPath($sslCertPath, $sslKeyPath);</span><br><span class="line">        curl_setopt($ch,CURLOPT_SSLCERTTYPE,<span class="string">'PEM'</span>);</span><br><span class="line">        curl_setopt($ch,CURLOPT_SSLCERT, $sslCertPath);</span><br><span class="line">        curl_setopt($ch,CURLOPT_SSLKEYTYPE,<span class="string">'PEM'</span>);</span><br><span class="line">        curl_setopt($ch,CURLOPT_SSLKEY, $sslKeyPath);</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也就是说把证书丢在服务器上面之后将这里的路径指向两个文件就好了，需要注意的是一定要放在有权限的文件夹下，防止被其他人下载到，还有就是这里的路径需要时绝对路径，否则会返回错误58</p>
<p>over！</p>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> 微信 </tag>
            
            <tag> 支付宝 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Electron阻止应用多开]]></title>
      <url>/2018/12/13/electron-single/</url>
      <content type="html"><![CDATA[<p>最近发现<code>electron</code>启动的应用，默认是可以多开的，这就导致可能出现启动时手滑等其他情况，导致会有多个进程同时运行，造成卡顿<br><a id="more"></a><br>查阅官方文档没有发现任何关于这方面的方法，然后在神奇的知乎发现了一下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iShouldQuit = app.makeSingleInstance(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  mainWindow.show();</span><br><span class="line">  mainWindow.focus();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (iShouldQuit) &#123;</span><br><span class="line">  app.quit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在主进程启动时调用，<code>makeSingleInstance</code>事件据说是在验证当前实例是唯一实例时会触发，所以可以根据它来进行验证，当判断方法被执行时，退出正在启动的应用</p>
<p>试了一下可以实现效果，但是不明白为什么文档里没有这个API</p>
]]></content>
      
        <categories>
            
            <category> 项目实例 </category>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> electron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[查询日期范围内固定时段的数据]]></title>
      <url>/2018/11/08/date-sql/</url>
      <content type="html"><![CDATA[<p>之前遇到一个需求，需要查询日期范围内某一固定时段的数据，因为没有碰到过这种情况，当时也是挺头疼的，记录下自己的解决方法吧<br><a id="more"></a><br>举个例子，查询<code>2018-10-01</code>到<code>2018-11-01</code>中，每天<code>9:00</code>到<code>12:00</code>的数据</p>
<p>首先想到的第一个办法就是利用<code>Eloquent</code>自带的查询方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Model::whereDate(<span class="string">'created_at'</span>, <span class="string">'&gt;='</span>, <span class="string">'2018-10-01'</span>)</span><br><span class="line">    -&gt;whereDate(<span class="string">'created_at'</span>, <span class="string">'&lt;='</span>, <span class="string">'2018-11-01'</span>)</span><br><span class="line">    -&gt;whereTime(<span class="string">'created_at'</span>, <span class="string">'&gt;='</span>, <span class="string">'09:00'</span>)</span><br><span class="line">    -&gt;whereTime(<span class="string">'created_at'</span>, <span class="string">'&lt;='</span>, <span class="string">'12:00'</span>)</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure></p>
<p>算是最简单的解决这种需求的方法，但是可惜的是数据库中存的并不是日期格式，而是10位的unix时间戳，不过也算是从<code>laravel</code>这个方法中得到启发，想到了利用<code>SQL</code>直接格式化时间来查询的方法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> add_time &gt;= <span class="number">1538323200</span> <span class="keyword">and</span>  add_time &lt;= <span class="number">1541001600</span> </span><br><span class="line"><span class="keyword">and</span> FROM_UNIXTIME(add_time, <span class="string">"%H"</span>) &gt;= <span class="number">9</span> <span class="keyword">and</span> FROM_UNIXTIME(add_time,<span class="string">"%H"</span>) &lt; <span class="number">12</span></span><br></pre></td></tr></table></figure></p>
<p>使用<code>FROM_UNIXTIME(unix_timestamp,format)</code>方法，将时间戳格式化为小时数后进行查询</p>
]]></content>
      
        <categories>
            
            <category> 项目实例 </category>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于移动端网页尺寸问题]]></title>
      <url>/2018/10/23/mobile-media/</url>
      <content type="html"><![CDATA[<p>前几天见到有同事讨论这个问题，今天有时间了就把目前我知道的移动端开发时，对于尺寸处理的方法整理一下<br><a id="more"></a><br>首先是大部分人都熟悉的<code>rem</code>了，<code>rem</code>的值等于文档对象字体大小，默认为<code>16px</code>，我们做移动端开发时，通常是通过视图宽度来计算<code>rem</code>的值，从而达到响应页面的效果</p>
<h3 id="js计算rem"><a href="#js计算rem" class="headerlink" title="js计算rem"></a>js计算rem</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = <span class="built_in">document</span>.documentElement;</span><br><span class="line">element.style.fontSize = <span class="string">`<span class="subst">$&#123;element.clientWidth <span class="regexp">/ 3.75&#125;px`;</span></span></span></span><br></pre></td></tr></table></figure>
<p>通常设计给的设计图都是<code>375px</code>的宽度，这样出来的<code>1rem</code>对应设计图<code>100px</code>，算是一个个人习惯吧，因人而异，我觉得这么比较好计算</p>
<h3 id="css计算rem"><a href="#css计算rem" class="headerlink" title="css计算rem"></a>css计算rem</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(100vw / 3.75);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过直接修改html字体元素也可以修改<code>rem</code>值，原理同上</p>
<h3 id="设置页面缩放宽度"><a href="#设置页面缩放宽度" class="headerlink" title="设置页面缩放宽度"></a>设置页面缩放宽度</h3><p>如果不想计算<code>rem</code>的话还有一种方式，就是直接修改<code>meta</code>标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=375, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>将页面宽度固定设置为<code>375px</code>，就会起到如下的效果<br><img src="/img/viewport.png" alt="&#39;meta固定宽度&#39;"><br><code>768px</code>的宽度被强制缩放为<code>375px</code></p>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue插件:Vue-nice-loading]]></title>
      <url>/2018/10/07/vue-loading/</url>
      <content type="html"><![CDATA[<p>逛<code>github</code>的时候发现一些挺好看的svg图片，就想着自己用这些写一个<code>vue</code>的<code>loading</code>插件<br><a id="more"></a><br>Demo: <a href="https://www.liyu.fun/vue-nice-loading">‘https://www.liyu.fun/vue-nice-loading’</a>  </p>
<p>Demo源码示例： <a href="https://github.com/gitliyu/vue-nice-loading/blob/master/example/demo.vue" target="_blank" rel="noopener">‘https://github.com/gitliyu/vue-nice-loading/blob/master/example/demo.vue’</a></p>
<p>Github地址： <a href="https://github.com/gitliyu/vue-nice-loading" target="_blank" rel="noopener">‘https://github.com/gitliyu/vue-nice-loading’</a></p>
<p>安装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-nice-loading</span><br></pre></td></tr></table></figure></p>
<p>在<code>main.js</code>中引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> loading <span class="keyword">from</span> <span class="string">'vue-nice-loading'</span></span><br><span class="line"></span><br><span class="line">Vue.use(loading)</span><br></pre></td></tr></table></figure></p>
<p>使用<code>Vue.use</code>初始化后会在<code>vue</code>原型上注册<code>$loading</code>，调用<code>$loading</code>方法显示<code>loading</code>，并返回实例，调用实例的<code>close</code>方法可以关闭该<code>loading</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示loading</span></span><br><span class="line"><span class="keyword">let</span> loading = <span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">  text: <span class="string">'loading'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 关闭loading</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  loading.close();</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>支持直接引入js文件的使用方式</p>
</blockquote>
<p><code>$loading</code>方法接受以下参数</p>
<p><strong>type</strong></p>
<p><code>loading</code>显示的种类，这里使用的所有<code>svg</code>图片取自<a href="https://github.com/SamHerbert/SVG-Loaders" target="_blank" rel="noopener">‘SVG-Loaders’</a>, 接受值与图片名相同，默认值为<code>ball-triangle</code>，共有以下12种</p>
<ul>
<li>audio</li>
<li>ball-triangle</li>
<li>bars</li>
<li>circles</li>
<li>grid</li>
<li>hearts</li>
<li>oval</li>
<li>puff</li>
<li>rings</li>
<li>spinning-circles</li>
<li>tail-spin</li>
<li>three-dots</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">  type: <span class="string">'bars'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>target</strong> </p>
<p><code>loading</code>需要覆盖的<code>dom</code>节点, 可传入一个<code>dom</code>对象或选择器的字符串，默认为<code>body</code>，显示全屏<code>loading</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">  target: <span class="string">'#app'</span></span><br><span class="line">  <span class="comment">// target: this.$refs.app</span></span><br><span class="line">  <span class="comment">// target: document.querySelector('#app')</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>text</strong></p>
<p>显示文本，默认为空</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">  text: <span class="string">'Loading...'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>background</strong></p>
<p>遮罩层背景色</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">  background: <span class="string">'#333'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>delay</strong></p>
<p>延时显示，单位为毫秒，以下例子会在1s后显示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">  delay: <span class="number">1000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://github.com/SamHerbert/SVG-Loaders" target="_blank" rel="noopener">‘SVG-Loaders’</a><br><a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">‘ElementUI’</a></p>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码分析]]></title>
      <url>/2018/09/08/vue-note/</url>
      <content type="html"><![CDATA[<p>个人学习Vue源码过程中的一些总结，对应Vue版本为2.5.17<br><a id="more"></a><br>最近开始研究Vue源码，在看的过程中自己做一些归纳总结，之前打算放在博客更新了，但是感觉内容比较多，所以就统一放在<a href="https://github.com/gitliyu/vue-notes" target="_blank" rel="noopener">‘我的Github’</a>进行整理了，目前包括以下内容：</p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ol>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-index.md" target="_blank" rel="noopener">‘源码目录结构’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-define.md" target="_blank" rel="noopener">‘Vue实例化过程’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-global-api.md" target="_blank" rel="noopener">‘Global API’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-observer.md" target="_blank" rel="noopener">‘Observer与响应式数据’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-vnode.md" target="_blank" rel="noopener">‘Virtual DOM 介绍’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-render.md" target="_blank" rel="noopener">‘数据驱动视图的方法’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-vdom.md" target="_blank" rel="noopener">‘Patch与Diff算法’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-nextTick.md" target="_blank" rel="noopener">‘异步更新机制’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-lifecycle.md" target="_blank" rel="noopener">‘生命周期’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue/vue-attr.md" target="_blank" rel="noopener">‘Vue实例属性’</a> </li>
<li>指令</li>
</ol>
<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ol>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue-router/router-index.md" target="_blank" rel="noopener">‘源码目录结构’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue-router/router-install.md" target="_blank" rel="noopener">‘Install安装方法’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue-router/router-define.md" target="_blank" rel="noopener">‘VueRouter类介绍’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue-router/router-matcher.md" target="_blank" rel="noopener">‘路由匹配’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue-router/router-link.md" target="_blank" rel="noopener">‘RouterLink组件’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue-router/router-view.md" target="_blank" rel="noopener">‘RouterView组件’</a></li>
<li><a href="https://github.com/gitliyu/vue-notes/blob/master/vue-router/router-history.md" target="_blank" rel="noopener">‘前端路由实现：Hash和History模式’</a></li>
</ol>
<h4 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h4><ul>
<li><a href="https://github.com/liutao/vue2.0-source" target="_blank" rel="noopener">‘vue2.0-source’</a>  </li>
<li><a href="https://github.com/ustbhuangyi/vue-analysis" target="_blank" rel="noopener">‘vue-analysis’</a></li>
<li><a href="https://github.com/answershuto/learnVue" target="_blank" rel="noopener">‘learnVue’</a></li>
<li><a href="https://blog.csdn.net/yayayayaya_/article/details/80885473" target="_blank" rel="noopener">‘Vue源码之new Vue’</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信授权注册&登录]]></title>
      <url>/2018/08/23/wechat-login/</url>
      <content type="html"><![CDATA[<p>首先要明确一点，这里指的是在微信内浏览器使用的，利用微信公众号获取用户授权信息之后进行的注册登录，在经过上一次微信支付的摧残之后，这次做登录流程要顺利得多，简单描述一下流程。<br><a id="more"></a><br>首先贴一下微信开发者文档中对于网页授权的说明文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">‘戳这里’</a>，对于授权的接口如何使用，我这里不会详细的说明，文档对于接口参数写的还是比较清楚的，主要介绍一下注册流程</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>确保公众号可以使用，拿到appid和密钥</li>
<li>微信公众平台修改授权回调页面</li>
<li>可以使用微信开发者工具调试 </li>
</ul>
<h3 id="获取用户授权"><a href="#获取用户授权" class="headerlink" title="获取用户授权"></a>获取用户授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</span><br></pre></td></tr></table></figure>
<p>这一步和微信支付的授权唯一的区别就在于<code>scope</code>属性的不同，由于我们需要获取用户信息，就不能使用静默授权，而是使用<code>scope=snsapi_userinfo</code>，通过在前台请求api，拉取授权页面，用户同意之后在回调页面获取code值。</p>
<h3 id="获取用户openid"><a href="#获取用户openid" class="headerlink" title="获取用户openid"></a>获取用户openid</h3><p>使用上一步拿到的code值，请求以下api<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</span><br></pre></td></tr></table></figure></p>
<p>这一步需要放在服务端请求，前端会跨域，请求成功后拿到返回的<code>access_token</code>和’openid’</p>
<h3 id="微信登录"><a href="#微信登录" class="headerlink" title="微信登录"></a>微信登录</h3><p>拿到用户<code>openid</code>之后，就可以查询数据库中用户信息了（注册时把用户微信登陆的openid和unionid存一下），如果有已经注册过的用户，直接登录，没有的话继续走注册流程</p>
<h3 id="拉取用户信息"><a href="#拉取用户信息" class="headerlink" title="拉取用户信息"></a>拉取用户信息</h3><p>使用<code>openid</code>和<code>access_token</code>发起请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</span><br></pre></td></tr></table></figure></p>
<p>前台会跨域，同样放在后台进行，这样就拿到了微信用户的详情信息</p>
<h3 id="注册用户"><a href="#注册用户" class="headerlink" title="注册用户"></a>注册用户</h3><p>使用拿到的用户信息创建用户，成功后直接登录</p>
<blockquote>
<p>需要注意的一点是，如果有多个微信应用时，同一用户在app，公众号，小程序这些获取到的<code>openid</code>都是不同的，但是<code>unionid</code>是唯一的，可以通过<code>unionid</code>来进行用户的识别</p>
</blockquote>
<p>结束语： 没错，这一篇就是这么短！</p>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> javascript </tag>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最近做的测试题]]></title>
      <url>/2018/08/02/test/</url>
      <content type="html"><![CDATA[<p>整理一下最近做的一些比较有意思的测试题，大部分是js的<br><a id="more"></a><br>1.闭包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">4399</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        n: n,</span><br><span class="line">        add: add</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = test();</span><br><span class="line"><span class="keyword">var</span> result2 = test();</span><br><span class="line"></span><br><span class="line">result.add();</span><br><span class="line">result.add();</span><br><span class="line"><span class="built_in">console</span>.log(result.n)</span><br><span class="line">result2.add();</span><br></pre></td></tr></table></figure></p>
<p>result两次调用add函数，每次使自身内部的n值加1，前两次输出为4400，4401<br>之后打印result上的n属性，因为是最初赋值的n，与闭包函数内部定义的变量n无关，输出4399<br>最后result2和result是独立的，互不影响，输出4400<br>最终结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4400</span><br><span class="line">4401</span><br><span class="line">4399</span><br><span class="line">4400</span><br></pre></td></tr></table></figure></p>
<p>2.函数声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> g());</span><br></pre></td></tr></table></figure></p>
<p>我的第一反应就是，结果明显是’number’，仔细看了看，f是以一个匿名函数做的函数声明，实际上是没有g这个函数方法的，所以最终结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReferenceError，g is not defined</span><br></pre></td></tr></table></figure></p>
<p>3.数组长度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">arr.foo = <span class="string">'c'</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br></pre></td></tr></table></figure></p>
<p>讲道理我之前还没见过这种给数组设置属性值的操作，不过数组的本质也是对象，直接设置属性也可以，并不会出错，最后生成的数组为<code>[0, 1, empty, 3]</code>， length为4</p>
<p>4.类型转换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( ([]) ? <span class="literal">true</span> : <span class="literal">false</span> ); </span><br><span class="line"><span class="built_in">console</span>.log( ( [] == <span class="literal">false</span> ? <span class="literal">true</span> : <span class="literal">false</span> ) ); </span><br><span class="line"><span class="built_in">console</span>.log( ( &#123;&#125; == <span class="literal">false</span> ) ? <span class="literal">true</span> : <span class="literal">false</span> );</span><br></pre></td></tr></table></figure></p>
<p>首先需要明确的几点：</p>
<ul>
<li>[] 和 {} 为 true</li>
<li>在进行比较比较运算时，会进行强制类型转换</li>
<li>在进行强制类型转换后，[]结果为0, {}结果为NaN</li>
</ul>
<p>所以上述代码也可以看作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log( true ? true : false );</span><br><span class="line">console.log( 0 == 0 ? true : false );</span><br><span class="line">console.log( NaN == 0 ? true : false);</span><br></pre></td></tr></table></figure></p>
<p>最终结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure></p>
<p>5.假设val已经声明,可定义为任何值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Value is '</span> + (val != <span class="string">'0'</span>) ? <span class="string">'define'</span> : <span class="string">'undefine'</span>);</span><br></pre></td></tr></table></figure></p>
<p>这道题我的答案是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Value is define</span><br><span class="line">Value is undefine</span><br></pre></td></tr></table></figure></p>
<p>然而并没有这么简单，问题只有一点，就是符号优先级的问题，+号是先于三目运算符进行运算的，所以最终结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define</span><br></pre></td></tr></table></figure></p>
<p>6.异或和左移运算<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a ^= ( <span class="number">1</span> &lt;&lt; <span class="number">4</span> ) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a(<span class="number">10</span>));</span><br></pre></td></tr></table></figure></p>
<p>首先是左移运算符: 1 &lt;&lt; 4 将1转换为二进制数后向左移动4位，即 1 &lt;&lt; 4 = 10000 = 16<br>那么执行a(10)之后进行的运算就相当于是 10 ^= 15，转换为二进制后进行按位异或运算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 = 00001010</span><br><span class="line">15 = 00001111</span><br></pre></td></tr></table></figure></p>
<p>得到结果为: 00000101 = 5 </p>
<p>7.变量声明赋值和作用域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    alert(b);</span><br><span class="line">    <span class="keyword">var</span> a=b=<span class="number">3</span>;</span><br><span class="line">    alert(a);</span><br><span class="line">    alert(b);</span><br><span class="line">&#125;)();</span><br><span class="line">alert(a);</span><br><span class="line">alert(b);</span><br></pre></td></tr></table></figure></p>
<p>第一组结果十分明显，由于变量a, b是全居变量，声明后未赋值，所以结果是undefined，undefined<br>第二组也很简单，变量a, b都被赋值为3，所以结果是3, 3<br>第三组把我坑到了，当进行 <code>var a=b=3</code>的赋值时，实际进行的操作为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> a = b;</span><br></pre></td></tr></table></figure></p>
<p>将b作为全局变量进行赋值，而a是重新声明的，所以结果为undefined, 3</p>
<p>8.静态属性<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">self</span>::$num++; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> A::$num;</span><br></pre></td></tr></table></figure></p>
<p>如果$num不是static属性的话，结果应该是0，每次实例化A时$num值都不会影响，但是static属性常驻内存，不会被立即删除，所以输出是 3 </p>
<p>9.this指向<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">'green'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    color: <span class="string">'blue'</span>,</span><br><span class="line">    getColor: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        color = <span class="string">'red'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getColor = obj.getColor;</span><br><span class="line">getColor();</span><br><span class="line">obj.getColor();</span><br></pre></td></tr></table></figure></p>
<p>js中的<code>this</code>关键字指向的是调用方法的对象，在声明之后使用<code>getColor()</code>方法调用，this指向window对象，而在方法调用时，全局的color被重新赋值为red，对象调用时，this指向自身的属性，所以输出结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line">blue</span><br></pre></td></tr></table></figure></p>
<p>10.运算符和类型转换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+ <span class="string">"2"</span> + <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + +<span class="string">"2"</span> + <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span> - <span class="string">"B"</span> + <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span> - <span class="string">"B"</span> + <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p>
<p>这里用到的几个知识点:</p>
<ul>
<li>在与字符串进行加法运算时，会将其他类型转换为字符串</li>
<li>一元加运算符，会将变量转换为数字类型</li>
<li>进行减法运算时，强制转换为数字进行运算 </li>
</ul>
<p>所以上面的计算过程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">"2"</span> + <span class="string">"2"</span> = <span class="string">"12"</span> + <span class="string">"2"</span> = <span class="string">"122"</span></span><br><span class="line"><span class="number">1</span> + +<span class="string">"2"</span> + <span class="string">"2"</span> = <span class="number">1</span> + <span class="number">2</span> + <span class="string">"2"</span> = <span class="number">3</span> + <span class="string">"2"</span> = <span class="number">32</span></span><br><span class="line"><span class="string">"A"</span> - <span class="string">"B"</span> + <span class="string">"2"</span> = <span class="literal">NaN</span> + <span class="string">"2"</span> = <span class="string">"NaN2"</span></span><br><span class="line"><span class="string">"A"</span> - <span class="string">"B"</span> + <span class="number">2</span> = <span class="literal">NaN</span> + <span class="number">2</span> = <span class="literal">NaN</span></span><br></pre></td></tr></table></figure></p>
<p>11.变量引用与作用域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看到上面这段代码，有js基础的童鞋应该都明白，输出的结果应该是10个10，而不是0-9，因为每次定时器函数执行时，拿到的是同一个<code>i</code>值，那么如何顺利的输出想要的结果呢<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; </span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>用自调用函数来分割函数作用域，每次执行拿到的都是单独作用域中的i值，这样就可以输出0-9了</p>
<blockquote>
<p>To Be Continue</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[伪静态地址获取用户头像]]></title>
      <url>/2018/07/20/%E4%BC%AA%E9%9D%99%E6%80%81/</url>
      <content type="html"><![CDATA[<p>项目需求：使用伪静态地址 <code>example.com/avatar/xxx</code> (xxx为user id)的形式，直接获取用户头像图片<br><a id="more"></a></p>
<h3 id="获取图片信息"><a href="#获取图片信息" class="headerlink" title="获取图片信息"></a>获取图片信息</h3><p>首先需要创建一个get请求接口来根据<code>user_id</code>拿到用户头像的图片信息，路由地址为<code>/app/user/avatar</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$user_id = $_GET[<span class="string">'user_id'</span>];</span><br><span class="line"></span><br><span class="line">$avatar_img = DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'user_id'</span>, $user_id)-&gt;pluck(<span class="string">'avatar_img'</span>);</span><br><span class="line"></span><br><span class="line">header(<span class="string">"Content-type: image/png;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> file_get_contents($avatar_img, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure></p>
<p>这样就可以根据<code>/app/user/avatar?user_id=xxx</code>的方式拿到图片，接下来需要做的就是修改服务器配置，将伪静态地址重定向到api地址</p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>服务器使用的是nginx服务器，其他的就不介绍了<br>首先找到配置文件<code>nginx.conf</code>，默认安装位置位于<code>/etc/nginx</code>，不过一般不要直接修改这个，创建一个单独的conf文件，然后在<code>nginx.conf</code>中使用include引入使用。<br>在配置文件中添加一下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">	rewrite ^/avatar/(.*)$  /app/user/avatar?user_id=$1 last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>保存后退出编辑模式，重启nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>补充一下修改配置文件会用到的命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi nginx.conf   // 文本编辑器打开文件</span><br><span class="line">set num 	// 显示编辑器行号</span><br><span class="line">:w 		// 保存</span><br><span class="line">:wq!	// 保存后退出</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 项目实例 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信H5支付&公众号支付大型攻略]]></title>
      <url>/2018/06/15/wechat/</url>
      <content type="html"><![CDATA[<p>首先必须要吐槽一下，可能真的是我天资愚钝，看不懂微信的文档，导致这几天在做微信支付的时候踩了很多的坑，为了避免以后再次出现这样的情况，忍痛回忆一下这几天的经历。<br><a id="more"></a><br>先来说一下需要做的准备工作吧</p>
<ol>
<li>申请开通微信H5支付及公众号支付(<a href="https://pay.weixin.qq.com" target="_blank" rel="noopener">‘微信商户平台’</a>-&gt;产品中心-&gt;支付产品)</li>
<li>设置网站授权目录(同上-&gt;开发设置)<br>这里需要注意的是，H5支付设置当前域名即可，公众号支付需要设置为支付页面所在目录(比如支付页面路径为xxxx.com/pay，H5设置xxxx.com即可，公众号需要设置xxxx.com/pay)</li>
<li>设置js接口安全域名和授权目录(<a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">‘微信公众平台’</a>-&gt;接口权限)<br>设置为域名即可(这里需要注意www的问题，需要保持一致，如果设置位xxx.com，那么在www.xxx.com 访问的时候，微信会认为没有权限)，之后把微信提供的文本文件放在服务器根目录</li>
<li>拿到公众号的appid和密钥</li>
<li>商户号和商户密钥(<a href="https://pay.weixin.qq.com" target="_blank" rel="noopener">‘微信商户平台’</a>-&gt;账户设置-&gt;API安全-&gt;密钥设置)</li>
</ol>
<p>ok，准备工作完成之后，就可以开始我们的大型攻(cai)略(keng)了, 先来介绍一下项目需求，这次做的是一个扫码在线点餐的网页，由于是在浏览器使用微信支付，最后在集成支付的时候，需要用到两种支付方式：微信外浏览器使用H5支付(微信内使用会提示，请在微信外浏览器打开)，微信内浏览器使用公众号支付, 那么就需要用到一个判断方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 判断是否为微信浏览器</span><br><span class="line">export function isWechat() &#123;</span><br><span class="line">  let userAgent = window.navigator.userAgent.toLowerCase();</span><br><span class="line">  return userAgent.indexOf(&apos;micromessenger&apos;) !== -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="H5支付"><a href="#H5支付" class="headerlink" title="H5支付"></a>H5支付</h3><p>相比公众号支付，H5支付需要的开发步骤要简单得多，不知道微信为什么要这么折腾自家浏览器。</p>
<h4 id="第一步-在后台对微信统一下单"><a href="#第一步-在后台对微信统一下单" class="headerlink" title="第一步 在后台对微信统一下单"></a>第一步 在后台对微信统一下单</h4><p>下单参数详见<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=9_20&amp;index=1" target="_blank" rel="noopener">‘微信统一下单文档’</a><br>这里唯一需要注意就是签名算法：</p>
<ol>
<li>将所有非空参数以URL键值对的方式，按照参数名ASCII码从小到大排序，拼接为字符串，注意大小写</li>
<li>将字符串尾部拼接<code>&amp;key=商户密钥</code></li>
<li>将字符串使用MD5加密后转为大写</li>
</ol>
<p>举个栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">appid: wxqwer123456</span><br><span class="line">mch_id: 10086</span><br><span class="line">body: test</span><br><span class="line"></span><br><span class="line">// 按字典序排序参数</span><br><span class="line">appid=wxqwer123456&amp;body=test&amp;mch_id=10086</span><br><span class="line">// 添加key</span><br><span class="line">appid=wxqwer123456&amp;body=test&amp;mch_id=10086&amp;key=key</span><br><span class="line">// MD5加密转大写</span><br><span class="line">F5D442C19378535AB235223241D76484</span><br></pre></td></tr></table></figure></p>
<p>签名代码如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成签名，参数为数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MakeSign</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//按字典序排序参数</span></span><br><span class="line">    ksort($data);</span><br><span class="line">    $string = <span class="keyword">$this</span>-&gt;ToUrlParams($data);</span><br><span class="line">    <span class="comment">//在string后加入key</span></span><br><span class="line">    $string = $string . <span class="string">"&amp;key="</span> . <span class="keyword">$this</span>-&gt;key; <span class="comment">// 商家密钥</span></span><br><span class="line">    <span class="comment">//MD5加密</span></span><br><span class="line">    $string = md5($string);</span><br><span class="line">    <span class="comment">//所有字符转为大写</span></span><br><span class="line">    $sign = strtoupper($string);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化参数格式化成url参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ToUrlParams</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $buff = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $k =&gt; $v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($k != <span class="string">"sign"</span> &amp;&amp; $v != <span class="string">""</span> &amp;&amp; !is_array($v))&#123;</span><br><span class="line">            $buff .= $k . <span class="string">"="</span> . $v . <span class="string">"&amp;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $buff = trim($buff, <span class="string">"&amp;"</span>);</span><br><span class="line">    <span class="keyword">return</span> $buff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>对于签名算法的验证可以使用<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=20_1" target="_blank" rel="noopener">‘微信支付接口签名校验工具’</a></p>
</blockquote>
<p>之后需要用post方式将参数以xml的形式提交到微信统一下单接口<code>https://api.mch.weixin.qq.com/pay/unifiedorder</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 将数组转换为xml</span><br><span class="line">public function ToXml()</span><br><span class="line">&#123;</span><br><span class="line">    $xml = &quot;&lt;xml&gt;&quot;;</span><br><span class="line">    foreach ($this-&gt;values as $key=&gt;$val)</span><br><span class="line">    &#123;</span><br><span class="line">        if (is_numeric($val))&#123;</span><br><span class="line">            $xml.=&quot;&lt;&quot;.$key.&quot;&gt;&quot;.$val.&quot;&lt;/&quot;.$key.&quot;&gt;&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $xml.=&quot;&lt;&quot;.$key.&quot;&gt;&lt;![CDATA[&quot;.$val.&quot;]]&gt;&lt;/&quot;.$key.&quot;&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $xml.=&quot;&lt;/xml&gt;&quot;;</span><br><span class="line">    return $xml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然，返回的数据也是xml格式，我们需要对其进行解析<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">FromXml</span><span class="params">($xml)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//将XML转为array</span></span><br><span class="line">    <span class="comment">//禁止引用外部xml实体</span></span><br><span class="line">    libxml_disable_entity_loader(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;values = json_decode(json_encode(simplexml_load_string($xml, <span class="string">'SimpleXMLElement'</span>, LIBXML_NOCDATA)), <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="第二步-发起支付"><a href="#第二步-发起支付" class="headerlink" title="第二步 发起支付"></a>第二步 发起支付</h4><p>之后在下单成功后将微信返回的<code>mweb_url</code>支付跳转链接返回给前台，前台访问链接即可唤起微信客户端，中间页会先进行权限的校验和安全性检查，<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4" target="_blank" rel="noopener">‘常见错误’</a><br>这里可以通过给<code>mweb_url</code>添加<code>redirect_url</code>参数来设置回调页面<br>虽然微信文档上说明的是默认的回调地址为支付发起的页面，但是经过实践表明对于SPA单页应用的识别很不友好，所以还是自己额外设置一下吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mweb_url += &apos;&amp;redirect_url=&apos; + encodeURIComponent(redirect_url)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>一定要记得对url使用encodeURIComponent进行转码</p>
</blockquote>
<p>所以说对于H5支付，前台需要进行的操作十分简单，请求后台接口后打开url即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onWechatPay () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$http.post(<span class="string">'order/wxpay/create'</span>, &#123;  <span class="comment">// 后台下单api</span></span><br><span class="line">        order: <span class="keyword">this</span>.order</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = res.data.data.mweb_url;</span><br><span class="line">        url += <span class="string">'&amp;redirect_url='</span> + <span class="built_in">encodeURIComponent</span>(redirect_url); <span class="comment">// redirect_url为回调地址</span></span><br><span class="line">        <span class="built_in">window</span>.location.href = url;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="第三步-处理通知"><a href="#第三步-处理通知" class="headerlink" title="第三步 处理通知"></a>第三步 处理通知</h4><p>接下来需要去处理微信支付成功后的通知，在统一下单时设置的<code>notify_url</code>，就是接收微信支付异步通知回调地址，微信会向该地址发送xml，类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">&lt;appid&gt;wx123456&lt;/appid&gt;</span><br><span class="line">&lt;body&gt;H5支付测试&lt;/body&gt;</span><br><span class="line">&lt;out_trade_no&gt;10086&lt;/out_trade_no&gt;	</span><br><span class="line">……</span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure></p>
<p>我们需要将得到的xml进行解析，转换为可用的数据，方法在上文有提到，拿到数据之后就可以为所欲为了，到这里H5支付的全部流程就算完成了</p>
<h3 id="公众号支付"><a href="#公众号支付" class="headerlink" title="公众号支付"></a>公众号支付</h3><p>这真的是个深坑，深不见底的深坑，相比H5支付直接使用链接打开，公众号支付首先多了一个openid的授权，而且需要使用微信浏览器自带的<code>WeixinJSBridge</code>或者<code>weixin-js-sdk</code>，虽然前者是微信官方文档上推荐的用法，但是实际用起来效果并不好，也可能是我的使用方法有问题，这里我选择使用<code>weixin-js-sdk</code>的<code>chooseWXPay</code>方法来发起支付。</p>
<h4 id="第一步-网页授权获取openid"><a href="#第一步-网页授权获取openid" class="headerlink" title="第一步 网页授权获取openid"></a>第一步 网页授权获取openid</h4><p>使用公众号支付，即trade_type为<code>JSAPI</code>时，统一下单的openid参数是必填的，所以我们首先要做的就是通过微信网页授权拿到用户在公众号对应appid下的唯一标识openid。<br>在进行这一步之前，首先需要检查授权回调域名是否设置正确(见上文准备工作)，确保无误后，在前台通过页面跳转拿到授权，具体可以查看<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">‘微信网页授权<br>‘</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onWechatPay () &#123;</span><br><span class="line">    <span class="comment">// appId: 公众号appid</span></span><br><span class="line">    <span class="comment">// redirect_uri: 授权回调地址</span></span><br><span class="line">    <span class="comment">// state: 需要传递的参数</span></span><br><span class="line">    <span class="comment">// scope: snsapi_base 只获取openid，页面会直接跳转，snsapi_userinfo 会弹出授权页面，获取用户信息 </span></span><br><span class="line">    <span class="keyword">let</span> url =  <span class="string">`https://open.weixin.qq.com/connect/oauth2/authorize?appid=<span class="subst">$&#123;appId&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;redirect_uri&#125;</span>&amp;response_type=code&amp;scope=snsapi_base&amp;state=<span class="subst">$&#123;state&#125;</span>#wechat_redirect`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>授权完成后，页面将会来到的授权的回调地址，并且微信会将参数附加到地址上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect_uri/?code=CODE&amp;state=STATE</span><br></pre></td></tr></table></figure></p>
<p>这里的code是之后用来获取openid的凭据，state是之前自己附加的参数</p>
<blockquote>
<p>关于授权回调地址，建议新建一个页面来作为发起微信支付的中间页，避免支付页面的逻辑过于复杂</p>
</blockquote>
<p>在回调页面拿到code值之后，需要再次通过一个get请求拿到openid的值，由于请求参数包含公众号的appsecret，建议这一步操作放在后台来完成<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$code = $request[<span class="string">'code'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// get_request是自己封装的发起get请求的方法，这里就不介绍了</span></span><br><span class="line">$result = get_request(<span class="string">'https://api.weixin.qq.com/sns/oauth2/access_token'</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'appid'</span> =&gt; $wechat[<span class="string">'appid'</span>],</span><br><span class="line">    <span class="string">'secret'</span> =&gt; $wechat[<span class="string">'appsecret'</span>],</span><br><span class="line">    <span class="string">'code'</span> =&gt; $code,</span><br><span class="line">    <span class="string">'grant_type'</span> =&gt; <span class="string">'authorization_code'</span>,</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> json_decode($result, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></p>
<p>前台传递code值访问后台api，这样在得到了用户唯一标识openid后，就可以进行下单操作了</p>
<h4 id="第二步-统一下单"><a href="#第二步-统一下单" class="headerlink" title="第二步 统一下单"></a>第二步 统一下单</h4><p>公众号支付的统一下单api完全可以复用之前H5支付的，增加了openid的参数由前台传递，签名方式也相同。</p>
<h4 id="第三步-配置sdk"><a href="#第三步-配置sdk" class="headerlink" title="第三步 配置sdk"></a>第三步 配置sdk</h4><p>关于<code>weixin-js-sdk</code>，具体可以查看<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115" target="_blank" rel="noopener">‘说明文档’</a>-&gt;微信网页开发-&gt;微信JS-SDK说明文档。<br>接下来介绍一下config时需要用到的参数，建议由后台下单api返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: false,		// debug 模式，开启后pc端以log，移动端以alert的形式提示信息</span><br><span class="line">  appId: appid,		// appid，不解释 </span><br><span class="line">  timestamp: timeStamp,		// 10位时间戳，字符串格式，注意是10位，表示的是秒数而不是毫秒数，是字符串不是数字，小写！小写！小写！</span><br><span class="line">  nonceStr: nonce_str,		// 随机字符串</span><br><span class="line">  signature: sign,	// 签名，重点，下文会详细介绍</span><br><span class="line">  jsApiList: [&apos;chooseWXPay&apos;]	// 需要用到的api列表</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>又是签名，这个签名非常关键，我可是在这里卡了整整一天，这里的签名需要用到的参数有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. noncestr  // 注意 小写！小写！小写！config时是驼峰，这里是小写，而且要值保持一致</span><br><span class="line">2. timestamp // 注意保持一致，字符串格式</span><br><span class="line">3. url // 当前发起请求的url，需要在商家后台设置公众号授权域名至页面所在目录，而且对于spa单页应用非常不友好，官方文档上说明需要#号之前路径，但我实践发现并不行，需要完整路径才能签名成功</span><br><span class="line">4. jsapi_ticket  // 公众号用于调用微信JS接口的临时票据，需要一个get请求获取到access_token，再一个get请求拿到</span><br></pre></td></tr></table></figure></p>
<p>先来介绍一下如何获取到这个jsapi_ticket吧，我选择放在后台来请求<br>这里需要注意的是，由于access_token的唯一性，在获取access_token之后，之前获取到的都会失效，所以需要把access_token储存在数据库，在7200s的有效期内，访问数据库取值，而不是重复请求。<br>创建后台api，接受前台传递的timeStamp，nonceStr和url来获取签名。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$timeStamp = $request[<span class="string">'timeStamp'</span>];</span><br><span class="line">$nonceStr = $request[<span class="string">'nonceStr'</span>];</span><br><span class="line">$url = $request[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取access_token</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'判断是否已有未过期的access_token'</span>) &#123; <span class="comment">//</span></span><br><span class="line">    $access_token = <span class="string">'ss'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $result = get_request(<span class="string">'https://api.weixin.qq.com/cgi-bin/token'</span>, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'appid'</span> =&gt; <span class="string">'appid'</span>,</span><br><span class="line">        <span class="string">'secret'</span> =&gt; <span class="string">'secret'</span>,</span><br><span class="line">        <span class="string">'grant_type'</span> =&gt; <span class="string">'client_credential'</span>,</span><br><span class="line">    ));</span><br><span class="line">    $result = json_decode($result, <span class="keyword">true</span>);</span><br><span class="line">    $access_token = $result[<span class="string">'access_token'</span>];</span><br><span class="line">    <span class="comment">// 入库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取jsapi_ticket</span></span><br><span class="line">$result = get_request(<span class="string">'https://api.weixin.qq.com/cgi-bin/ticket/getticket'</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'access_token'</span> =&gt; $access_token,</span><br><span class="line">    <span class="string">'type'</span> =&gt; <span class="string">'jsapi'</span>,</span><br><span class="line">));</span><br><span class="line">$result = json_decode($result, <span class="keyword">true</span>);</span><br><span class="line">$ticket = $result[<span class="string">'ticket'</span>];</span><br><span class="line"></span><br><span class="line">$data = [</span><br><span class="line">    <span class="string">'jsapi_ticket'</span> =&gt; $ticket,</span><br><span class="line">    <span class="string">'timestamp'</span> =&gt; $timeStamp,</span><br><span class="line">    <span class="string">'noncestr'</span> =&gt; $nonceStr,</span><br><span class="line">    <span class="string">'url'</span> =&gt; urldecode($url),	<span class="comment">// 对于url前台转码，后台解码</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeSign($data, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p>
<p>比较坑的一点在于，这里的签名算法跟下单的签名算法不一样，使用sha1加密，而不是MD5加密，并且不需要添加key。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MakeSign</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//按字典序排序参数</span></span><br><span class="line">    ksort($data);</span><br><span class="line">    $string = <span class="keyword">$this</span>-&gt;ToUrlParams($data);</span><br><span class="line">    <span class="comment">// sha1加密</span></span><br><span class="line">    $sign = sha1($string);    </span><br><span class="line">    <span class="keyword">return</span> $sign;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>前台访问api配置sdk即可, 需要在发起支付的页面调用config方法(url的变化会导致config失效)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx <span class="keyword">from</span> <span class="string">'weixin-js-sdk'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timeStamp我是由前台生成的  timeStamp = parseInt(new Date().getTime() / 1000).toString()</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">wechatConfig</span> (<span class="params">wechat, timeStamp</span>) </span>&#123;  <span class="comment">// wechat 为统一下单返回的数据,    </span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> Vue.http.post(<span class="string">'webpay/sign'</span>, &#123;</span><br><span class="line">    timeStamp: timeStamp,</span><br><span class="line">    nonceStr: wechat.nonce_str,</span><br><span class="line">    url: <span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.URL)</span><br><span class="line">  &#125;);</span><br><span class="line">  wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">false</span>,</span><br><span class="line">    appId: wechat.appid,</span><br><span class="line">    timestamp: timeStamp,</span><br><span class="line">    nonceStr: wechat.nonce_str,</span><br><span class="line">    signature: result.data.data,</span><br><span class="line">    jsApiList: [<span class="string">'chooseWXPay'</span>]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>常见的错误见<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115" target="_blank" rel="noopener">‘官网文档’</a>-&gt;微信网页开发-&gt;微信JS-SDK说明文档-&gt;附录5 常见错误,特别需要注意参数的大小写以及url</p>
<blockquote>
<p>由于异步请求较多,建议使用 async await的方式</p>
</blockquote>
<h4 id="第四步-发起支付"><a href="#第四步-发起支付" class="headerlink" title="第四步 发起支付"></a>第四步 发起支付</h4><p>在sdk配置完成之后, 就可以使用其<code>chooseWXPay</code>方法来发起支付了, 先来介绍一下参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wx.chooseWXPay(&#123;</span><br><span class="line">  timestamp: timeStamp,	<span class="comment">// 小写,其他同上</span></span><br><span class="line">  nonceStr: nonce_str,	<span class="comment">// 不解释</span></span><br><span class="line">  package: <span class="string">'prepay_id='</span> + prepay_id,	<span class="comment">// prepay_id由统一下单接口返回的,注意提交格式</span></span><br><span class="line">  signType: <span class="string">'MD5'</span>,	<span class="comment">// 默认为'SHA1',新版支付需要使用'MD5'</span></span><br><span class="line">  paySign: sign,	<span class="comment">// 第三个签名了...下面介绍</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 支付成功回调</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cancel: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 取消支付回调</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>其他的参数就不多说了,主要讲一下这个签名吧,第三个签名了,无力吐槽, 签名方式和统一下单相同,需要添加商户key使用MD5加密,依旧放在后台完成<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$prepayid = $request[<span class="string">'prepayid'</span>];</span><br><span class="line">$timeStamp = $request[<span class="string">'timeStamp'</span>];</span><br><span class="line">$nonceStr = $request[<span class="string">'nonceStr'</span>];</span><br><span class="line"></span><br><span class="line">$data = [</span><br><span class="line">    <span class="string">'appId'</span> =&gt; $wechat[<span class="string">'appid'</span>],</span><br><span class="line">    <span class="string">'timeStamp'</span> =&gt; $timeStamp,	<span class="comment">// 注意参数为驼峰大写</span></span><br><span class="line">    <span class="string">'nonceStr'</span> =&gt; $nonceStr,</span><br><span class="line">    <span class="string">'package'</span> =&gt; <span class="string">'prepay_id='</span>. $prepayid,  <span class="comment">// 注意了,和前台一样,需要添加prepay_id=</span></span><br><span class="line">    <span class="string">'signType'</span> =&gt; <span class="string">'MD5'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeSign($data)</span><br></pre></td></tr></table></figure></p>
<p>参数配置完成之后,调用方法,即可发起支付,还有一点要注意的是,需要在ready方法中触发<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	wx.chooseWXPay(...)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>由于wx.config的进程是异步的,只有在ready方法中才能保证config配置完成</p>
<h4 id="第五步-处理通知"><a href="#第五步-处理通知" class="headerlink" title="第五步 处理通知"></a>第五步 处理通知</h4><p>同上，可以和H5支付使用相同的通知地址</p>
<blockquote>
<p>最后总结一下, 嗯, 一共3个api, 向微信请求5次, 3个签名</p>
</blockquote>
<ol>
<li>网页授权, 前台直接get请求</li>
<li>获取openid, 后台请求</li>
<li>统一下单, 后台统一下单, 包含第一个签名</li>
<li>获取config签名, 后台请求获取access_token, 再请求获取jsapi_ticket, 第二个签名</li>
<li>获取支付签名, 第三个签名</li>
</ol>
<blockquote>
<p>分享一下这部分的源码<a href="https://pan.baidu.com/s/1Ujd_uTCRpGb_WYZuo4r-IQ" target="_blank" rel="noopener">‘链接’</a>，密码： kugp</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> javascript </tag>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript的一些实用技巧(持续更新)]]></title>
      <url>/2018/06/01/jsKnack/</url>
      <content type="html"><![CDATA[<p>整理一些自己觉得有用的js的技巧跟知识点，嘛，想到哪写到哪吧，毕竟我记性这么差，还这么懒。<br><a id="more"></a></p>
<h3 id="变量交换值"><a href="#变量交换值" class="headerlink" title="变量交换值"></a>变量交换值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'world'</span>, b = <span class="string">'hello'</span>;</span><br><span class="line">[a, b] = [b, a]</span><br><span class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>
<p>ES6的解构赋值算是我非常喜欢的一个功能了，允许按照一定模式，从数组和对象中提取值，对变量进行赋值。<br>如果是两个数字交换值的话，还可以这么做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>, b = <span class="number">2</span>;</span><br><span class="line">a ^= b;</span><br><span class="line">b ^= a;</span><br><span class="line">a ^= b;</span><br><span class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// 2 12</span></span><br></pre></td></tr></table></figure></p>
<p>这个东西就比较黑科技了，按位运算符异或<code>^</code>，将数字转为二进制进行按位比对，上面的计算步骤大概是(位数就不写全了)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 12 ^ 2 = 1100 ^ 0010 = 1110 = 14;</span><br><span class="line">b = 14 ^ 2 = 1110 ^ 0010 = 1100 = 12;</span><br><span class="line">a = 14 ^ 12 = 1110 ^ 1100 = 0010 = 2;</span><br></pre></td></tr></table></figure></p>
<h3 id="快速取整"><a href="#快速取整" class="headerlink" title="快速取整"></a>快速取整</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(~~<span class="number">47.11</span>)  <span class="comment">// 47</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">-12.88</span>) <span class="comment">// -12</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">3</span>)      <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="string">'1.2'</span>)  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="literal">NaN</span>)    <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<p>按位取反运算符<code>~</code>，会先判断类型进行隐式转换，之后将数字原码转二进制之后进行取反，再取其补码，除符号位外取反再加1<br>对于数字和字符串类型，执行两次后就可以快速实现一个取整的效果，其他类型会转换成0</p>
<h3 id="转换数字"><a href="#转换数字" class="headerlink" title="转换数字"></a>转换数字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+<span class="string">'1'</span>)  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(+&#123;&#125;&#125;)  <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p>当进行运算时会隐式转换数字，所以使用<code>+</code>可以快速地转换数字</p>
<h3 id="转换Boolean"><a href="#转换Boolean" class="headerlink" title="转换Boolean"></a>转换Boolean</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="number">1</span>)  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">''</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>二次取反不解释，简单粗暴</p>
<h3 id="参数解构和字符串拼接"><a href="#参数解构和字符串拼接" class="headerlink" title="参数解构和字符串拼接"></a>参数解构和字符串拼接</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">"张三"</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span> (<span class="params">&#123;name, age&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// let message = '大家好，我叫'+ name +'，我今年'+ age +'岁了';</span></span><br><span class="line">    <span class="keyword">let</span> message = <span class="string">`大家好，我叫<span class="subst">$&#123;name&#125;</span>，我今年<span class="subst">$&#123;age&#125;</span>岁了`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say(person);	<span class="comment">// 大家好，我叫张三，我今年20岁了</span></span><br></pre></td></tr></table></figure>
<p>在函数方法中使用参数解构可以更方便的获取数组/对象中的值。<br>在拼接字符串时，在替换引号之后，可以使用<code>${}</code>将变量直接写入字符串中，相比于<code>+</code>拼接字符串更加灵活。</p>
<h3 id="valueOf-和-toString"><a href="#valueOf-和-toString" class="headerlink" title="valueOf 和 toString"></a>valueOf 和 toString</h3><p>抛开二者的基本作用不谈，作为对象和方法的隐式属性，有一些意想不到的效果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    valueOf: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'valueOf'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'toString'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(a);	<span class="comment">// valueOf 1</span></span><br><span class="line">alert(a); <span class="comment">// valueOf 2</span></span><br><span class="line"><span class="built_in">console</span>.log(+a); <span class="comment">// toString 3</span></span><br><span class="line"><span class="built_in">console</span>.log(+a); <span class="comment">// toString 4</span></span><br></pre></td></tr></table></figure></p>
<p>可以发现，运算会触发对象的<code>valueOf</code>方法，取值会触发<code>toString</code>方法<br>以上的写法，每次对于对象获取到的值都不同，在调用之后都会发生改变，于是就可以实现一个很有意思的效果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a === <span class="number">1</span> &amp;&amp; a === <span class="number">2</span> &amp;&amp; a === <span class="number">3</span>);  <span class="comment">// valueOf valueOf valueOf true</span></span><br></pre></td></tr></table></figure></p>
<p><code>&amp;&amp;</code>运算符也会触发<code>valueOf</code>，就能实现这么一个一眼看上去几乎不可能为true的表达式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = num;</span><br><span class="line">    <span class="keyword">var</span> _add = <span class="function"><span class="keyword">function</span> (<span class="params">_num</span>) </span>&#123;</span><br><span class="line">        sum += _num;</span><br><span class="line">        <span class="keyword">return</span> _add;</span><br><span class="line">    &#125;</span><br><span class="line">    _add.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _add;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></p>
<p>既然取值触发<code>toString</code>，那么就可以在这上面做一些文章了，将一个函数方法链式调用来计算所有参数和，最后在取值的时候使用<code>toString</code>方法拿到值。</p>
<h3 id="Spread-扩展运算符"><a href="#Spread-扩展运算符" class="headerlink" title="Spread 扩展运算符"></a>Spread 扩展运算符</h3><p>ES6的扩展运算符<code>...</code>可以将一个数组转为用逗号分隔的参数序列<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">4</span>, <span class="number">38</span>];</span><br><span class="line">add(...numbers) <span class="comment">// 42</span></span><br></pre></td></tr></table></figure></p>
<p>合并数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...arr1, ...arr2]);  <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure></p>
<p>数组&amp;对象克隆，拒绝浅拷贝<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [], obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// let newArr = Object.assign([], arr);</span></span><br><span class="line"><span class="comment">// let newArr = JSON.parse(JSON.stringify(arr));</span></span><br><span class="line"><span class="keyword">let</span> newArr = [...arr];</span><br><span class="line"><span class="keyword">let</span> newObj = &#123;...obj&#125;;</span><br></pre></td></tr></table></figure></p>
<p>取数组最大值/最小值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">4</span>, <span class="number">6</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">21</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...arr));	<span class="comment">// 55</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(...arr));	<span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p>
<p>将字符串转为数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([...<span class="string">'hello'</span>])  <span class="comment">// ['h', 'e', 'l', 'l', 'o']</span></span><br></pre></td></tr></table></figure></p>
<p>平铺多维数组，这里只列举二维的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr11 = [<span class="number">11</span>, [<span class="number">22</span>, <span class="number">33</span>], [<span class="number">44</span>, <span class="number">55</span>], <span class="number">66</span>];</span><br><span class="line"><span class="keyword">let</span> flatArr = [].concat(...arr);</span><br><span class="line"><span class="built_in">console</span>.log(flatArr);		<span class="comment">// [11, 22, 33, 44, 55, 66]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Set-数组去重"><a href="#Set-数组去重" class="headerlink" title="Set 数组去重"></a>Set 数组去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="built_in">console</span>.log(unique([<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>])); <span class="comment">// ['h', 'e', 'l', 'o']</span></span><br></pre></td></tr></table></figure>
<p>ES6 提供了新的数据结构 Set。它类似于数组，允许存储任何类型的唯一值。<br>Set 本身是一个构造函数，用来生成 Set 数据结构，使用 Set 将数组处理之后再将其转为数组，就可以实现简单的数组去重</p>
<h3 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random().toString(<span class="number">32</span>).substr(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>生成结果类似于’n76ebcr9sg’这样的字符串，<code>toString</code>方法可以转换数字进制，32进制数字包含了a-z和0-9这些字符，在生成随机数转换32位后截取前两位的’0.’，就可以快速的生成一个随机字符串。</p>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>   <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Array</span>()  <span class="comment">// object</span></span><br></pre></td></tr></table></figure>
<p>在使用typeof判断数据类型的时候，需要注意null的类型判断也是’object’（毕竟万物皆对象）<br>由于js的基本类型没有数组类型，所以数组的typeof也是’object’，那么如何去区分数组和对象呢<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [], obj = &#123;&#125; </span><br><span class="line"><span class="built_in">Array</span>.isArray(arr)	<span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(obj)	<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> arr === <span class="string">'object'</span> &amp;&amp; !<span class="built_in">isNaN</span>(arr.length)<span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> obj === <span class="string">'object'</span> &amp;&amp; !<span class="built_in">isNaN</span>(obj.length)<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(arr)  <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj)  <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>) <span class="keyword">instanceof</span> <span class="built_in">Number</span>  <span class="comment">// true  </span></span><br><span class="line"><span class="number">1</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>   <span class="comment">// false</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>) <span class="keyword">instanceof</span> <span class="built_in">String</span>  <span class="comment">// true</span></span><br><span class="line"><span class="string">'hello'</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>  <span class="comment">// false</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>在使用instanceof判断类型的时候也需要注意，instanceof只对对象实例生效，对于基本类型的验证都是false，而对于数组的类型判断，既是数组也是对象</p>
<h3 id="在条件中使用-amp-amp-及-进行短语判断"><a href="#在条件中使用-amp-amp-及-进行短语判断" class="headerlink" title="在条件中使用  &amp;&amp; 及 || 进行短语判断"></a>在条件中使用  &amp;&amp; 及 || 进行短语判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">10</span>;  </span><br><span class="line">foo === <span class="number">10</span> &amp;&amp; doSomething(); <span class="comment">// ===  if (foo === 10) doSomething(); </span></span><br><span class="line">foo === <span class="number">5</span> || doSomething(); <span class="comment">// ===  if (foo !== 5) doSomething();</span></span><br></pre></td></tr></table></figure>
<p>这种写法算是利用了<code>&amp;&amp;</code>和<code>||</code>的特性，起到了和if语句相同的效果。<br><code>&amp;&amp;</code>会执行所有的条件判断语句，<code>||</code>执行到true的时候就会短路掉之后的条件，不去执行。</p>
<h3 id="变量属性名"><a href="#变量属性名" class="headerlink" title="变量属性名"></a>变量属性名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> key = <span class="string">'hello'</span>, value = <span class="string">'world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(&#123;       <span class="comment">// &#123;hello: 'world'&#125;</span></span><br><span class="line">    [key]: value</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>ES6允许使用变量来作为对象的属性。</p>
<h3 id="浮点数计算"><a href="#浮点数计算" class="headerlink" title="浮点数计算"></a>浮点数计算</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span>)  <span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">1</span>)) <span class="comment">// 0.3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> * <span class="number">10</span> + <span class="number">0.2</span> * <span class="number">10</span>)/ <span class="number">10</span>) <span class="comment">// 0.3</span></span><br></pre></td></tr></table></figure>
<p>js的浮点数计算算是很烦人的一点了，转换二进制之后对于浮点数的识别很不友好，最简单的解决办法就是使用<code>toFixed</code>了，还有就是转换为整数之后再进行计算，当然还有其它的方法，封装好的工具包等，就不多介绍了。</p>
<h3 id="获取出现次数"><a href="#获取出现次数" class="headerlink" title="获取出现次数"></a>获取出现次数</h3><p>当我们想要获取字符串中某个字符串出现的次数，比如<code>ggasddghasdw</code>中’a’出现的次数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'ggasddghasdw'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">'a'</span>).length - <span class="number">1</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<p>同理，对于数组元素也可以使用这样的方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.toString().split(<span class="number">3</span>).length - <span class="number">1</span>)  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<h3 id="深拷贝对象"><a href="#深拷贝对象" class="headerlink" title="深拷贝对象"></a>深拷贝对象</h3><p>使用<code>ES6</code>的方法可以更灵活的完成对象的深拷贝<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(original, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;); </span><br><span class="line"><span class="keyword">delete</span> copy.a;   <span class="comment">// copy =&gt; &#123; b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> copy = &#123; ...original, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; a, ...result &#125; = copy; <span class="comment">// result =&gt; &#123; b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
            <category> 实用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AutoHotkey禁用热键以及Electron中的使用]]></title>
      <url>/2018/05/28/autohotkey/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;AutoHotkey是一个用来定义热键的脚本工具，可以通过编写脚本语言设置或者禁用热键。<br>&nbsp;&nbsp;&nbsp;&nbsp;由于之前的Electron项目需要全屏显示，并且禁用掉包括Windows，Alt + Tab之类的热键，为了确保安全性，使用权限来控制应用程序的退出。<br><a id="more"></a><br>首先来介绍一下需求：</p>
<ol>
<li>全屏显示及注册快捷键(之前的electron文章中有介绍<a href="/2018/03/13/electron/">‘点击查看’</a>)</li>
<li>禁用退出热键</li>
<li>electron启动时调用脚本，退出全屏时终止进程</li>
<li>退出权限验证</li>
</ol>
<h3 id="AutoHotkey"><a href="#AutoHotkey" class="headerlink" title="AutoHotkey"></a>AutoHotkey</h3><p>关于<code>AutoHotkey</code>，这里不过多介绍，具体可以查看<a href="https://autohotkey.com" target="_blank" rel="noopener">‘官网’</a>;</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>首先需要做的是安装<a href="https://autohotkey.com/download/ahk-install.exe" target="_blank" rel="noopener">‘点击下载’</a></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>简单来讲，创建一个完整的AutoHotkey脚本步骤</p>
<ol>
<li>新建一个<code>.ahk</code>后缀的文件，用来编写脚本语言，可以直接运行</li>
<li>将其转换为<code>.exe</code>方便使用(可以使用<code>Ahk2Exe.exe</code>或其他工具进行转换)</li>
</ol>
<p>和退出全屏有关的快捷键设置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LWin::return</span><br><span class="line">RWin::return    // windows</span><br><span class="line">Alt::return</span><br><span class="line">!Tab::return	// Alt + Tab</span><br><span class="line">^Esc::return 	// Ctrl + Esc</span><br></pre></td></tr></table></figure></p>
<p>写入到ahk文件后启动脚本即可禁用相关键位。</p>
<h3 id="Electron中调用"><a href="#Electron中调用" class="headerlink" title="Electron中调用"></a>Electron中调用</h3><p>首先我们需要找到electron的主进程文件<code>src/main/index.js</code>，可以看到主进程的启动方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">'ready'</span>, createWindow);</span><br></pre></td></tr></table></figure></p>
<p>好了，接下来要做的就是在<code>createWindow</code>方法中启动脚本，在自定义的退出方法中，终止脚本。<br>这里我选择使用了node的<a href="http://nodejs.cn/api/child_process.html" target="_blank" rel="noopener">‘child_process’</a>中的<code>exec</code>方法，启动子进程通过命令行工具，启动脚本，相关代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; exec &#125; <span class="keyword">from</span> <span class="string">'child_process'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleFullScreen</span> (<span class="params">bol</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">    exec(<span class="string">'.\\AutoHotkey.exe'</span>);	<span class="comment">// 命令行启动脚本</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    exec(<span class="string">'TASKKILL /IM AutoHotkey.exe'</span>); <span class="comment">// 终止进程</span></span><br><span class="line">  &#125;</span><br><span class="line">  mainWindow.setFullScreen(bol);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>封装了一下切换全屏显示的方法，方便使用。</p>
<blockquote>
<p>我将AutoHotkey的exe文件跟ahk文件放在了打包后的根目录，注意要使用<code>.\\</code>而不是<code>./</code></p>
</blockquote>
<h3 id="注册快捷键"><a href="#注册快捷键" class="headerlink" title="注册快捷键"></a>注册快捷键</h3><p>这里使用到了两个快捷键：F11全屏，Esc验证权限退出全屏写了两个方法进行了注册<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerFull</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  globalShortcut.register(<span class="string">'F11'</span>, () =&gt; &#123;</span><br><span class="line">    toggleFullScreen(<span class="literal">true</span>);	</span><br><span class="line">    registerEsc();		<span class="comment">// 由于退出全屏时注销了Esc，所以每次全屏都要注册一下</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerEsc</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  globalShortcut.register(<span class="string">'ESC'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (mainWindow.isFullScreen()) &#123;	<span class="comment">// 判断是否为全屏</span></span><br><span class="line">      mainWindow.webContents.send(<span class="string">'esc'</span>, <span class="literal">true</span>);	 <span class="comment">// 向渲染进程发送信息，下文会有介绍</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="客户端交互"><a href="#客户端交互" class="headerlink" title="客户端交互"></a>客户端交互</h3><p>关于这一部分，需要实现的功能为，当点击Esc键时，主进程通知渲染进程验证权限，在权限验证通过后，渲染进程通知主进程退出全屏显示。<br>对于客户端（渲染进程）和主进程之前的通信，electron有相关的api：</p>
<ol>
<li><a href="https://electronjs.org/docs/api/ipc-renderer" target="_blank" rel="noopener">‘ipcRenderer’</a>渲染进程发送和接收消息</li>
<li><a href="https://electronjs.org/docs/api/ipc-main" target="_blank" rel="noopener">‘ipcMain’</a>主进程接收消息</li>
<li><a href="https://electronjs.org/docs/api/web-contents" target="_blank" rel="noopener">‘webContents’</a>主进程发送消息</li>
</ol>
<p>那么问题就好解决了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染进程</span></span><br><span class="line"><span class="keyword">import</span> &#123; ipcRenderer &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"></span><br><span class="line">ipcRenderer.on(<span class="string">'esc'</span>, () =&gt; &#123;	<span class="comment">// 接收主进程Esc事件触发</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.permissionDialog.show().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;	<span class="comment">// 权限验证通过</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'exit'</span>);	<span class="comment">// 向主进程发送消息，退出全屏</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主进程</span></span><br><span class="line"><span class="keyword">import</span> &#123; ipcMain &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"></span><br><span class="line">ipcMain.on(<span class="string">'exit'</span>, () =&gt; &#123;</span><br><span class="line">  globalShortcut.unregister(<span class="string">'ESC'</span>);	<span class="comment">// 注销Esc快捷键</span></span><br><span class="line">  toggleFullScreen(<span class="literal">false</span>);	<span class="comment">// 退出全屏</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这里之所以要注销Esc快捷键，是因为electron注册的是全局快捷键，会影响其他应用程序的操作，所以在推出时注销，F11全屏时再次注册</p>
</blockquote>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>贴一下这部分相关的所有源码，首先是主进程的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; app, globalShortcut, BrowserWindow, ipcMain &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; exec &#125; <span class="keyword">from</span> <span class="string">'child_process'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainWindow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    height: <span class="number">768</span>,</span><br><span class="line">    width: <span class="number">1024</span>,</span><br><span class="line">    autoHideMenuBar: <span class="literal">true</span>,	<span class="comment">// 隐藏导航</span></span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      webSecurity: <span class="literal">false</span>	<span class="comment">// 解决跨域，之前文章有介绍</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  toggleFullScreen(<span class="literal">true</span>);	<span class="comment">// 默认全屏，注册快捷键</span></span><br><span class="line">  registerEsc();</span><br><span class="line">  registerFull();</span><br><span class="line"></span><br><span class="line">  ……</span><br><span class="line"></span><br><span class="line">  ipcMain.on(<span class="string">'exit'</span>, () =&gt; &#123;	<span class="comment">// 退出</span></span><br><span class="line">    globalShortcut.unregister(<span class="string">'ESC'</span>);</span><br><span class="line">    toggleFullScreen(<span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerFull</span> (<span class="params"></span>) </span>&#123;	<span class="comment">// 注册F11全屏快捷键</span></span><br><span class="line">  globalShortcut.register(<span class="string">'F11'</span>, () =&gt; &#123;</span><br><span class="line">    toggleFullScreen(<span class="literal">true</span>);</span><br><span class="line">    registerEsc();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerEsc</span> (<span class="params"></span>) </span>&#123;	<span class="comment">// 注册Esc退出全屏快捷键</span></span><br><span class="line">  globalShortcut.register(<span class="string">'ESC'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (mainWindow.isFullScreen()) &#123;</span><br><span class="line">      mainWindow.webContents.send(<span class="string">'esc'</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleFullScreen</span> (<span class="params">bol</span>) </span>&#123;	<span class="comment">// 切换全屏显示</span></span><br><span class="line">  <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">    exec(<span class="string">'.\\AutoHotkey.exe'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    exec(<span class="string">'TASKKILL /IM AutoHotkey.exe'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  mainWindow.setFullScreen(bol);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意，我这里只列举了相关的代码，主进程自身功能代码没有包含</p>
</blockquote>
<p>渲染进程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ipcRenderer &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'PermissionDialog'</span>: <span class="built_in">require</span>(<span class="string">'./components/Widget/PermissionDialog.vue'</span>).default</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    ipcRenderer.on(<span class="string">'esc'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.onExit();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onExit () &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.checkPermission()) &#123;  <span class="comment">//验证当前用户权限</span></span><br><span class="line">        ipcRenderer.send(<span class="string">'exit'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;	</span><br><span class="line">        <span class="keyword">this</span>.$refs.permissionDialog.show().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;	<span class="comment">// 权限验证</span></span><br><span class="line">          ipcRenderer.send(<span class="string">'exit'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    checkPermission () &#123;</span><br><span class="line">  	  ……</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 项目实例 </category>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AutoHotkey </tag>
            
            <tag> electron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Electron-Vue项目记录]]></title>
      <url>/2018/03/13/electron/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近开始基于electron-vue做一个桌面应用，因为是独立做的项目，也是我首次从搭建环境开始自己做项目开发，踩了很多坑，总结一下一些值得记住的东西吧。<br><a id="more"></a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先简单介绍一下Electron吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;当用Electron启动一个应用，会创建一个主进程。这个主进程负责与你系统原生的GUI进行交互并为你的应用创建GUI（在你的应用窗口），所以你能把它看作成一个被 JavaScript 控制的，精简版的 Chromium 浏览器。<br>&nbsp;&nbsp;&nbsp;&nbsp;Electron-Vue集成了vue-cli脚手架，项目环境同常规的vue项目大致相同。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>作为<code>vue-cli</code>的一个模板，可以直接使用以下命令搭建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">vue init simulatedgreg/electron-vue my-project</span><br></pre></td></tr></table></figure></p>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>在后台没有设置<code>Access-Control-Allow-Origin</code>的情况下，浏览器对于跨域请求会出错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response to preflight request doesn&apos;t pass access control check: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:9080&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure></p>
<p>我们可以在前台解决这个问题，取消浏览器对于非同源请求的限制，在初始化Electron的BrowserWindow模块中配置这样一个参数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/main/index.js</span></span><br><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    webPreferences: &#123;<span class="attr">webSecurity</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>webSecurity</code>是什么意思呢？顾名思义，他是设置web安全性，如果参数设置为 false，它将禁用相同地方的规则 (通常测试服), 并且如果有2个非用户设置的参数，就设置 <code>allowDisplayingInsecureContent</code> 和 <code>allowRunningInsecureContent</code>的值为true。 （webSecurity的默认值为true）</p>
<p>allowDisplayingInsecureContent表示是否允许一个使用 https的界面来展示由 http URLs 传过来的资源。默认false。<br>allowRunningInsecureContent表示是否允许一个使用 https的界面来渲染由 http URLs 提交的html，css，javascript。默认为 false。</p>
<h3 id="build空白"><a href="#build空白" class="headerlink" title="build空白"></a>build空白</h3><p><code>npm run build:win32</code>打包出来一片空白，几经波折之后在<code>webpack.renderer.config.js</code>中发现了以下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  ……</span><br><span class="line">  nodeModules: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">        ? path.resolve(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">        : <span class="literal">false</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>一脸懵比。。原来是<code>node_modules</code>没有加载上，于是就有了解决办法</p>
<ul>
<li>打包之前修改环境为production</li>
<li>修改代码为 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodeModules: path.resolve(__dirname, <span class="string">'../node_modules'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="全屏显示"><a href="#全屏显示" class="headerlink" title="全屏显示"></a>全屏显示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; app, globalShortcut, BrowserWindow &#125; <span class="keyword">from</span> <span class="string">'electron'</span></span><br><span class="line"></span><br><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">  height: <span class="number">768</span>,</span><br><span class="line">  width: <span class="number">1024</span>,</span><br><span class="line">  autoHideMenuBar: <span class="literal">true</span>,</span><br><span class="line">  webPreferences: &#123;</span><br><span class="line">    webSecurity: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mainWindow.setFullScreen(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// mainWindow.setMenu(null)</span></span><br><span class="line"></span><br><span class="line">globalShortcut.register(<span class="string">'ESC'</span>, () =&gt; &#123;</span><br><span class="line">  mainWindow.setFullScreen(<span class="literal">false</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>通过设置<code>win.setFullScreen(true)</code>全屏显示，<code>ESC</code>退出全屏</li>
<li>配置项<code>autoHideMenuBar: true</code>用来隐藏菜单栏，这样设置的话按<code>Alt</code>键会显示菜单，想要完全隐藏的话，可以设置<code>win.setMenu(null)</code></li>
</ul>
<h3 id="注册快捷键"><a href="#注册快捷键" class="headerlink" title="注册快捷键"></a>注册快捷键</h3><p><code>global-shortcut</code> 模块可以便捷的设置(注册/注销)各种自定义操作的快捷键，例如上面的<code>ESC</code>退出全屏，包含以下函数:<br>1.globalShortcut.register(accelerator, callback)</p>
<ul>
<li><code>accelerator</code> <a href="https://electronjs.org/docs/api/accelerator" target="_blank" rel="noopener">‘accelerator’</a></li>
<li><code>callback</code> Function<br>快捷方式使用 register 方法在 globalShortcut 模块中注册, 即:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, globalShortcut&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">  </span><br><span class="line">  app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Register a 'CommandOrControl+Y' shortcut listener.</span></span><br><span class="line">    globalShortcut.register(<span class="string">'CommandOrControl+Y'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">// Do stuff when Y and either Command/Control is pressed.</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>2.globalShortcut.isRegistered(accelerator)<br>查询 accelerator 快捷键是否已经被注册过了,将会返回 true(已被注册) 或 false(未注册).<br>3.globalShortcut.unregister(accelerator)<br>注销全局快捷键 accelerator.<br>4.globalShortcut.unregisterAll()<br>注销本应用注册的所有全局快捷键.</p>
<h3 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a>axios封装</h3><p>目的：</p>
<ol>
<li>设置请求头</li>
<li>数据处理</li>
<li>添加loading</li>
<li>返回值验证</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../../store'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Loading&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loading;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a request interceptor</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  showLoading();</span><br><span class="line">  config.url = <span class="string">'http://xxxxxx'</span> + config.url;</span><br><span class="line">  config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br><span class="line">  config.headers[<span class="string">'Authorization'</span>] = localStorage.getItem(<span class="string">'token'</span>);</span><br><span class="line">  <span class="keyword">if</span> (config.method === <span class="string">'post'</span>) &#123;</span><br><span class="line">    config.data = qs.stringify(&#123;</span><br><span class="line">      ...config.data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  hideLoading();</span><br><span class="line">  <span class="keyword">if</span> (response.data.error_code === <span class="string">'002'</span>) &#123;</span><br><span class="line">    store.commit(<span class="string">'_setOnlineStatus'</span>, <span class="literal">false</span>)<span class="comment">// sign out</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  hideLoading();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showLoading</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  loading = Loading.service(&#123;</span><br><span class="line">    fullscreen: <span class="literal">true</span>,</span><br><span class="line">    lock: <span class="literal">false</span>,</span><br><span class="line">    text: <span class="string">'Loading...'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hideLoading</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  loading.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.http = Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure>
<p>这里使用的是axios提供的<code>interceptors</code>拦截器方法，对request和response进行了拦截。<br>request: 添加loading，修改url，token，Content-Type，我在用户登录时，将token存在了localStorage中，并使用qs模块对post请求发送的数据进行了处理。<br>response: 移除loading，当token过期时，退出登录，这里的退出功能使用了vuex来实现，在根组件监听<code>onlineStatus</code>的变化，当值为false时登出。<br>。<br>最后将axios注册在Vue实例的原型上，可以直接通过<code>this.$http</code>来调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'/list'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="I18n多语言设置"><a href="#I18n多语言设置" class="headerlink" title="I18n多语言设置"></a>I18n多语言设置</h3><p>项目要求使用多语言，我选择使用了vue-i18n，配置如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">'vue-i18n'</span></span><br><span class="line"><span class="keyword">import</span> enLocale <span class="keyword">from</span> <span class="string">'element-ui/lib/locale/lang/en'</span></span><br><span class="line"><span class="keyword">import</span> zhLocale <span class="keyword">from</span> <span class="string">'element-ui/lib/locale/lang/zh-CN'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n);</span><br><span class="line"><span class="keyword">let</span> locale = localStorage.getItem(<span class="string">'locale'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: locale || <span class="string">'zh-CN'</span>, <span class="comment">// set locale</span></span><br><span class="line">  silentTranslationWarn: <span class="literal">true</span>,</span><br><span class="line">  messages: &#123;</span><br><span class="line">    <span class="string">'zh-CN'</span>: <span class="built_in">require</span>(<span class="string">'./zh-CN'</span>).default,</span><br><span class="line">    <span class="string">'en'</span>: <span class="built_in">require</span>(<span class="string">'./en'</span>).default</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">i18n.mergeLocaleMessage(<span class="string">'zh-CN'</span>, zhLocale);</span><br><span class="line">i18n.mergeLocaleMessage(<span class="string">'en'</span>, enLocale);</span><br></pre></td></tr></table></figure></p>
<p>项目使用了<code>Element-ui</code>，所以需要导入语言包，后来发现<code>Element-ui</code>有方法导入多语言，就不需要再用<code>mergeLocaleMessage</code>进行合并，在<code>main.js</code>中引入时这样使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里的i8n是上面语言配置文件导出的VueI18n实例</span></span><br><span class="line"><span class="keyword">import</span> &#123; i18n &#125; <span class="keyword">from</span> <span class="string">'./lang'</span></span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI, &#123;</span><br><span class="line">  i18n: <span class="function">(<span class="params">key, value</span>) =&gt;</span> i18n.t(key, value)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>我选择将语言的配置存放在<code>localStorage</code>中，在每次切换语言后修改<code>localStorage</code>，记录当前所选择的语言，切换语言时调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$i18n.locale = <span class="string">'en'</span>;</span><br><span class="line">localStorage.setItem(<span class="string">'locale'</span>, <span class="string">'en'</span>);</span><br></pre></td></tr></table></figure></p>
<p>当然，在配置完成之后，还需要在<code>main.js</code>中实例化Vue的时候引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; i18n &#125; <span class="keyword">from</span> <span class="string">'./lang'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  i18n,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>以中文文件为例，为了方便管理，在’zh-CN文件夹下引入各个模块的语言文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'table'</span>: <span class="built_in">require</span>(<span class="string">'./table'</span>).default,</span><br><span class="line">  <span class="string">'order'</span>: <span class="built_in">require</span>(<span class="string">'./order'</span>).default,</span><br><span class="line">  <span class="string">'indent'</span>: <span class="built_in">require</span>(<span class="string">'./indent'</span>).default,</span><br><span class="line">  <span class="string">'member'</span>: <span class="built_in">require</span>(<span class="string">'./member'</span>).default,</span><br><span class="line">  <span class="string">'report'</span>: <span class="built_in">require</span>(<span class="string">'./report'</span>).default,</span><br><span class="line">  <span class="string">'login'</span>: <span class="built_in">require</span>(<span class="string">'./login'</span>).default</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// login.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'title'</span>: <span class="string">'登录'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; $t(&apos;login.title&apos;) &#125;&#125;&lt;/div&gt;	//登录</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>在组件中，可以使用<code>this.$i18n</code>访问对象</p>
</blockquote>
<h3 id="登录超时"><a href="#登录超时" class="headerlink" title="登录超时"></a>登录超时</h3><p>项目要求无操作1分钟后退出登录，退出前有消息提示(这里需要吐槽一下1分钟这个时间)，话不多说，直接贴代码，我把登录超时验证的逻辑放在了与<code>login.vue</code>同级的<code>full.vue</code>根文件上，除登陆页之外的所有页面都注册在它的子路由下。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"full-page"</span> @<span class="attr">mousemove</span>=<span class="string">"onMouseMove"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        lastTime: <span class="literal">null</span>,		<span class="comment">// 上次操作的时间</span></span><br><span class="line">        showMessage: <span class="literal">true</span>   <span class="comment">// 防止重复弹出message box</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created () &#123;</span><br><span class="line">      <span class="keyword">if</span> (!localStorage.getItem(<span class="string">'token'</span>)) &#123;	  <span class="comment">// 登录超时后刷新页面也会退出</span></span><br><span class="line">        <span class="keyword">this</span>.onExit();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      <span class="keyword">this</span>.checkTime();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onMouseMove () &#123;	<span class="comment">// 记录上次操作的时间</span></span><br><span class="line">        <span class="keyword">this</span>.lastTime = moment();</span><br><span class="line">      &#125;,</span><br><span class="line">      checkTime () &#123;</span><br><span class="line">        <span class="keyword">this</span>.lastTime = moment();</span><br><span class="line">        <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> time = moment() - moment(<span class="keyword">this</span>.lastTime);</span><br><span class="line">          <span class="keyword">if</span> (time &gt; <span class="number">60000</span> &amp;&amp; <span class="keyword">this</span>.showMessage) &#123;	<span class="comment">// 时间差大于一分钟</span></span><br><span class="line">            localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">            <span class="keyword">this</span>.showMessage = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.$alert(<span class="keyword">this</span>.$t(<span class="string">'login.errors.overtime_text'</span>), <span class="keyword">this</span>.$t(<span class="string">'login.errors.overtime'</span>), &#123;</span><br><span class="line">              confirmButtonText: <span class="keyword">this</span>.$t(<span class="string">'confirm'</span>),</span><br><span class="line">              closeOnClickModal: <span class="literal">true</span>,</span><br><span class="line">              callback: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.showMessage = <span class="literal">true</span>;</span><br><span class="line">                clearInterval(timer);	</span><br><span class="line">                <span class="keyword">this</span>.onExit();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">5000</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      onExit () &#123;</span><br><span class="line">        localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">        <span class="keyword">this</span>.$router.push(<span class="string">'/login'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>其实道理很简单，给根页面绑定mousemove事件，记录上次操作的时间，然后启动定时器，判断当前时间差，超时之后弹出消息提示，这时候已经清掉了储存的token，已经算是退出登录了，在message box的回掉中退出到登陆页。</p>
<blockquote>
<p>一定要清定时器！一定要清定时器！一定要清定时器！</p>
</blockquote>
<h3 id="Eslint-从入门到放弃"><a href="#Eslint-从入门到放弃" class="headerlink" title="Eslint 从入门到放弃"></a>Eslint 从入门到放弃</h3><p>之前提到Electron-Vue使用了vue-cli脚手架来搭建项目环境，在使用vue-cli安装时，可以选择直接安装eslint，如果想安装eslint到其他项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g eslint</span><br><span class="line">eslint --init</span><br></pre></td></tr></table></figure></p>
<p>全局安装eslint之后，在项目文件夹执行命令生成.eslintrc配置文件即可,下面来大致介绍一下</p>
<ul>
<li>env: 脚本运行环境，如brower、node环境变量、es6环境变量、mocha环境变量等</li>
<li>globals: 额外的全局变量</li>
<li>rules: 开启规则和发生错误时报告的等级</li>
</ul>
<p>规则的错误等级有三种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0或&apos;off&apos;：关闭规则。</span><br><span class="line">1或&apos;warn&apos;：打开规则，并且作为一个警告（并不会导致检查不通过）。</span><br><span class="line">2或&apos;error&apos;：打开规则，并且作为一个错误 (退出码为1，检查不通过)。</span><br></pre></td></tr></table></figure></p>
<p>默认配置的eslint有很多特(sang)别(xin)贴(bing)心(kuang)的地方，就不一一赘述了，我在开发的时候关闭了一些自己不能忍的规则<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'rules'</span>: &#123;</span><br><span class="line">  <span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">    <span class="comment">// 允许声明未使用变量</span></span><br><span class="line">    <span class="string">"vars"</span>: <span class="string">"local"</span>,</span><br><span class="line">    <span class="comment">// 参数不检查</span></span><br><span class="line">    <span class="string">"args"</span>: <span class="string">"none"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// 关闭语句强制分号结尾</span></span><br><span class="line">  <span class="string">"semi"</span>: [<span class="number">0</span>],</span><br><span class="line">  <span class="comment">//空行最多不能超过100行</span></span><br><span class="line">  <span class="string">"no-multiple-empty-lines"</span>: [<span class="number">0</span>, &#123;<span class="string">"max"</span>: <span class="number">100</span>&#125;],</span><br><span class="line">  <span class="comment">//关闭禁止混用tab和空格</span></span><br><span class="line">  <span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">0</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于Eslint不允许使用未声明的变量，因此在使用全局变量的时候会出现<code>no-undef</code>的报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;axios&apos; is not defined</span><br></pre></td></tr></table></figure></p>
<p>几番尝试之后发现这种东西似乎是关不掉的，于是只能在<code>globals</code>中添加允许的全局变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">globals: &#123;</span><br><span class="line">  __static: <span class="literal">true</span>,</span><br><span class="line">  axios: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>对于使用webstrom / phpstrom的童鞋，想体验eslint的酸爽的话，需要手动开启vip体验<br>Preferences -&gt; Languages &amp; Frameworks -&gt; JavaScript -&gt; Code Quality Tools -&gt; Eslint -&gt; Enable (勾选) -&gt; Apply -&gt; OK</p>
</blockquote>
<p>当然，在使用vue-cli脚手架不小心安装了eslint的时候，直接在webpack的config配置文件中删除即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   test: /\.(js)$/,</span></span><br><span class="line">    <span class="comment">//   enforce: 'pre',</span></span><br><span class="line">    <span class="comment">//   exclude: /node_modules/,</span></span><br><span class="line">    <span class="comment">//   use: &#123;</span></span><br><span class="line">    <span class="comment">//     loader: 'eslint-loader',</span></span><br><span class="line">    <span class="comment">//     options: &#123;</span></span><br><span class="line">    <span class="comment">//       formatter: require('eslint-friendly-formatter')</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Better-Scroll滚动封装"><a href="#Better-Scroll滚动封装" class="headerlink" title="Better-Scroll滚动封装"></a>Better-Scroll滚动封装</h3><p>因为是应用于pos机的桌面应用，很多地方就要考虑内容的滚动，这里使用了<a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">‘better-scroll’</a>;<br>具体的使用方法见官方文档，我在使用的时候并没有像官方文档那样封装scroll组件，因为项目不需要那么复杂的功能和配置，当然，也进行了简单的封装，用<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">‘mixin’</a>的形式调用方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scroll.js</span></span><br><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      scroll: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initScroll (dom = <span class="keyword">this</span>.$refs.wrapper, option) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  <span class="comment">//等待dom元素加载完成</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.scroll) &#123;</span><br><span class="line">          <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(dom, option || &#123;</span><br><span class="line">            scrollbar: &#123;</span><br><span class="line">              fade: <span class="literal">true</span>,</span><br><span class="line">              interactive: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">this</span>.scrollPullDown();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.scroll.refresh();  <span class="comment">//刷新</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,  </span><br><span class="line">    scrollPullDown () &#123;   <span class="comment">//下拉事件</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.pullDown) &#123;</span><br><span class="line">        <span class="keyword">this</span>.scroll.on(<span class="string">'scrollEnd'</span>, (&#123;x, y&#125;) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (y === <span class="keyword">this</span>.scroll.maxScrollY) &#123;</span><br><span class="line">            <span class="keyword">this</span>.onPullDown();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在配置option的时候只添加了滚动条，没有其他的配置，在vue文件中使用scroll时<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// html </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll-wrapper"</span> <span class="attr">ref</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">import</span> scroll <span class="keyword">from</span> <span class="string">'../../assets/js/scroll'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mixins: [</span><br><span class="line">      scroll</span><br><span class="line">    ]</span><br><span class="line">    ……</span><br><span class="line">    methods: &#123;</span><br><span class="line">        queryData () &#123;</span><br><span class="line">            axios.post(<span class="string">'url'</span>, &#123;&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            	<span class="keyword">this</span>.initScroll();</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.initScroll();</span><br><span class="line">            &#125;)	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意设置wrapper样式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.scroll-wrapper&#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    position: relative(滚动条定位)</span><br><span class="line">    margin: 0 -15px;(空出滚动条的位置)</span><br><span class="line">    padding: 0 15px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义的<code>scrollPullDown</code>方法，为滚动对象绑定了一个下拉事件，当滚动区域下拉至底部时触发，我在这里把他应用于表格的分页加载，因为是桌面应用，没有使用传统的分页器，而是使用下拉来加载下一页使用，需要设置<code>pullDown: true</code>以及<code>onPullDown</code>方法使用。</p>
<blockquote>
<p>最后发现better-scroll并不是适用于触屏PC，弃用了。。由于electron自带chrome，所以直接通过css修改了滚动条样式，使用原生滚动</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.scroll-wrapper&#123; overflow: auto; &#125;</span><br><span class="line">::-webkit-scrollbar-track-piece&#123; background-color: $white-color; &#125;</span><br><span class="line">::-webkit-scrollbar&#123; width:5px; &#125;</span><br><span class="line">::-webkit-scrollbar-thumb&#123; background-color: rgba(0,0,0,.6); border-radius: 3px &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Table简易封装"><a href="#Table简易封装" class="headerlink" title="Table简易封装"></a>Table简易封装</h3><p>上文提到了，将table结合scroll，实现下拉刷新。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scroll <span class="keyword">from</span> <span class="string">'./scroll'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  mixins: [</span><br><span class="line">    scroll</span><br><span class="line">  ],</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      tableData: [],</span><br><span class="line">      pullDown: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.queryTableData();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    queryTableData () &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.resource) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$http.post(<span class="keyword">this</span>.resource, <span class="keyword">this</span>.parms).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.tableData = <span class="keyword">this</span>.tableData.concat(res.data.data)</span><br><span class="line">          <span class="keyword">this</span>.initScroll(<span class="string">'.el-table__body-wrapper'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    onPullDown () &#123;</span><br><span class="line">      <span class="keyword">this</span>.parms.page++;</span><br><span class="line">      <span class="keyword">this</span>.queryTableData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>贴上简易版本的代码，依旧使用mixin的方法，在组件中导入后，配置resource请求地址和params请求参数，绑定tableData为表格数据，下拉时请求下一页数据。<br>在组件中也可以通过调用<code>queryTableData</code>方法刷新表格。</p>
<blockquote>
<p>上面提到了弃用了better-scroll，这里自己写了一个<code>touchend</code>方法来控制刷新表格</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">touchStart (ev) &#123;</span><br><span class="line">  <span class="keyword">this</span>.touchStartSite = ev.touches[<span class="number">0</span>].pageY;</span><br><span class="line">&#125;,</span><br><span class="line">touchEnd (ev) &#123;</span><br><span class="line">  <span class="keyword">let</span> endSite = ev.changedTouches[<span class="number">0</span>].pageY;</span><br><span class="line">  <span class="keyword">let</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'el-table__body-wrapper'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'el-table__body'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (wrapper.scrollTop === (content.clientHeight - wrapper.clientHeight) &amp;&amp; (<span class="keyword">this</span>.touchStartSite - endSite) &gt; <span class="number">50</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.onPullDown();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>在<code>el-table</code>绑定事件，判断触摸滑动的位移等于内容差且滑动的垂直距离大于50px，前者是为了判断是否滑到底，后者是为了限制滑动最短距离，判断完成后加载下一页。</p>
<blockquote>
<p>还有一种封装方式，将表格作为一个组件，内容作为slot插入进去，这样在将配置项传入组件之后就可以使用了，在表格配件较多情况下，感觉这种方法相比mixins更方便。</p>
</blockquote>
<h3 id="Sass预设"><a href="#Sass预设" class="headerlink" title="Sass预设"></a>Sass预设</h3><p>相信用过bootstrap4的都会对它的样式预设印象深刻，特别是盒模型的样式预设，对于我这种习惯使用的人来说，已经是爱不释手了，为了减少项目打包的负担，没有使用bootstrap，就自己使用sass写了一套，发布成了一个npm包<a href="https://github.com/gitliyu/ly-sass" target="_blank" rel="noopener">‘ly-sass’</a>，部分代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// margin padding setting</span></span><br><span class="line">$directions: (l: left, <span class="attr">r</span>: right, <span class="attr">t</span>: top, <span class="attr">b</span>: bottom);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">for</span> $index <span class="keyword">from</span> <span class="number">0</span> to <span class="number">10</span> &#123;</span><br><span class="line">  .p-#&#123;$index&#125; &#123;</span><br><span class="line">    padding: $index * <span class="number">0.5</span>rem !important;</span><br><span class="line">  &#125;</span><br><span class="line">  .m-#&#123;$index&#125; &#123;</span><br><span class="line">    margin: $index * <span class="number">0.5</span>rem !important;</span><br><span class="line">  &#125;</span><br><span class="line">  @each $key,$value <span class="keyword">in</span> $directions &#123;</span><br><span class="line">    .p#&#123;$key&#125;-#&#123;$index&#125; &#123;</span><br><span class="line">      padding-#&#123;$value&#125;: $index * 0.5rem !important;</span><br><span class="line">    &#125;</span><br><span class="line">    .m#&#123;$key&#125;-#&#123;$index&#125; &#123;</span><br><span class="line">      margin-#&#123;$value&#125;: $index * 0.5rem !important;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">for</span> $index <span class="keyword">from</span> <span class="number">-1</span> to <span class="number">101</span> &#123;</span><br><span class="line">  .w-#&#123;$index&#125;&#123;</span><br><span class="line">    width: #&#123;$index&#125;% !important;</span><br><span class="line">  &#125;</span><br><span class="line">  .h-#&#123;$index&#125;&#123;</span><br><span class="line">    height: #&#123;$index&#125;% !important;</span><br><span class="line">  &#125;</span><br><span class="line">  .font-#&#123;$index&#125;&#123;</span><br><span class="line">    font-size: #&#123;$index&#125;px !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用时类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;m-0 pt-2 ml-1&apos;&gt;&lt;/div&gt;  // margin: 0; padding-top: 1rem; margin-left: 0.5rem;</span><br><span class="line">&lt;div class=&apos;w-50 h-100 font-20&apos;&gt;&lt;/div&gt;  // width: 50%; height: 100%; font-size: 20px;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这只是其中比较有代表性的，具体的代码就不贴了，其他的预设都类似这种写法。</p>
</blockquote>
<h3 id="读卡器"><a href="#读卡器" class="headerlink" title="读卡器"></a>读卡器</h3><p>由于项目需要刷卡登录，刷卡识别会员卡等功能，所以外连了一个读卡器跟扫码枪，而且是功能最基础的那种，甚至没有任何的事件或者回调。。在读卡的时候会在光标处打出识别的卡号。<br>想要用这么个玩意实现刷卡登录。。。em。。苦思冥想好几天之后，发现这个读卡器是可以呗keydown事件捕获的，那么问题就在于，如何去区分扫码和正常的按键盘，最后的实现代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> cardReader = &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      keyList: [],		<span class="comment">// 记录字符集</span></span><br><span class="line">      keyTime: <span class="literal">null</span>,	<span class="comment">// 记录上次键盘时间</span></span><br><span class="line">      card_sn: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.initCardReader();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initCardReader () &#123;</span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">      <span class="built_in">window</span>.onkeydown = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.timeStamp - vm.keyTime &gt; <span class="number">50</span>) &#123;</span><br><span class="line">          vm.keyList = [];</span><br><span class="line">          vm.card_sn = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vm.keyTime = e.timeStamp;</span><br><span class="line">        vm.keyList.push(e.key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    keyList: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (val.length === <span class="number">10</span>) &#123;	<span class="comment">// 识别10位会员号之后执行回调</span></span><br><span class="line">        <span class="keyword">this</span>.card_sn = val.join(<span class="string">''</span>);	</span><br><span class="line">        <span class="keyword">this</span>.readerCallback();		</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>通过比较两次keydown事件的时间差，如果相隔时间超过50毫秒，清空keyList数组，在长度达到10位时(会员卡号为10位)，执行回调<code>readerCallback</code>。</p>
<blockquote>
<p>由于用mixin的方式引入<code>cardReader</code>方法，在使用时发现当同一页面中有不同组件(dialog)中加载方法时，由于键盘事件是注册在window上的，会导致多个组件中只有一个能用，解决方式是在每个dialog弹出时重新调用<code>initCardReader</code></p>
</blockquote>
<h3 id="Iconfont图标"><a href="#Iconfont图标" class="headerlink" title="Iconfont图标"></a>Iconfont图标</h3><p>很早就听说过<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">‘Iconfont’</a>的大名，这次自己当家作主的项目，终于有了应用的机会，在实际开发一段时间之后，觉得这个东西是真的好用啊，不需要导入更多图标库，不需要再为了找图标浪费时间，话不多说，下面来介绍一下这个犀利的图标库吧。<br><img src="/img/iconfont1.png" alt="&#39;搜索图标&#39;"><br>在打开Iconfont网站之后，登录用户名(github账号即可)，查询到你想要的图标，点击加入购物车，<br><img src="/img/iconfont2.png" alt="&#39;添加项目&#39;"><br>然后点右上角的购物车打开，创建项目并添加图标到项目中，然后进入到项目页面<br><img src="/img/iconfont3.png" alt="&#39;添加项目&#39;"><br>在这里就可以看到项目图标库代码以及图标的代码，复制上面的代码，和iconfont的字体样式一同加入到项目中，这里列举三种使用方法</p>
<h4 id="在线字体库"><a href="#在线字体库" class="headerlink" title="在线字体库"></a>在线字体库</h4><p>直接复制图标库代码使用，项目开发过程中方便修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: iconfont;</span><br><span class="line">  src: url(&apos;//at.alicdn.com/t/font_592912_662zcis5mcu6usor.eot&apos;);	/* IE9*/</span><br><span class="line">  src: url(&apos;//at.alicdn.com/t/font_592912_662zcis5mcu6usor.eot?#iefix&apos;)   /* IE6-IE8 */format(&apos;embedded-opentype&apos;),</span><br><span class="line">  url(&apos;//at.alicdn.com/t/font_592912_662zcis5mcu6usor.woff&apos;) format(&apos;woff&apos;),  /* chrome, firefox*/</span><br><span class="line">  url(&apos;//at.alicdn.com/t/font_592912_662zcis5mcu6usor.ttf&apos;) format(&apos;truetype&apos;), /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/</span><br><span class="line">  url(&apos;//at.alicdn.com/t/font_592912_662zcis5mcu6usor.svg#iconfont&apos;) format(&apos;svg&apos;); /* iOS 4.1- */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.iconfont&#123;</span><br><span class="line">  font-family: iconfont !important;</span><br><span class="line">  font-size:16px;</span><br><span class="line">  font-style:normal;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -webkit-text-stroke-width: 0.2px;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="引用css文件"><a href="#引用css文件" class="headerlink" title="引用css文件"></a>引用css文件</h4><p>在项目代码的<code>Font Class</code>选项中可以查看路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;at.alicdn.com/t/font_611773_gnzu317r1jvvaemi.css&quot;&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="引入图标文件"><a href="#引入图标文件" class="headerlink" title="引入图标文件"></a>引入图标文件</h4><p>在项目图标库定义完成之后，可以直接使用项目代码中的字体地址下载字体文件，引入使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: iconfont;</span><br><span class="line">  src: url(assets/font/iconfont.ttf)	// electron只需要兼容chrome即可</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>对于使用webpack的项目，在打包之后会存在字体文件缺失的情况，需要下载字体文件并且按照webpack的引用规则引入文件。</p>
</blockquote>
<p>ok，这样就完成iconfont的设置了，复制上面的图标代码使用就可以了<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class="iconfont"&gt;&amp;#xe649;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>每次添加新图标都需要更新图标库代码</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 项目实例 </category>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> electron </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用webAPI预览上传图片和调用摄像头]]></title>
      <url>/2018/03/01/webapi/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近有遇到这样的需求，在开发过程中也踩了很多的坑，所以记录一下自己最后找到的解决方法。<br><a id="more"></a></p>
<h4 id="图片上传预览"><a href="#图片上传预览" class="headerlink" title="图片上传预览"></a>图片上传预览</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;使用webAPI接口的<code>FileReader</code>方法来读取input file上传的图片信息。<br>&nbsp;&nbsp;&nbsp;&nbsp;FileReader对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;其中File对象可以是来自用户在一个input元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。</p>
<ul>
<li>FileReader()<br>构造函数方法，返回一个新构造的FileReader对象。</li>
<li>FileReader.readAsDataURL()<br>开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容。</li>
<li>FileReader.onload<br>处理load事件。该事件在读取操作完成时触发。</li>
</ul>
<p>实现代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;input id=<span class="string">"fileBtn"</span> type=<span class="string">"file"</span> onchange=<span class="string">"upload();"</span> accept=<span class="string">"image/*"</span>/&gt;</span><br><span class="line">&lt;img src=<span class="string">""</span> id=<span class="string">"img"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> upload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.querySelector(<span class="string">'#fileBtn'</span>),</span><br><span class="line">        img = <span class="built_in">document</span>.querySelector(<span class="string">'#img'</span>),</span><br><span class="line">        reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    file = file.files[<span class="number">0</span>];</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        img.setAttribute(<span class="string">"src"</span>, e.target.result);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="调用摄像头"><a href="#调用摄像头" class="headerlink" title="调用摄像头"></a>调用摄像头</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在做这个功能时，最早查到的是<code>Navigator.getUserMedia()</code>这个方法，而且对于这个方法介绍的也比较多，但是在查询MDN文档后发现，这个特性已经从Web标准中删除，但是目前仍有一些浏览器支持，而新版的API已经修改为<code>MediaDevices.getUserMedia()</code>方法，这就需要我们在使用的时候注意浏览器兼容性。<br>&nbsp;&nbsp;&nbsp;&nbsp;MediaDevices.getUserMedia()方法提示用户允许使用一个视频和/或一个音频输入设备，例如相机或屏幕共享和/或麦克风。如果用户给予许可，就返回一个Promise 对象，MediaStream对象作为此Promise对象的Resolved状态的回调函数参数，相应的，如果用户拒绝了许可，或者没有媒体可用的情况下，PermissionDeniedError 或者NotFoundError作为此Promise的Rejected状态的回调函数参数。<br>因此在使用时，我们需要在考虑兼容性的情况下对方法进行修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.mediaDevices === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    navigator.mediaDevices = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (navigator.mediaDevices.getUserMedia === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    navigator.mediaDevices.getUserMedia = <span class="function"><span class="keyword">function</span>(<span class="params">constraints</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;</span><br><span class="line">        <span class="keyword">if</span> (!getUserMedia) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'getUserMedia is not implemented in this browser'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            getUserMedia.call(navigator, constraints, resolve, reject);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.URL = (<span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL || <span class="built_in">window</span>.mozURL || <span class="built_in">window</span>.msURL);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>使用getUserMedia()必须保证安全的环境，也就是本地，localhost或者https协议下才可以运行，http无法使用</p>
</blockquote>
<p>调用方法实现功能:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;video src=<span class="string">""</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">successFunc</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">'video'</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"srcObject"</span> <span class="keyword">in</span> video) &#123;</span><br><span class="line">        video.srcObject = stream</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        video.src = <span class="built_in">window</span>.URL &amp;&amp; <span class="built_in">window</span>.URL.createObjectURL(stream) || stream</span><br><span class="line">    &#125;</span><br><span class="line">    video.play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorFunc</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    alert(err.name);</span><br><span class="line">&#125;</span><br><span class="line">navigator.getUserMedia(&#123;</span><br><span class="line">    audio: <span class="literal">false</span>,</span><br><span class="line">    video: <span class="literal">true</span>,</span><br><span class="line">&#125;, successFunc, errorFunc);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> webAPI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel+Vue开发环境搭建]]></title>
      <url>/2018/02/08/laravel-vue/</url>
      <content type="html"><![CDATA[<p>最近开始学习Laravel的开发，简单的记录一下Laravel集成Vue开发环境的搭建过程。<br><a id="more"></a><br>需要准备</p>
<ul>
<li>php &gt; 7.0</li>
<li>composer</li>
<li>node &gt; 6.0</li>
<li>npm &gt; 3.0</li>
</ul>
<h3 id="安装Laravel"><a href="#安装Laravel" class="headerlink" title="安装Laravel"></a>安装Laravel</h3><p>方法参照<a href="https://d.laravel-china.org/docs/5.5/installation" target="_blank" rel="noopener">‘Laravel中文文档’</a>;</p>
<p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist laravel/laravel blog //blog为项目名</span><br></pre></td></tr></table></figure></p>
<p>安装完成之后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">php artisan serve</span><br></pre></td></tr></table></figure></p>
<p>启动本地开发服务器，默认是8000端口，访问<code>localhost:8000</code>或<code>127.0.0.1:8000</code></p>
<h3 id="安装Vue"><a href="#安装Vue" class="headerlink" title="安装Vue"></a>安装Vue</h3><p>package.json中自带的有vue和bootstrap-sass等的配置，首先需要去安装它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install vue-router –save-dev</span><br></pre></td></tr></table></figure></p>
<h3 id="配置Vue"><a href="#配置Vue" class="headerlink" title="配置Vue"></a>配置Vue</h3><p>在<code>/resources/assets/js</code>下新建Vue的挂载点<code>App.vue</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	   &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>修改<code>app.js</code>，与Vue项目中的<code>main.js</code>类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;./bootstrap&apos;);</span><br><span class="line"></span><br><span class="line">window.Vue = require(&apos;vue&apos;);</span><br><span class="line"></span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App.vue&apos;</span><br><span class="line">import router from &apos;./router&apos;</span><br><span class="line"></span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    router,</span><br><span class="line">    components: &#123; App &#125;,</span><br><span class="line">    template: &apos;&lt;App/&gt;&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>新建路由文件，在js文件夹下新建router文件夹，配置路由信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        //……</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>在<code>resources/views</code>目录下添加<code>index.blade.php</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;&#123;&#123; app()-&gt;getLocale() &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">        &lt;title&gt;Laravel&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; mix(&apos;js/manifest.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; mix(&apos;js/vendor.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; mix(&apos;js/app.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>在<code>resources/routes/web.php</code>中修改路由配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&apos;/&apos;, function () &#123;</span><br><span class="line">    return view(&apos;idnex&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在<code>webpack.mix.js</code>中修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mix.js(&apos;resources/assets/js/app.js&apos;, &apos;public/js&apos;)</span><br><span class="line">   .extract([&apos;vue&apos;, &quot;vue-router&quot;, &quot;axios&quot;])</span><br><span class="line">   .sass(&apos;resources/assets/sass/app.scss&apos;, &apos;public/css&apos;);</span><br></pre></td></tr></table></figure></p>
<p>配置完成后执行<code>npm run watch</code>即可，配置服务器指向<code>public/index.php</code>访问</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> php </tag>
            
            <tag> vue </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JQuery pjax技术简介与示例]]></title>
      <url>/2018/01/22/pjax/</url>
      <content type="html"><![CDATA[<p>pjax是jquery的一个插件，它使用ajax和pushState两个技术改善用户的网页浏览体验。<br>简单来说，它的作用就是可以在实现局部刷新的同时，记录浏览历史，能使用浏览器前进后退功能，浏览器的url也会跟随内容变化。<br><a id="more"></a></p>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>用户点击链接时，pjax拦截了a标签的默认跳转动作，使用发送ajax请求，之后将服务器返回的HTML片段插入更新区域，页面填充完毕后，使用pushState更新当前的URL。</p>
<h4 id="pushState"><a href="#pushState" class="headerlink" title="pushState"></a>pushState</h4><p>HTML5在History里增加了pushState方法，这个方法会将当前的url添加到历史记录中，然后修改当前url为新url。当然这个方法只会修改地址栏的Url显示，但并不会发出任何请求。</p>
<p>pushState的使用方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(state, title, url)</span><br></pre></td></tr></table></figure></p>
<ul>
<li>state: 可以放任意你想放的数据，它将附加到新url上，作为该页面信息的一个补充。</li>
<li>title: 页面标题，目前浏览器支持不好。</li>
<li>url: 新url，也就是你要显示在地址栏上的url。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.replaceState(state, title, url)</span><br></pre></td></tr></table></figure>
<p>replaceState方法与pushState大同小异，区别只在于pushState会将当前url添加到历史记录，之后再修改url，而replaceState只是修改state和url，不添加历史记录。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate</span><br></pre></td></tr></table></figure></p>
<p>一般来说，每当url变动时&amp;用户点击浏览器历史前进后退按钮 ，popstate事件都会被触发。但若是调用pushState来修改url，该事件则不会触发，因此，我们可以把它用作浏览器的前进后退事件。</p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>点击pjax链接<br><img src="/img/pjax-click.png" alt=""><br>触发浏览器前进后退<br><img src="/img/pjax-browser.png" alt=""><br>根据pjax的生命周期，可以在不同时间触发需要的时间，官方提供的可绑定的event函数如下：<br><img src="/img/pjax-event.png" alt=""><br>以添加loading为例，在pjax开始发送和完成之后执行，实现的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:send'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#loading'</span>).show()</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:complete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#loading'</span>).hide()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h4 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h4><p>上文提到过，pjax通常使用链接或者按钮来触发，通过使用ajax请求得到html片段，首先来写一个demo来简单的应用pjax。<br>html<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"container"</span>&gt;jQuery.pjax分页&lt;/div&gt; </span><br><span class="line">&lt;ul class="pagination"&gt; </span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">"data.php?page=1"</span>&gt;<span class="number">1</span>&lt;/a&gt;&lt;/li&gt; </span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">"data.php?page=2"</span>&gt;<span class="number">2</span>&lt;/a&gt;&lt;/li&gt; </span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">"data.php?page=3"</span>&gt;<span class="number">3</span>&lt;/a&gt;&lt;/li&gt; </span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">"data.php?page=4"</span>&gt;<span class="number">4</span>&lt;/a&gt;&lt;/li&gt; </span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">"data.php?page=5"</span>&gt;<span class="number">5</span>&lt;/a&gt;&lt;/li&gt; </span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p>
<p>js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).pjax(<span class="string">'a'</span>, <span class="string">'#container'</span>);</span><br></pre></td></tr></table></figure></p>
<p>php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$page = $_GET[<span class="string">'page'</span>];</span><br><span class="line"><span class="keyword">echo</span> $page;</span><br></pre></td></tr></table></figure></p>
<p>这样就可以实现，在点击a链接时，内容区显示对应的页数，并且url会修改为对应的href。</p>
<blockquote>
<p>因为使用了ajax，所以需要配置服务器打开</p>
</blockquote>
<p>上面的demo中使用了pjax的简单应用，接下来介绍一下详细的配置项与使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).pjax(selector, [container], options)</span><br></pre></td></tr></table></figure></p>
<ul>
<li>selector 字符串，点击的对象选择器</li>
<li>container 字符串，选择唯一标识pjax容器。</li>
<li>options 下面所描述的一个对象。</li>
</ul>
<p><img src="/img/pjax-option.png" alt=""><br>举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pjaxoption = &#123;</span><br><span class="line">    timeout: <span class="number">10000</span>,</span><br><span class="line">    container: <span class="string">'.main_content'</span>, <span class="comment">/* 内容替换的容器 */</span></span><br><span class="line">    cache: <span class="literal">false</span>,  <span class="comment">/* 是否使用缓存 */</span></span><br><span class="line">    storage: <span class="literal">false</span>,  <span class="comment">/* 是否使用本地存储 */</span></span><br><span class="line">    titleSuffix: <span class="string">''</span> <span class="comment">/* 标题后缀 */</span></span><br><span class="line">&#125;;</span><br><span class="line">$(<span class="built_in">document</span>).pjax(<span class="string">'a'</span>, <span class="string">'#content'</span>, pjaxoption)</span><br></pre></td></tr></table></figure></p>
<p>在配置项初始完成后还可以进行修改:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.pjax.defaults.timeout = <span class="number">1200</span></span><br></pre></td></tr></table></figure></p>
<p>除此之外，pjax还有一些extend的方法来触发。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$.pjax.click</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'a[data-pjax]'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> container = $(<span class="keyword">this</span>).closest(<span class="string">'[data-pjax-container]'</span>)</span><br><span class="line">    <span class="keyword">var</span> containerSelector = <span class="string">'#'</span> + container.id</span><br><span class="line">    $.pjax.click(event, &#123;<span class="attr">container</span>: containerSelector&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//$.pjax.submit</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'submit'</span>, <span class="string">'form[data-pjax]'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $.pjax.submit(event, <span class="string">'#pjax-container'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//$.pjax.reload</span></span><br><span class="line">$.pjax.reload(<span class="string">'#pjax-container'</span>, options)</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> pjax </tag>
            
            <tag> pushState </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)前端构建工具的比较]]></title>
      <url>/2018/01/18/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>转自<a href="https://survivejs.com/webpack/appendices/comparison/" target="_blank" rel="noopener">‘原文地址’</a>,<a href="https://www.jianshu.com/p/29eb7ab47c74" target="_blank" rel="noopener">‘译者地址’</a></p>
<p>在之前，人们习惯将脚本写在一起。 但时代已经改变，现在将JavaScript代码分开来可能是一个复杂的工作。 随着单页应用程序（SPA）的兴起，这个问题已经升级。他们倾向于依靠一些有用的系统（来解决这个问题）<br><a id="more"></a><br>出于这个原因，有多种策略来加载它们。您可以立即加载它们，或者考虑需要它们时加载。Webpack支持许多这样的策略。</p>
<p>Node和npm的流行，给它的包管理器提供了更多的使用环境。在npm普及之前，很难使用依赖项。有一段时间，人们开发出了前端特定的包管理器，但npm最终赢得了胜利。现在依赖管理比以前更容易了，尽管还需要克服一些挑战。</p>
<h4 id="任务运行程序与打包"><a href="#任务运行程序与打包" class="headerlink" title="任务运行程序与打包"></a>任务运行程序与打包</h4><p>历史上，已经有很多构建工具。 Make可能是最着名的，它仍然是一个可行的选择。 专门的任务运行程序，如Grunt和Gulp，是专门为JavaScript开发人员创建的。 通过npm提供的插件使得任务运行程序都强大而且可扩展。 甚至可以使用npm脚本作为任务运行程序。 这很常见，特别是webpack。</p>
<p>任务运行程序是高水平的伟大工具。 它们允许您以跨平台方式执行操作。 当您需要将各种资源拼接在一起并生产时，问题就会开始。 出于此原因，存在资源整合程序，如Browserify，Brunch或webpack。</p>
<p>有一段时间，<a href="http://requirejs.org/" target="_blank" rel="noopener">‘RequireJS’</a>很受欢迎。 它的核心是提供一个异步模块的方法并建立在此之上。 AMD的格式在后面将会有更详细的介绍。 幸运的是，这些标准已经赶上了，而且RequireJS似乎是一个很好的启发。</p>
<h4 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h4><p>就像1977年最初发布的那样，<a href="https://en.wikipedia.org/wiki/Make_%28software%29" target="_blank" rel="noopener">‘Make’</a>回来了。尽管它是一个旧工具，但它仍然是相关的。 Make允许您为各种目的编写单独的任务。 例如，您可以有不同的任务来创建生产构建，压缩JavaScript或运行测试。 您可以在许多其他工具中找到相同的方法。</p>
<p>尽管Make主要用于C项目，但它并不以任何方式与C绑定。 James Coglan详细讨论了<a href="https://blog.jcoglan.com/2014/02/05/building-javascript-projects-with-make/" target="_blank" rel="noopener">‘如何在JavaScript中使用Mark’</a>。 看一下下面的詹姆斯帖子里介绍的压缩代码的方法：</p>
<p>Makefile</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PATH  := node_modules/.bin:$(PATH)</span><br><span class="line">SHELL := <span class="regexp">/bin/</span>bash</span><br><span class="line"> </span><br><span class="line">source_files := $(wildcard lib<span class="comment">/*.coffee)</span></span><br><span class="line"><span class="comment">build_files  := $(source_files:%.coffee=build/%.js)</span></span><br><span class="line"><span class="comment">app_bundle   := build/app.js</span></span><br><span class="line"><span class="comment">spec_coffee  := $(wildcard spec/*.coffee)</span></span><br><span class="line"><span class="comment">spec_js      := $(spec_coffee:%.coffee=build/%.js)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">libraries    := vendor/jquery.js</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">.PHONY: all clean test</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">all: $(app_bundle)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">build/%.js: %.coffee</span></span><br><span class="line"><span class="comment">    coffee -co $(dir $@) $&lt;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">$(app_bundle): $(libraries) $(build_files)</span></span><br><span class="line"><span class="comment">    uglifyjs -cmo $@ $^</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">test: $(app_bundle) $(spec_js)</span></span><br><span class="line"><span class="comment">    phantomjs phantom.js</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">clean:</span></span><br><span class="line"><span class="comment">    rm -rf build</span></span><br></pre></td></tr></table></figure>
<p>使用Make，您可以使用Make-specific语法和终端命令为您的任务建模，使其可以与webpack集成。</p>
<h4 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h4><p><a href="http://requirejs.org/" target="_blank" rel="noopener">‘RequireJS’</a>可能是第一个成为真正受欢迎的脚本加载程序。 它首先正确地引入了模块化JavaScript。 其最大的吸引力是AMD。 它引入了一个定义包装器：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'./MyModule.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">MyModule</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 模块入口</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">define([<span class="string">'./MyModule.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">MyModule</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;, <span class="comment">// 导出为模块函数</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>顺便说一下，可以在包装器中使用require：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'require'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> MyModule = <span class="built_in">require</span>(<span class="string">'./MyModule.js'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>后一种方法更简洁一点。 但您仍然会遇到多余的代码。 ES6等标准解决了这个问题。<br>Jamund Ferguson撰写了一篇关于<a href="https://link.jianshu.com/?t=https%3A%2F%2Fgist.github.com%2Fxjamundx%2Fb1c800e9282e16a6a18e" target="_blank" rel="noopener">‘如何从RequireJS移植到webpack’</a>的优秀博客系列。</p>
<blockquote>
<p>之前有写过关于Require的博客<a href="/2017/08/14/requirejs/">‘RequireJS的使用’</a></p>
</blockquote>
<h4 id="npm脚本作为自动化构建工具"><a href="#npm脚本作为自动化构建工具" class="headerlink" title="npm脚本作为自动化构建工具"></a>npm脚本作为自动化构建工具</h4><p>即使npm CLI（命令行界面）并非主要用于作为任务运行的程序，由于有package.json的脚本字段是之成为可能。 考虑下面的例子：</p>
<p>package.json</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"stats"</span>: <span class="string">"webpack --env production --json &gt; stats.json"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack-dev-server --env development"</span>,</span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --env production"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这些脚本可以使用npm run列出，然后使用npm run script执行。 您还可以使用诸如test：watch这样的约定命名空间。 这种方法可以使它保持跨平台。</p>
<p>取代使用rm -rf，您可能更希望使用诸如rimraf等实用程序。 在这里可以调用其他自动化构建工具来隐藏你正在使用的具体细节。 这样，您可以在保持界面相同的情况下使用重构工具。</p>
<h4 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h4><p><img src="/img/grunt.png" alt=""><br><a href="https://gruntjs.com/" target="_blank" rel="noopener">‘Grunt’</a>在前端开发人员中是最受欢迎的。它的插件架构有助于它的流行，插件本身通常是复杂的，因此，当配置增加时，很难理解到底发生了什么。<br>以下是<a href="https://gruntjs.com/sample-gruntfile" target="_blank" rel="noopener">‘Grunt文档的示例’</a>。 在此配置中，您定义一个linting和一个观察任务。 当watch任务运行时，它也会触发lint任务。 这样，当您运行Grunt时，您可以在编辑源代码时在终端中实时发出警告。</p>
<p>Gruntfile.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">grunt</span>) =&gt;</span> &#123;</span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    lint: &#123;</span><br><span class="line">      files: [<span class="string">'Gruntfile.js'</span>, <span class="string">'src/**/*.js'</span>, <span class="string">'test/**/*.js'</span>],</span><br><span class="line">      options: &#123;</span><br><span class="line">        globals: &#123;</span><br><span class="line">          jQuery: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      files: [<span class="string">'&lt;%= lint.files %&gt;'</span>],</span><br><span class="line">      tasks: [<span class="string">'lint'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</span><br><span class="line"> </span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'lint'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在实践中，您将有许多小的任务用于特定目的，例如构建项目。 Grunt有用的一个重要部分是它隐藏了大量的细节。</p>
<p>从远来说，这可能会有问题。从Grunt的构建过程，你很难理解它引擎工作的具体情况。</p>
<blockquote>
<p><a href="https://www.npmjs.com/package/grunt-webpack" target="_blank" rel="noopener">‘grunt-webpack’</a>插件允许您在Grunt环境中使用webpack，同时将使用等级提升到Webpack。</p>
</blockquote>
<h4 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h4><p><img src="/img/gulp.png" alt=""><br><a href="https://gulpjs.com/" target="_blank" rel="noopener">‘Gulp’</a>采取不同的方法。 您不需要依赖每个插件的配置，而是处理实际的代码。 Gulp建立在管道概念之上。 如果你熟悉Unix，这里也是一样的。 您需要遵循以下概念：</p>
<ul>
<li>来源匹配文件。</li>
<li>对来源执行操作的过滤器（例如，转换为JavaScript）</li>
<li>接收模块库（例如，您的构建目录）在哪里管理构建结果。</li>
</ul>
<p>这是一个示例的Gulpfile，可以让您更好地了解从项目的README中获取的方法。 它被缩写为一个接口：</p>
<p>Gulpfile.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> coffee = <span class="built_in">require</span>(<span class="string">'gulp-coffee'</span>);</span><br><span class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">const</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> paths = &#123;</span><br><span class="line">  scripts: [<span class="string">'client/js/**/*.coffee'</span>, <span class="string">'!client/external/**/*.coffee'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 并不是所有的任务都需要使用流</span></span><br><span class="line"><span class="comment">// 一个gulpfile是另一个节点程序</span></span><br><span class="line"><span class="comment">// 你也可以在npm上使用所有的软件包</span></span><br><span class="line">gulp.task(</span><br><span class="line">  <span class="string">'clean'</span>,</span><br><span class="line">  del.bind(<span class="literal">null</span>, [<span class="string">'build'</span>]</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">gulp.task(</span><br><span class="line">  <span class="string">'scripts'</span>,</span><br><span class="line">  [<span class="string">'clean'</span>],</span><br><span class="line">  () =&gt; (</span><br><span class="line">    <span class="comment">// 压缩和复制所有的JavaScript(除了供应商脚本)</span></span><br><span class="line">    <span class="comment">// 源代码一路下来</span></span><br><span class="line">    gulp.src(paths.scripts)</span><br><span class="line">      <span class="comment">// 管道内</span></span><br><span class="line">      .pipe(sourcemaps.init())</span><br><span class="line">        .pipe(coffee())</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(concat(<span class="string">'all.min.js'</span>))</span><br><span class="line">      .pipe(sourcemaps.write())</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'build/js'</span>))</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件更改时重新运行任务</span></span><br><span class="line">gulp.task(</span><br><span class="line">  <span class="string">'watch'</span>,</span><br><span class="line">  gulp.watch.bind(<span class="literal">null</span>, paths.scripts, [<span class="string">'scripts'</span>])</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 默认任务（从CLI运行`gulp`时调用）</span></span><br><span class="line">gulp.task(</span><br><span class="line">  <span class="string">'default'</span>,</span><br><span class="line">  [<span class="string">'watch'</span>, <span class="string">'scripts'</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>鉴于配置是代码，如果遇到麻烦，您总是可以将其删除。 您可以将现有的节点包作为Gulp插件，等等。 与Grunt相比，您可以更清楚地了解发生了什么。 尽管如此，你仍然最终写了很多模板作为闲时任务。 那就是更新的方法。</p>
<blockquote>
<p><a href="https://www.npmjs.com/package/webpack-stream" target="_blank" rel="noopener">‘webpack-stream’</a>允许您在Gulp环境中使用webpack。</p>
<p><a href="https://www.npmjs.com/package/fly" target="_blank" rel="noopener">‘Fly’</a>是与Gulp类似的工具。 它依赖于ES6发生器。</p>
</blockquote>
<h4 id="Browserify"><a href="#Browserify" class="headerlink" title="Browserify"></a>Browserify</h4><p><img src="/img/browserify.png" alt=""><br>处理JavaScript模块一直是一个问题。 js语言本身没有模块的概念，直到ES6。 Ergo，这个语言在90年代被用在浏览器环境中。 已经提出了包括AMD在内的各种解决方案。<br><a href="http://browserify.org/" target="_blank" rel="noopener">‘Browserify’</a>是模块问题的一个解决方案。 它可以将CommonJS模块捆绑在一起。 您可以将其与Gulp挂钩，您可以找到较小的转换工具，使您可以超越基本用法。 例如，watchify提供了一个在开发空闲的工作期间为您创建捆绑包的文件监视器。</p>
<p>Browserify生态系统由很多小模块组成。 这样，Browserify就符合Unix的理念。 Browserify比webpack更容易采用，实际上它是一个很好的替代品。</p>
<blockquote>
<p><a href="https://www.npmjs.com/package/splittable" target="_blank" rel="noopener">‘Splittable’</a>是一个Browserify包装器，允许代码分割，支持ES6开箱即用，Tree shaking等等。</p>
</blockquote>
<h4 id="JSPM"><a href="#JSPM" class="headerlink" title="JSPM"></a>JSPM</h4><p><img src="/img/jspm.png" alt=""><br>使用<a href="https://jspm.io/" target="_blank" rel="noopener">‘JSPM’</a>与以前的工具截然不同。 它附带了一个自己的命令行工具，用于将新的软件包安装到项目中，创建一个生产包，等等。 它支持<a href="https://github.com/systemjs/systemjs#plugins" target="_blank" rel="noopener">‘SystemJS插件’</a>，可以将各种格式加载到项目中。</p>
<h4 id="Brunch"><a href="#Brunch" class="headerlink" title="Brunch"></a>Brunch</h4><p><img src="/img/brunch.png" alt=""><br>与Gulp相比，Brunch在更高层次的抽象上运作。 它使用类似于webpack的声明方法。 以示例为例，您可以考虑从Brunch网站改编以下配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  files: &#123;</span><br><span class="line">    javascripts: &#123;</span><br><span class="line">      joinTo: &#123;</span><br><span class="line">        <span class="string">'vendor.js'</span>: <span class="regexp">/^(?!app)/</span>,</span><br><span class="line">        <span class="string">'app.js'</span>: <span class="regexp">/^app/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    stylesheets: &#123;</span><br><span class="line">      joinTo: <span class="string">'app.css'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    babel: &#123;</span><br><span class="line">      presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    postcss: &#123;</span><br><span class="line">      processors: [<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>Brunch包括像brunch new, brunch watch –server, and brunch build –production。 它包含了很多创造性的功能，可以使用插件扩展。</p>
<h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><p><img src="/img/webpack.png" alt=""><br>您可以说<a href="https://webpack.js.org/" target="_blank" rel="noopener">‘Webpack’</a>采用比Browserify更单一的方法。 Browserify由多个小工具组成，而Webpack提供了一个核心，它提供了很多创造性的功能。<br>Webpack核心可以使用特定的加载程序和插件进行扩展。 它可以控制如何解决模块，使您可以调整您的构建以匹配特定情况和解决无法正常运行的软件包。</p>
<p>与其他工具相比，Webpack具有初始复杂性，但通过其广泛的功能集成可以弥补这一点。 这是一个需要耐心的高级工具。 但是一旦了解了背后的基本思路，webpack就变得很强大。</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>历史上已经有很多JavaScript的构建工具。 每个人都试图以自己的方式解决一个特定的问题。 这些标准已经开始迎头赶上，基本语义的要求也更少了。 相反，工具可以在更高层次上竞争，并推动更好的用户体验。 通常，您可以一起使用几个单独的解决方案。</p>
<p>总的来说：</p>
<ul>
<li>自动化构建工具和打包工具解决不同的问题。 您可以通过两者实现类似的结果，但通常最好将它们一起使用来相互补充。</li>
<li>较早的工具（如Make或RequireJS）仍然具有影响力，即使它们在前端开发中不如以往那样受欢迎。</li>
<li>Bundinner如Browserify或webpack解决了一个重要的问题，并帮助您管理复杂的Web应用程序。</li>
<li>一些新兴技术从不同的角度解决问题。 有时候它们建立在其他工具之上，有时它们可以一起使用。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue项目中对EChart的应用]]></title>
      <url>/2018/01/16/echart/</url>
      <content type="html"><![CDATA[<p>EChart是目前一个应用较为广泛的图表工具，可高度个性化定制的数据可视化图表。<br>由于项目中需要用到的图表比较多，这里简单的总结一下，使用面向对象的方法，定义chart类，来初始化&amp;更新图表，不喜欢面向对象封装的，可以直接看最下面。<br><a id="more"></a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure>
<h4 id="定义chart类"><a href="#定义chart类" class="headerlink" title="定义chart类"></a>定义chart类</h4><p>创建chart.js，这里要注意的是，必须引入所有需要用到的echart模块，可以按需引入的模块列表见<a href="https://github.com/ecomfe/echarts/blob/master/index.js" target="_blank" rel="noopener">‘EChart’</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts/lib/echarts'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/chart/bar'</span>；</span><br><span class="line">…… </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Chart</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(el)&#123;</span><br><span class="line">        <span class="keyword">this</span>.chart = echarts.init(el);	<span class="comment">//初始化，传入dom对象</span></span><br><span class="line">        <span class="keyword">this</span>.options = &#123;&#125;;	<span class="comment">//配置项</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    show(op)&#123;</span><br><span class="line">        <span class="keyword">this</span>.options = _.assignIn(<span class="keyword">this</span>.defaults, op);</span><br><span class="line">        <span class="keyword">this</span>.chart.clear();</span><br><span class="line">        <span class="keyword">this</span>.chart.setOption(<span class="keyword">this</span>.options);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resize()&#123;	</span><br><span class="line">        <span class="keyword">let</span> chart = <span class="keyword">this</span>.chart;</span><br><span class="line">        <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            chart.resize();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>调用resize方法可以实现，随窗口改变刷新图表大小，在使用时需要保证图表自身是适应大小的，而不是固定的</p>
</blockquote>
<h4 id="应用chart创建图表类"><a href="#应用chart创建图表类" class="headerlink" title="应用chart创建图表类"></a>应用chart创建图表类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Chart <span class="keyword">from</span> <span class="string">'./Chart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoChart</span> <span class="keyword">extends</span> <span class="title">Chart</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(el, data) &#123;	<span class="comment">//dom对象和数据</span></span><br><span class="line">        <span class="keyword">super</span>(el);</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get defaults() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">//配置项options</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于配置项options，不过多介绍，详见<a href="http://echarts.baidu.com/option.html" target="_blank" rel="noopener">‘EChart配置项手册’</a></p>
</blockquote>
<h4 id="实例图表对象"><a href="#实例图表对象" class="headerlink" title="实例图表对象"></a>实例图表对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=<span class="string">"chartInstance"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"w-100 h-100"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">import</span> DemoChart <span class="keyword">from</span> <span class="string">'./DemoChart'</span>;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">    initChart()&#123;</span><br><span class="line">        <span class="keyword">let</span> instance = <span class="keyword">this</span>.$refs.chartInstance;</span><br><span class="line">        <span class="keyword">let</span> chart = <span class="keyword">new</span> DemoChart(instance, <span class="keyword">this</span>.data);</span><br><span class="line">        chart.show().resize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一来一个实例化的chart就可以成功显示了，当我们需要更多chart时，只需要继续创建图标类，更改配置项就可以方便的添加更多种类的chart了。</p>
<h4 id="简单粗暴的解决方法"><a href="#简单粗暴的解决方法" class="headerlink" title="简单粗暴的解决方法"></a>简单粗暴的解决方法</h4><p>什么？面向对象？EXM？好吧，我也发现了，这么写虽然封装的比较完善，但是对于需求较少的项目，显得太过复杂，接下来说一下直接用的方式吧。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">'echarts/lib/echarts'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/chart/line'</span></span><br><span class="line"><span class="comment">// 引入各种需要的模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initChart</span> (<span class="params">el, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> myChart = echarts.init(el);</span><br><span class="line">    setOption(myChart, data);</span><br><span class="line">    <span class="keyword">return</span> myChart;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setOption</span> (<span class="params">chart, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> options = getOptions(data);</span><br><span class="line">    chart.setOption(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOptions</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// options</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里将<code>init</code>方法跟<code>setOption</code>分开写，是为了在数据变化时重新设置<code>options</code>，当然，直接再次初始化chart也可以。<br><code>getOptions</code>方法用来整理数据，由于项目只用到了一个chart，所以我直接写了一起，需要使用较多次的话，传参或者从其他文件引入吧。<br>应用chart:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=<span class="string">"chartContent"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; initChart, setOption &#125; <span class="keyword">from</span> <span class="string">'../../assets/js/chart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.chart) &#123;</span><br><span class="line">    <span class="keyword">this</span>.chart = initChart(<span class="keyword">this</span>.$refs.chartContent, <span class="keyword">this</span>.report);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    setOption(<span class="keyword">this</span>.chart, <span class="keyword">this</span>.report)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> echart </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue实例:文本隐藏提示组件]]></title>
      <url>/2017/12/13/vue%E6%96%87%E6%9C%AC%E9%9A%90%E8%97%8F%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><p>模块内文本内容不超出时，正常显示，没有文本提示<br>模块内文本内容超出容器宽度时，隐藏超出文本，hover时显示所有文本信息<br><a id="more"></a></p>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol>
<li>文本的隐藏，使用css样式控制</li>
<li>文字提示使用Element UI的tooltip组件</li>
<li>问题在于，既然是用css控制的文字隐藏，那么如何在vue文件中进行判断，因为组件的使用场景不同，而且容器宽度一般都是适应屏幕，在不能使用字符串长度进行判断的情况下如何确定文本是否超出。</li>
</ol>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><ol>
<li><p>文本隐藏<br>单行的文本隐藏，可以很简单的使用css来实现，多行的文本隐藏，目前我已知的样式中，只支持webkit内核，如果需要考虑兼容性，单纯的css可能无法实现</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//单行</span><br><span class="line"><span class="selector-class">.text-hidden</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line">//多行</span><br><span class="line"><span class="selector-class">.text-multi</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  -webkit-line-clamp: 2;	//限制为2行</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文本提示框<br>使用<a href="http://element-cn.eleme.io/1.4/#/zh-CN/component/tooltip" target="_blank" rel="noopener">‘Element UI Tooltip’</a>组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tooltip effect=<span class="string">"dark"</span> content=<span class="string">"提示文字"</span> placement=<span class="string">"top"</span>&gt;</span><br><span class="line">  &lt;el-button&gt;Tooltip&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-tooltip&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示判断<br>对于控制tooltip的显示隐藏，使用el-tooltip自带的disabled属性。<br>在鼠标移入组件时，使用 <code>scrollWidth</code> 和 <code>offsetWidth</code> 进行判断，当文本超出时，滚动区域的宽度会大于容器宽度。<br>在多行的换行中，容器宽度一致，需要使用高度来进行判断。</p>
</li>
<li><p>代码(不含css)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"['tooltip-box', 'w-100', &#123;'h-100' : !multi&#125;]"</span> </span><br><span class="line">  @mouseenter=<span class="string">"handleShowTooltip($event)"</span>&gt;</span><br><span class="line">    &lt;el-tooltip :disabled=<span class="string">"showTooltip"</span> :content=<span class="string">"text"</span> placement=<span class="string">"top"</span>&gt;</span><br><span class="line">      &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">" multi ? 'text-multi' : 'text-hidden'"</span>&gt;&#123;&#123;text&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-tooltip&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        showTooltip: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props  : &#123;</span><br><span class="line">      text : <span class="built_in">String</span>,</span><br><span class="line">      <span class="comment">// 切换 单/多行</span></span><br><span class="line">      multi: &#123;</span><br><span class="line">        type   : <span class="built_in">Boolean</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleShowTooltip(event)&#123;</span><br><span class="line">        <span class="keyword">let</span> cell = event.target.querySelector(<span class="string">'.el-tooltip'</span>);</span><br><span class="line">        <span class="keyword">this</span>.showTooltip = cell.scrollWidth === cell.offsetWidth &amp;&amp; cell.scrollHeight === cell.offsetHeight;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 项目实例 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vuex简单入门]]></title>
      <url>/2017/11/28/vuex/</url>
      <content type="html"><![CDATA[<p>vuex是一个专门为vue.js设计的集中式状态管理架构，可用于数据的储存与组件之间的通信。<br><a id="more"></a></p>
<h3 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建store</h3><p>每一个 Vuex 应用的核心就是 store（仓库）,在store中定义了存放数据的state和操作数据的方法。<br>新建store.js文件并定义基础的store,这里存放了一个msg变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    state : &#123;</span><br><span class="line">        msg : &apos;hi&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="注册store"><a href="#注册store" class="headerlink" title="注册store"></a>注册store</h3><p>在创建store之后，首先需要注册store，在实例化vue对象时加入store,在store中引入vue和vuex<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex);</span><br></pre></td></tr></table></figure></p>
<p>除了全局注册外，还可以注册模块，注册方法为：registerModule( 模块名, 引入的store实例)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$store.registerModule(<span class="string">'name'</span>, store);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>注册store之后，在这个组件以及组件的所有子组件中，都可以直接调用store，不需要重复引入，因此store通常在根实例注册。</p>
<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>state是vuex的核心概念之一，所有的数据都存放在state对象中，state中的数据需要使用计算属性获取，以上面定义的store为例，想要拿到定义的msg<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed : &#123;</span><br><span class="line">    msg : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//全局</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.msg</span><br><span class="line">        <span class="comment">//模块</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.name.msg 	<span class="comment">//name为注册时的命名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    state : &#123;</span><br><span class="line">        num : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations : &#123;</span><br><span class="line">        add(state, n)&#123;</span><br><span class="line">            state.num += n</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在mutation对象中定义的方法有两个参数，state对象和提交时传入的参数，需要在组件中提交mutation方法时<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'add'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>对于对象属性的赋值，建议使用<code>Vue.set</code>方法，确保可以监听到数据对象的变化，我在其他文章中有关于这一点的介绍<a href="/2017/10/12/vue汇总/">‘Vue汇总’</a></p>
</blockquote>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>通常异步操作和请求都是放在action中，此外，action中定义的方法可以通过commit mutation的方法来改变state中的数据。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    state : &#123;</span><br><span class="line">        num : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations : &#123;</span><br><span class="line">        _add(state, n)&#123;</span><br><span class="line">            state.num += n</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;，</span><br><span class="line">    action : &#123;</span><br><span class="line">        add( &#123;commit&#125;, n)&#123;</span><br><span class="line">            commit(<span class="string">'_add'</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在action中定义的方法也有两个参数，第一个参数为当前的store对象，这里使用了参数解构的写法来获取到了param.commit，也可以写作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add( context, n)&#123;</span><br><span class="line">    context.commit(<span class="string">'_add'</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在调用时，使用<code>dispatch</code>方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'add'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(state, <span class="string">'obj'</span>, data);</span><br></pre></td></tr></table></figure>
<h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>在从state中获取数据时，可能会需要进行数据的过滤或者格式化，getter的作用类似与计算属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        names: [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span> : <span class="string">'zhangsan'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span> : <span class="string">'lisi'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        getNames: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.names.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>定义的getter会暴露为 store.getters 对象，获取方式类似state<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed : &#123;</span><br><span class="line">    names : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.getNames 	<span class="comment">//name为注册时的命名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP学习笔记:面向对象]]></title>
      <url>/2017/10/13/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;类是对象的抽象，对象是类的实例<br>&nbsp;&nbsp;&nbsp;&nbsp;提到面向对象，就会想起来这句话，印象中似乎大学考过不止一次，连我这个学渣都印象深刻<br><a id="more"></a></p>
<h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>使用<code>class</code>关键字对类进行声明<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $color = <span class="string">'red'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建类的实例对象</span></span><br><span class="line">$task = <span class="keyword">new</span> Task();</span><br><span class="line"><span class="keyword">echo</span> $task-&gt;$color;	<span class="comment">//red</span></span><br><span class="line">$task-&gt;say();	<span class="comment">//hello</span></span><br></pre></td></tr></table></figure></p>
<h3 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h3><ul>
<li>构造函数</li>
</ul>
<p><code>void __construct ([ mixed $args [, $... ]] )</code><br>PHP 5 允行开发者在一个类中定义一个方法作为构造函数。具有构造函数的类在实例化对象时会调用这个方法。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $color;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建类的实例对象</span></span><br><span class="line">$task = <span class="keyword">new</span> Task(<span class="string">'red'</span>);</span><br><span class="line">var_dump($task-&gt;$color);	<span class="comment">//red</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>析构函数</li>
</ul>
<p><code>void __destruct ( void )</code><br>PHP 5 引入了析构函数的概念，析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</p>
<h3 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter/setter"></a>getter/setter</h3><p>getter/setter提供了一些属性读取的封装，可以让代码更便捷，使用方法限制对数据的随意赋值<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAge</span><span class="params">($age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($age &lt; <span class="number">18</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'not old enough'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$task = <span class="keyword">new</span> Task();</span><br><span class="line">$task-&gt;setAge(<span class="number">30</span>);</span><br><span class="line">var_dump($task-&gt;getAge());	<span class="comment">//30</span></span><br></pre></td></tr></table></figure></p>
<p>这里对age赋值小于18时就会报错，但是这样的封装还不够彻底，使用<code>$task-&gt;$age</code>可以不通过setter直接赋值，所以就需要用到类的封装</p>
<h3 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h3><ul>
<li>public 公有，可以直接读取，修改和继承</li>
<li>private 私有，只能在类的内部访问到，直接读取会出错，不可以继承</li>
<li>protected 被保护，只能在类的内部访问到，直接读取会出错，可以继承</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$task = <span class="keyword">new</span> Task();</span><br><span class="line">var_dump($task-&gt;$age);	<span class="comment">//error</span></span><br><span class="line">var_dump($task-&gt;getAge());	<span class="comment">//20</span></span><br></pre></td></tr></table></figure>
<p>只能通过类内部的方法获取private和protected的属性</p>
<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>使用<code>extends</code>关键字，子类可以继承到所有的public和protected的属性和方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getEyesCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Mother</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getEyes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getEyesCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$child = <span class="keyword">new</span> Child();</span><br><span class="line">var_dump($child-&gt;getEyes());	<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li>抽象类只能用来继承，不能直接调用</li>
<li>抽象类中的抽象方法，所有继承它的子类都必须定义，否则会报错</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $color = <span class="string">'red'</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $length = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pow(<span class="keyword">$this</span>-&gt;length,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;	<span class="comment">//报错，没有定义getArea方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$shape = <span class="keyword">new</span> Shape();</span><br><span class="line">var_dump($shape-&gt;color);	<span class="comment">//error</span></span><br><span class="line">$square = <span class="keyword">new</span> Square();</span><br><span class="line">var_dump($square-&gt;color);	<span class="comment">//red</span></span><br><span class="line">var_dump($square-&gt;getArea());	<span class="comment">//25</span></span><br></pre></td></tr></table></figure>
<h3 id="对象接口"><a href="#对象接口" class="headerlink" title="对象接口"></a>对象接口</h3><ul>
<li>使用接口，可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容</li>
<li>接口是通过<code>interface</code>关键字来定义的，类通过<code>implements</code>关键字调用接口</li>
<li>接口中定义的所有方法都必须是公有，这是接口的特性</li>
<li>接口也可以继承，通过使用<code>extends</code>操作符</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLogger</span> <span class="keyword">implements</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="string">'login in file '</span>.$message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseLogger</span> <span class="keyword">implements</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="string">'login in database '</span>.$message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $logger;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Logger $logger)</span>	//使用<span class="title">Logger</span>代替类名</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;logger = $logger;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;logger-&gt;save(<span class="string">'jelly'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user = <span class="keyword">new</span> user(<span class="keyword">new</span> FileLogger());	<span class="comment">//更改这里的类的实例对象，就可以调用不同的save方法</span></span><br><span class="line">$user-&gt;register();</span><br></pre></td></tr></table></figure>
<p>接口中的定义的方法都是空的，跟抽象类一样，调用接口的类中必须定义这个方法，不然就会报错</p>
<blockquote>
<p>这里需要补充一个php函数依赖注入的概念</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(C $c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> get_class($c).<span class="string">"\n"</span>;	<span class="comment">//get_class 获取所在的类名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="keyword">new</span> C);	<span class="comment">//C</span></span><br><span class="line">f(<span class="keyword">new</span> D);	<span class="comment">//D</span></span><br><span class="line">f(<span class="keyword">new</span> E);	<span class="comment">//error</span></span><br></pre></td></tr></table></figure>
<p>参数可以通过加类名来限制，只有这个类的以及继承了这个类的才有效，接口名同理，厉害了我的php</p>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：</p>
<ol>
<li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li>
<li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件1</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>/<span class="title">test1</span></span><br><span class="line"></span><br><span class="line"><span class="title">class</span> <span class="title">Task</span>&#123;</span><br><span class="line">    <span class="title">public</span> <span class="title">function</span> <span class="title">__construct</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        return 'hello';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件2</span></span><br><span class="line">$task = <span class="keyword">new</span> app/test1/Task();</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>/<span class="title">test1</span></span><br><span class="line">$<span class="title">task</span> = <span class="title">new</span> <span class="title">Task</span>();</span><br></pre></td></tr></table></figure>
<h3 id="静态属性和静态方法"><a href="#静态属性和静态方法" class="headerlink" title="静态属性和静态方法"></a>静态属性和静态方法</h3><p>使用<code>static</code>关键字定义静态属性和静态方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(...$num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_sum($num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> Math::add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p>
<p>调用静态方法时，可以不将类实例化为对象，直接调用方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $age = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">self</span>::$age ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$jack = <span class="keyword">new</span> Person();</span><br><span class="line">$jack-&gt;run();</span><br><span class="line"><span class="keyword">echo</span> Person::$age;	<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">$jane = <span class="keyword">new</span> Person();</span><br><span class="line">$jane-&gt;run();</span><br><span class="line"><span class="keyword">echo</span> Person::$age;	<span class="comment">//3</span></span><br></pre></td></tr></table></figure></p>
<p>定义静态属性后，在类中使用<code>self</code>关键字调用</p>
<blockquote>
<p>重新实例化person类并调用方法后，静态属性值并没有重置，说明静态属性的值与实例化对象无关，而是跟类相关，使用时需要注意</p>
</blockquote>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>使用<code>const</code>关键字声明，在任何地方都不能改变，调用方式和静态属性相同<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> Task::num;</span><br></pre></td></tr></table></figure></p>
<h3 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h3><p>php是单继承的语言，在PHP 5.4 Traits出现之前，PHP的类无法同时从两个基类继承属性或方法。php的Traits通过在类中使用use关键字声明要组合的Trait名称，而具体某个Trait的声明使用trait关键词，Trait不能直接实例化<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> Drive &#123;</span><br><span class="line">    <span class="keyword">public</span> $carName = <span class="string">'trait'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">driving</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"driving &#123;$this-&gt;carName&#125;\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"eat\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Drive</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"study\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$student = <span class="keyword">new</span> Student();</span><br><span class="line">$student-&gt;study();	<span class="comment">//study</span></span><br><span class="line">$student-&gt;eat();	<span class="comment">//eat</span></span><br><span class="line">$student-&gt;driving();	<span class="comment">//driving trait</span></span><br></pre></td></tr></table></figure></p>
<p>Student类通过继承Person，有了eat方法，通过组合Drive，有了driving方法和属性,实现了多继承</p>
<blockquote>
<p>trait还有以下特点</p>
</blockquote>
<ul>
<li>当方法或属性同名时，当前类中的方法会覆盖 trait的 方法，而 trait 的方法又覆盖了基类中的方法</li>
<li>Trait 也能组合Trait，Trait中支持抽象方法、静态属性及静态方法</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue学习笔记:汇总]]></title>
      <url>/2017/10/12/vue%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p><img src="/img/vue.png" alt="&#39;vue&#39;"><br>记录一下一些简单但是有用的关于vue和node的知识点和问题<br><a id="more"></a></p>
<h3 id="vue-cli构建项目"><a href="#vue-cli构建项目" class="headerlink" title="vue-cli构建项目"></a>vue-cli构建项目</h3><ol>
<li><p>安装vue-cli</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用vue-cli初始化项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack [project-name] 	//项目名</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>vue-cli 3.0版本增加了一个新命令来初始化项目，依赖node&gt;=8.9<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create [project-name]</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>安装依赖模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd [project-name]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="npm-run命令"><a href="#npm-run命令" class="headerlink" title="npm run命令"></a>npm run命令</h3><p>在执行npm run xxx时,实际执行的是配置在<code>package.json</code>中的脚本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"node build/dev-server.js"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"node build/server.js"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"node build/build.js"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>比如<code>npm run dev</code>执行时运行的是<code>dev-server.js</code></p>
<h3 id="npm执行多个命令"><a href="#npm执行多个命令" class="headerlink" title="npm执行多个命令"></a>npm执行多个命令</h3><p>对于一般的命令，可以使用<code>&amp;&amp;</code>连接来顺序执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'start'</span> : <span class="string">'npm run dev &amp;&amp; npm run server'</span></span><br></pre></td></tr></table></figure></p>
<p>但是如果两条命令都是监听命令，第一个执行完之后便会停止，这时候可以使用<code>concurrently</code>模块<br>首先需要安装<code>npm install -g concurrently</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>:<span class="string">"concurrently \"npm run server\" \"npm run dev\""</span></span><br></pre></td></tr></table></figure></p>
<h3 id="更改调试地址端口号"><a href="#更改调试地址端口号" class="headerlink" title="更改调试地址端口号"></a>更改调试地址端口号</h3><p>在执行<code>npm run dev</code>后,会在localhost以测试环境运行项目,上文提到实际执行的是<code>dev-server.js</code>,查看之后发现以下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="comment">// default port where dev server listens for incoming traffic</span></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || config.dev.port</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uri = <span class="string">'http://localhost:'</span> + port</span><br></pre></td></tr></table></figure></p>
<p>可见地址端口号即port的值,取的是环境变量的PORT或者config中定义的port值,找到<code>../config/index.js</code>,在module.exports的对象中的dev属性中，找到port的值，更改即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dev: &#123;</span><br><span class="line">    env: <span class="built_in">require</span>(<span class="string">'./dev.env'</span>),</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    autoOpenBrowser: <span class="literal">true</span>,</span><br><span class="line">    ……</span><br><span class="line">    cssSourceMap: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="dependencies和devDependencies"><a href="#dependencies和devDependencies" class="headerlink" title="dependencies和devDependencies"></a>dependencies和devDependencies</h3><p>dependences 是项目正常运行所需要的依赖，即生产环境，而devDependencies则是开发者开发时整个项目所需的依赖（如会有一些测试依赖之类的），及开发环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>会默认安装两种依赖。</p>
<p>如果只想要安装devDependencies,则运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install name --save</span><br></pre></td></tr></table></figure></p>
<p>如果只想要安装devDependencies,则运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install name --save-dev</span><br></pre></td></tr></table></figure></p>
<h3 id="native原生事件"><a href="#native原生事件" class="headerlink" title="native原生事件"></a>native原生事件</h3><p>现在在组件上使用v-on只会监听自定义事件 (组件提供的事件)。如果要监听根元素的原生事件，可以使用 .native 修饰符，比如给router-link绑定点击事件，element-ui组件绑定原生事件，如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"path"</span> @click.native=<span class="string">"click"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-input type=<span class="string">"textarea"</span> :rows=<span class="string">"3"</span> </span><br><span class="line">	@keydown.enter.native=<span class="string">"keydown"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-input&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>通过使用保留的<code>&lt;component&gt;</code>元素，动态地绑定到它的is特性，我们让多个组件可以使用同一个挂载点，并动态切换：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;component v-bind:is=<span class="string">"currentView"</span>&gt;</span><br><span class="line">  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span><br><span class="line">&lt;<span class="regexp">/component&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">data: &#123;</span></span><br><span class="line"><span class="regexp">    currentView: 'home'</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">components: &#123;</span></span><br><span class="line"><span class="regexp">  home,</span></span><br><span class="line"><span class="regexp">  posts,</span></span><br><span class="line"><span class="regexp">  archive</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>可以通过切换绑定的属性，即currentView来切换不同的组件，或者动态的加载组件，currentView为null时组件会被销毁。<br>如果想把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive 指令参数。</p>
<h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">    &lt;coma v-<span class="keyword">if</span>=<span class="string">"bol"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">coma</span>&gt;</span></span></span><br><span class="line">    &lt;comb v-<span class="keyword">else</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">comb</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/keep-alive&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改bol值切换组件加载时，这里的组件会被缓存起来，内容不会因为组件的切换而消失。<br>此外，还有<code>include</code>和<code>exclude</code>属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">"coma"</span> exclude=<span class="string">"comb"</span>&gt;</span><br><span class="line">    &lt;coma v-<span class="keyword">if</span>=<span class="string">"bol"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">coma</span>&gt;</span></span></span><br><span class="line">    &lt;comb v-<span class="keyword">else</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">comb</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/keep-alive&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>将会缓存组件coma，不会缓存comb。</p>
<h3 id="watch数组-对象"><a href="#watch数组-对象" class="headerlink" title="watch数组/对象"></a>watch数组/对象</h3><p>vue中使用watch可以监听数据的变化，但是对于数组或者对象内部的变化，直接watch是监听不到的，需要使用<code>deep</code>深度监听<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      handler : <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">      &#125;,</span><br><span class="line">      deep : <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<h3 id="监听路由变化"><a href="#监听路由变化" class="headerlink" title="监听路由变化"></a>监听路由变化</h3><p>$route 作为vue实例的一个响应式属性，是和data中定义的属性本质上是一样的，都可以通过this的方式拿到。既然可以使用watch监听data中的属性变化，同样也可以监听 $route 的变化。watch中监听的对象默认回调函数中的参数值就是newVal,oldVal，监听$route时的to,form<br>也是这样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="string">'$route'</span>(to, <span class="keyword">from</span>)&#123;</span><br><span class="line">    	<span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="使用sass"><a href="#使用sass" class="headerlink" title="使用sass"></a>使用sass</h3><p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev sass-loader</span><br><span class="line">//sass-loader依赖于node-sass</span><br><span class="line">npm install --save-dev node-sass</span><br></pre></td></tr></table></figure></p>
<p>修改配置项，找到build文件夹下的<code>webpack.base.config.js</code>,修改其中的module.rules<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    	……</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">            loaders: [<span class="string">"style"</span>, <span class="string">"css"</span>, <span class="string">"sass"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在需要使用scss的地方，添加<code>lang=&quot;scss&quot;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&apos;scss&apos;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="dirname与filename"><a href="#dirname与filename" class="headerlink" title="dirname与filename"></a>dirname与filename</h3><p>node.js中，在任何模块文件内部，可是使用<code>__filename</code>变量获取当前模板文件的带有完整绝对路径的文件名，使用<code>__dirname</code>可以获得当前文件所在目录的完整目录名。<br>举个栗子，在test录下的test.js中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br><span class="line"><span class="built_in">console</span>.log(__filename);</span><br></pre></td></tr></table></figure></p>
<p>之后执行<code>node test.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\test\test.js   //__dirname</span><br><span class="line">D:\test		  //__filename</span><br></pre></td></tr></table></figure></p>
<h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><p><code>mixins</code> 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 <code>Vue.extend()</code>里最终选择使用相同的选项合并逻辑合并。<br>这是官网对mixins的介绍，简单来讲，就是将对象合并进vue实例中，实现数据和方法的通用，举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixin.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHello () &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="keyword">this</span>.msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue</span></span><br><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">'./mixin'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">  	<span class="keyword">return</span> &#123;</span><br><span class="line">	  msg: <span class="string">'Hello World'</span></span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.sayHello();  <span class="comment">// 'Hello World'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简单粗暴，通常用于通用逻辑的封装，相比引入函数方法，<code>mixins</code>对数据和方法的调用更加方便。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHello () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>mixin</code>也支持全局混合方法，不需要在导入，可以所有vue文件中直接使用。</p>
<h3 id="变量声明出错"><a href="#变量声明出错" class="headerlink" title="变量声明出错"></a>变量声明出错</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; _msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    _msg: <span class="string">'hello'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码在运行时会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: Property or method &quot;_msg&quot; is not defined on the instance but referenced during render</span><br></pre></td></tr></table></figure></p>
<p>万万没想到这种基本操作也会出错，于是几经波折后找到了这句话</p>
<blockquote>
<p>以 <code>_</code> 或 <code>$</code> 开头的属性或者方法不会被Vue实例代理，因为它们可能和 Vue 内置的属性、API 方法冲突。你可以使用例如 <code>vm.$data._property</code> 的方式访问这些属性</p>
</blockquote>
<p>以上面的代码为例，如果非要使用下划线，可以通过<code>this.$data._msg</code>来获得属性值。</p>
<h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set"></a>Vue.set</h3><p>在Vue文档中有这样一段话。</p>
<blockquote>
<p>Vue 不能检测到对象属性的添加或删除。</p>
</blockquote>
<p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p>
<ul>
<li>当你利用索引直接设置一个项时，例如：vm.arr[index] = newValue</li>
<li>当你修改数组的长度时，例如：vm.arr.length = newLength<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      name: <span class="string">'张三'</span>,</span><br><span class="line">      sex: <span class="string">'男'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>.user.age = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码为user对象新增了age属性，但是会发现并没有触发dom的更新，页面显示的age依旧为空，这时候来看一下打印的结果：<br><img src="/img/vue_set.png" alt="&#39;console&#39;"><br>对于js对象，Vue在初始化时会遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter，再在看到上面的打印结果后，会发现对象中name及sex都有get和set方法,但是在age并没有这两个方法，因此，设置了age值后vue并不会自动更新视图，这时候就需要用到<code>Vue.set</code>方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$set(data, key, value);</span><br></pre></td></tr></table></figure></p>
<p>在以上的例子中，使用的方法为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$set(<span class="keyword">this</span>.user, <span class="string">'age'</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></p>
<p>打印结果如下：<br><img src="/img/vue_set_res.png" alt="&#39;console&#39;"></p>
<h3 id="错误路由页"><a href="#错误路由页" class="headerlink" title="错误路由页"></a>错误路由页</h3><p>当路由跳转错误的时候，我们通常需要一个友好的页面来提示错误路由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path :<span class="string">'*'</span>,</span><br><span class="line">    component: NotFound</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    path :<span class="string">'*'</span>,</span><br><span class="line">    redirect: <span class="string">'/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以选择在路由配置的最下面这样定义，选择显示404页面或者重定向到主页</p>
<h3 id="组件间的通信"><a href="#组件间的通信" class="headerlink" title="组件间的通信"></a>组件间的通信</h3><p><a href="/2017/10/09/vue组件通信/">‘Vue学习笔记:组件之间的通信方式’</a></p>
<h3 id="Echart使用"><a href="#Echart使用" class="headerlink" title="Echart使用"></a>Echart使用</h3><p><a href="/2018/01/16/echart/">‘Vue项目中对EChart的应用’</a></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><a href="/2018/03/13/electron/">‘Electron-Vue项目记录’</a><br><a href="/2017/12/13/vue文本隐藏组件/">‘Vue实例:文本隐藏提示组件’</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP学习笔记:基础语法]]></title>
      <url>/2017/10/10/php%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>整理一下PHP入门的基础知识<br><a id="more"></a></p>
<h2 id="一般语法"><a href="#一般语法" class="headerlink" title="一般语法"></a>一般语法</h2><p><code>&lt;?php #代码段 ?&gt;</code><br>关键字，函数名，类，大小写不敏感<br>变量大小写敏感<br>默认文件扩展名为<code>*.php</code><br>通常包含HTML标签以及一些PHP脚本代码<br>注释：<code>//、#、/* ... */</code></p>
<h3 id="一致语法"><a href="#一致语法" class="headerlink" title="一致语法"></a>一致语法</h3><p>if…else if…else，switch-case，while，for<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># foreach用法</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$colors = <span class="keyword">array</span>(<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($colors <span class="keyword">as</span> $value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$value &lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><ol>
<li>echo 常用的输出语句，例如：echo ‘helloworld！’;</li>
<li>print() 输出语句，有返回值。例如：print(‘helloworld！’); 输出成功返回1，失败返回0。 </li>
<li>printf(); 格式化输出字符串。例如：printf(“%d,%f”,12,12.3); </li>
<li>print_r(); 输出数组、对象等复合数据类型。例如：print_r($array);</li>
<li>var_dump(); 可以判断一个变量的类型与长度,并输出变量的数值。例如：var_dump(‘helloworld！’);</li>
</ol>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量类似变量，但是常量一旦被定义就无法更改或撤销定义。</p>
<h4 id="自定义常量"><a href="#自定义常量" class="headerlink" title="自定义常量"></a>自定义常量</h4><p>使用<code>define()</code>函数，它有三个参数</p>
<ol>
<li>首个参数定义常量的名称</li>
<li>第二个参数定义常量的值</li>
<li>可选的第三个参数规定常量名是否对大小写不敏感。默认是 false。</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">"GREETING"</span>, <span class="string">"Welcome to W3School.com.cn!"</span>);</span><br><span class="line"><span class="keyword">echo</span> GREETING;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h4><p><img src="/img/yudingyi.png" alt="&#39;预定义常量&#39;"></p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>PHP 是一门类型松散的语言。我们不必告知 PHP 变量的数据类型。<br>PHP能 根据它的值，自动把变量转换为正确的数据类型。</p>
<p>定义变量：<code>$varName= varValue;</code> //变量会在首次为其赋值时被创建<br>取变量：<code>$varName</code><br>引用赋值：<code>$str2 = &amp; $str1</code></p>
<h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><p>变量以 <code>$</code>符号开头，其后是变量的名称<br>变量名称必须以字母或下划线开头<br>变量名称不能以数字开头<br>变量名称只能包含字母数字字符和下划线<br>变量名称对大小写敏感（y与Y 是两个不同的变量）<br>变量会在第一次赋值时被创建。无需声明变量的类型。</p>
<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><h4 id="local（局部）"><a href="#local（局部）" class="headerlink" title="local（局部）"></a>local（局部）</h4><p>函数内部声明的变量，作用域是所在函数，只能在函数内部进行访问<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $y=<span class="number">10</span>; <span class="comment"># 局部作用域</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'测试函数内部的变量：'</span>.$y.<span class="string">'&lt;p&gt;'</span>; <span class="comment"># 测试函数内部的变量：10</span></span><br><span class="line">&#125;</span><br><span class="line">myTest();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="global（全局）"><a href="#global（全局）" class="headerlink" title="global（全局）"></a>global（全局）</h4><p>被函数之外声明的变量，作用域是整个php文件<br>函数以外直接进行访问<br>函数内使用global 关键词访问全局变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $y;  <span class="comment"># 函数内访问全局变量必须使用global 关键词</span></span><br><span class="line">    $y=<span class="number">10</span> + $y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y; <span class="comment">// 20</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>$GLOBALS[index]</code>的数组中存储了所有的全局变量。下标存有变量名。这个数组在函数内也可以访问，并能够用于直接更新全局变量。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $GLOBALS[<span class="string">'y'</span>] = <span class="number">10</span> + $GLOBALS[<span class="string">'y'</span>];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y; <span class="comment">// 输出 20</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="static（静态）"><a href="#static（静态）" class="headerlink" title="static（静态）"></a>static（静态）</h4><p>加长变量的作用域<br>可以在函数调用结束后仍保留变量值，当再次回到其作用域时，继续使用原来的值</p>
<h3 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h3><p>允许动态改变一个变量名称,变量名是一个变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'hello'</span>;</span><br><span class="line">$$a = <span class="string">'world'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$a $&#123;$a&#125;"</span>; 	<span class="comment">//hello world</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$a $hello"</span>;	<span class="comment">//hello world</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="超级全局变量"><a href="#超级全局变量" class="headerlink" title="超级全局变量"></a>超级全局变量</h3><p>超全局变量是在全部作用域中始终可用的内置变量<br><code>$GLOBALS</code>：引用全局作用域中可用的全部变量<br><code>$_SERVER</code>：保存关于报头、路径和脚本位置的信息<br><code>$_REQUEST</code>：用于收集 HTML 表单提交的数据<br><code>$_POST</code>：用于收集提交method=”post” 的 HTML 表单后的表单数据。也常用于传递变量<br><code>$_GET</code>：也可用于收集提交 HTML 表单 (method=”get”) 之后的表单数据<br><code>$_FILES</code>：经由 HTTP POST 文件上传而提交至脚本的变量<br><code>$_ENV</code>：包含服务器端环境变量的数组<br><code>$_COOKIE</code>：通过HTTP cookie传递给当前脚本的变量的关联数组</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>四种标量类型：boolean（布尔型），integer（整型），float（浮点型，double），string（字符串）<br>两种复合类型：array（数组），object（对象）<br>两种特殊类型：resource（资源），NULL（无类型）</p>
<h3 id="检测数据类型"><a href="#检测数据类型" class="headerlink" title="检测数据类型"></a>检测数据类型</h3><p><img src="/img/jiance.png" alt="&#39;检测数据类型&#39;"></p>
<h3 id="转化类型"><a href="#转化类型" class="headerlink" title="转化类型"></a>转化类型</h3><ul>
<li>(boolean),(string),(integer),(float),(array),(object)</li>
</ul>
<blockquote>
<p>举个栗子 (boolean)$str 将变量转换为布尔型</p>
</blockquote>
<ul>
<li>settype ( mixed &amp;$var , string $type )<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$foo = <span class="string">"5bar"</span>; <span class="comment">// string</span></span><br><span class="line">$bar = <span class="keyword">true</span>;   <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line">settype($foo, <span class="string">"integer"</span>); <span class="comment">// $foo is now 5   (integer)</span></span><br><span class="line">settype($bar, <span class="string">"string"</span>);  <span class="comment">// $bar is now "1" (string)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="运算符类型"><a href="#运算符类型" class="headerlink" title="运算符类型"></a>运算符类型</h3><h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><p>“.”：拼接字符串<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"you "</span> . <span class="string">"1"</span> . <span class="string">'&lt;p&gt;'</span>;</span><br></pre></td></tr></table></figure></p>
<p>“+”：只用于算术运算符【如果符号两边是字符类型-&gt;整型；字母-&gt;0；数字开头的字符串-&gt;截取数字】<br>其他运算符一致</p>
<h4 id="数组运算符"><a href="#数组运算符" class="headerlink" title="数组运算符"></a>数组运算符</h4><p>注意：PHP中，数组的元素的顺序，不是由下标（键名）决定的，而是完全由加入的顺序来决定。</p>
<p>“+“：联结 将右边的数组项合并到左边数组的后面，得到一个新数组。如有重复键，则结果以左边的为准<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$v1 = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">$v2 = <span class="keyword">array</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">$r1 = $v1 + $v2; <span class="comment">//结果只能是：array(1,2,3,4,9)</span></span><br></pre></td></tr></table></figure></p>
<p>“==”： 相等，如果两个数组具有相同的键名和键值（可以顺序不同，或类型不同），则返回true<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$v1 = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">$v2 = <span class="keyword">array</span>(<span class="number">4</span>，<span class="number">2</span>，<span class="number">1</span>，<span class="number">3</span>);</span><br><span class="line">$v3 = <span class="keyword">array</span>(<span class="number">3</span>=&gt;<span class="number">4</span>，<span class="number">1</span>=&gt;<span class="number">2</span>，<span class="number">0</span>=&gt;<span class="number">1</span>，<span class="number">2</span>=&gt;<span class="number">3</span>);</span><br><span class="line"><span class="keyword">echo</span> $v1 == $v2;   <span class="comment">//不等</span></span><br><span class="line"><span class="keyword">echo</span> $v1 == $v3;   <span class="comment">//相等</span></span><br></pre></td></tr></table></figure></p>
<p>“!=, &lt;&gt;” ：不相等，如果两个数组不是相等（==），则返回true<br>“===”：全等，如果两个数组具有相同的键名和键值且顺序和类型都一样，则返回true<br>“!==” ： 不全等，如果两个数组不是全等（===），则返回true</p>
<h4 id="错误控制运算符：＠"><a href="#错误控制运算符：＠" class="headerlink" title="错误控制运算符：＠"></a>错误控制运算符：＠</h4><p>通常用于一个“可能”发生错误的表达式的前面——最常用的情形就是连接数据库。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$link = @mysql_connect(“localhost, ”’, “”,’”); </span><br><span class="line">var_dump($link);</span><br></pre></td></tr></table></figure></p>
<p>或者更进一步的使用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$link = @mysql_connect(“localhost, ”’, “”,’”) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"database link error"</span>); </span><br><span class="line">var_dump($link);</span><br></pre></td></tr></table></figure></p>
<p>通常错误控制运算符用在程序开发测试阶段无法预测的可能出错的位置——一般是获取外部资源的时候<br>die是一种“语言结构”，并非函数，可以不写括号<br>sleep($n);：让php脚本停止$n秒，然后继续执行。</p>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>优先级高的操作先执行<br>同一优先级的操作从左到右执行<br>赋值操作从右到左<br>括号内先执行<br><img src="/img/youxianji.png" alt="&#39;运算符优先级&#39;"></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="一般函数"><a href="#一般函数" class="headerlink" title="一般函数"></a>一般函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hello world!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">writeMsg(); <span class="comment">// 调用函数</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="带参函数-值传参，引用传参-，参数默认值"><a href="#带参函数-值传参，引用传参-，参数默认值" class="headerlink" title="带参函数[值传参，引用传参]，参数默认值]"></a>带参函数[值传参，引用传参]，参数默认值]</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSum</span><span class="params">($name,&amp;$quoteValue,$value=<span class="number">10</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$name sum is $value &lt;br&gt;"</span>;</span><br><span class="line">    $quoteValue = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $test.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">setSum(<span class="string">"width"</span>,$test);</span><br><span class="line">setSum(<span class="string">"length"</span>,$test);</span><br><span class="line">setSum(<span class="string">"high"</span>,$test);</span><br><span class="line"><span class="keyword">echo</span> $test;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="带返回值函数"><a href="#带返回值函数" class="headerlink" title="带返回值函数"></a>带返回值函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">($x,$y)</span> </span>&#123;</span><br><span class="line">    $z=$x+$y;</span><br><span class="line">    <span class="keyword">return</span> $z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"5 + 10 = "</span> . sum(<span class="number">5</span>,<span class="number">10</span>) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"7 + 13 = "</span> . sum(<span class="number">7</span>,<span class="number">13</span>) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="变量函数"><a href="#变量函数" class="headerlink" title="变量函数"></a>变量函数</h3><p>类似于可变变量，将变量作为函数名<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$str = <span class="string">'fn'</span>;</span><br><span class="line">$str();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h3><p>使用变量引用函数，和参数引用传递不同，对函数的引用必须在两处都要用‘&amp;’，用来说明返回的是引用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">rFun1</span><span class="params">($tmp = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $tmp;</span><br><span class="line">&#125;</span><br><span class="line">$str = &amp;rFun1(<span class="string">"god love you"</span>);</span><br><span class="line"><span class="keyword">echo</span> $str.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="取消引用"><a href="#取消引用" class="headerlink" title="取消引用"></a>取消引用</h3><p><code>unset()</code>：取消引用，断开变量名和变量内容之间的绑定，并不销毁变量，也不改变原变量</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><h4 id="索引数组-带有数字索引的数组"><a href="#索引数组-带有数字索引的数组" class="headerlink" title="索引数组 - 带有数字索引的数组"></a>索引数组 - 带有数字索引的数组</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"SAAB"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"I like "</span> . $cars[<span class="number">0</span>] . <span class="string">", "</span> . $cars[<span class="number">1</span>] . <span class="string">" and "</span> . $cars[<span class="number">2</span>] . <span class="string">"."</span>; <span class="comment"># 索引下标</span></span><br><span class="line"></span><br><span class="line">$arrlength=count($cars); <span class="comment"># 个数</span></span><br><span class="line"><span class="keyword">echo</span> $arrlength; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($x = <span class="number">0</span>; $x &lt; $arrlength; $x++) &#123; <span class="comment"># 遍历索引</span></span><br><span class="line">    <span class="keyword">echo</span> $cars[$x];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="关联数组-带有指定键的数组"><a href="#关联数组-带有指定键的数组" class="headerlink" title="关联数组 - 带有指定键的数组"></a>关联数组 - 带有指定键的数组</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># 第一种定义方法</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">"Bill"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Steve"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Peter"</span>=&gt;<span class="string">"43"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种定义方法</span></span><br><span class="line">$age[<span class="string">'Peter'</span>]=<span class="string">"35"</span>;</span><br><span class="line">$age[<span class="string">'Ben'</span>]=<span class="string">"37"</span>;</span><br><span class="line">$age[<span class="string">'Joe'</span>]=<span class="string">"43"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="多维数组-包含一个或多个数组的数组"><a href="#多维数组-包含一个或多个数组的数组" class="headerlink" title="多维数组 - 包含一个或多个数组的数组"></a>多维数组 - 包含一个或多个数组的数组</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$cars = <span class="keyword">array</span></span><br><span class="line">  (</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="number">22</span>,<span class="number">18</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">"BMW"</span>,<span class="number">15</span>,<span class="number">13</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">"Saab"</span>,<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">      <span class="keyword">array</span>(<span class="string">"Land Rover"</span>,<span class="number">17</span>,<span class="number">15</span>)</span><br><span class="line">  );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="常用数组操作"><a href="#常用数组操作" class="headerlink" title="常用数组操作"></a>常用数组操作</h3><h4 id="获得数组元素个数"><a href="#获得数组元素个数" class="headerlink" title="获得数组元素个数"></a>获得数组元素个数</h4><p>int count(mixed array[, int mode])<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="number">22</span>,<span class="number">18</span>);</span><br><span class="line">count($arr);</span><br></pre></td></tr></table></figure></p>
<h4 id="数组查询"><a href="#数组查询" class="headerlink" title="数组查询"></a>数组查询</h4><p><code>array_search()</code>在数组中搜索给定的值，找到后返回键名，否则返回false。<br>PHP4.2.0前，函数失败时返回null<br>mixed array_search(mixed needle, array haystack[, bool strict])<br>needle指定在数组中搜索的值,<br>haystack指定被搜索的数组,<br>strict为true将检查给定值的类型<br>常用于购物车中修改指定商品数量的修改和删除</p>
<h4 id="获取数组中最后一个元素"><a href="#获取数组中最后一个元素" class="headerlink" title="获取数组中最后一个元素"></a>获取数组中最后一个元素</h4><p><code>array_pop()</code>获取并返回数组最后一个元素，并将数组长度减1，数组为空或类型不对，返回null<br>mixed array_pop(array array)</p>
<h4 id="数组添加元素"><a href="#数组添加元素" class="headerlink" title="数组添加元素"></a>数组添加元素</h4><p><code>array_push()</code>向数组末尾添加元素，返回新的总数<br>int array_push(array array, mixed var[, mixed])</p>
<h4 id="数组删除重复元素"><a href="#数组删除重复元素" class="headerlink" title="数组删除重复元素"></a>数组删除重复元素</h4><p><code>array_unique()</code>将数组元素的值作为字符串排序，对每个值只保留第一个键名，忽略所有后面的键名<br>并不改变原数组，将删除重复元素的数组返回<br>array array_unique(array array)</p>
<h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><p>sort() - 以升序对数组排序<br>rsort() - 以降序对数组排序<br>asort() - 根据值，以升序对关联数组进行排序<br>ksort() - 根据键，以升序对关联数组进行排序<br>arsort() - 根据值，以降序对关联数组进行排序<br>krsort() - 根据键，以降序对关联数组进行排序</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue学习笔记:组件之间的通信方式]]></title>
      <url>/2017/10/09/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>在Vue中组件是实现模块化开发的主要内容，而组件的通信更是vue数据驱动的重点，总结一下目前我了解的组件之间数据通信和访问的方法。<br><a id="more"></a></p>
<h3 id="v-bind和props"><a href="#v-bind和props" class="headerlink" title="v-bind和props"></a>v-bind和props</h3><p>父组件在子组件上使用v-bind绑定数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:child-msg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span>	//这里必须要用 - 代替驼峰</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    msg: <span class="string">'hello'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子组件通过props来接收数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;childMsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  //hello</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'childMsg'</span>]</span><br></pre></td></tr></table></figure>
<p>可以通过使用this.childMsg调用数据。</p>
<h3 id="自定义事件和-emit"><a href="#自定义事件和-emit" class="headerlink" title="自定义事件和$emit"></a>自定义事件和$emit</h3><p>子组件要向父组件传递数据，需要使用触发事件的方式，使用$emit通知父组件改变数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'up'</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    msg: <span class="string">'hello'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">methods: &#123;</span><br><span class="line">  up () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'getChildMsg'</span>, <span class="keyword">this</span>.msg); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>父组件监听子组件触发的up事件,然后调用change方法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> @<span class="attr">getChildMsg</span>=<span class="string">"change"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  change(msg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);	<span class="comment">// hello</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>在介绍了<code>props</code>和<code>$emit</code>之后，就可以根据它们来实现在自定义组件上使用<code>v-model</code>来进行数据通信了。<br>首先简单的解释一下<code>v-model</code>与二者的关系，以下两中写法实现的效果相同:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用v-model</span></span><br><span class="line">&lt;component v-model=<span class="string">'msg'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用props和$emit</span></span><br><span class="line">&lt;component :value=<span class="string">'msg'</span> @input=<span class="string">'getMsg'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">……</span><br><span class="line">getMsg(value)&#123;</span><br><span class="line">  <span class="keyword">this</span>.msg = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对于<code>v-model</code>绑定的变量，相当于在子组件上面绑定了一个<code>value</code>属性，还可以通过接收子组件传递的<code>input</code>属性来再次赋值。<br>这么解释太抽象了，下面是一个简单的封装input组件的例子：<br>父组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-input v-model=&apos;number&apos;&gt;&lt;/my-input&gt;</span><br></pre></td></tr></table></figure></p>
<p>子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&apos;inputValue&apos;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        inputValue: <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: [<span class="built_in">String</span>, <span class="built_in">Number</span>]	<span class="comment">// 拿到父组件传递的值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      <span class="keyword">this</span>.inputValue = <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      value: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;	<span class="comment">// 监听父组件传值变化，更新绑定值</span></span><br><span class="line">        <span class="keyword">this</span>.inputValue = val;</span><br><span class="line">      &#125;,</span><br><span class="line">      inputValue: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;	<span class="comment">// 内容变化时，通知父组件</span></span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>在路由页面跳转时，可以通过传递参数的方式拿到数据。</p>
<ul>
<li>router-link</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    path: &apos;/path&apos;, </span><br><span class="line">    query: &#123;</span><br><span class="line">      name: name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name: &apos;/path&apos;, </span><br><span class="line">    params: &#123; </span><br><span class="line">      name: name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，path和query，name和params都是成对出现的，即使用path进行路由跳转时，params的值是拿不到的，只能设置query，反之亦然。<br>params和query都可以传递，区别在于后者会出现在url上，考虑到刷新页面的情况，建议使用query</p>
<ul>
<li>$router方式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">  path: <span class="string">'/path'</span>,</span><br><span class="line">  query: &#123;</span><br><span class="line">    name: name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">  name: <span class="string">'name'</span>, <span class="comment">//路由的name值</span></span><br><span class="line">  params: &#123; </span><br><span class="line">    name: name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>参数的规则和router-link相同</p>
<ul>
<li>获取参数的方式</li>
</ul>
<p>对于使用<code>params</code>方式传递的参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.params.name</span><br></pre></td></tr></table></figure></p>
<p>对于使用<code>query</code>方式传递的参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.query.name</span><br></pre></td></tr></table></figure></p>
<ul>
<li>动态路由匹配</li>
</ul>
<p>在定义router时使用动态路径参数，以冒号开头<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这时<code>/user/foo</code> 和 <code>/user/bar</code> 都将映射到相同的路由，在路由页面中获取：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.params.user</span><br></pre></td></tr></table></figure></p>
<ul>
<li>props 路由传参</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &apos;/user/:id&apos;, component: User, props: true &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>将路由的<code>props</code>属性设置为true，在路由页就可以通过使用props拿到数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [&apos;id&apos;]</span><br></pre></td></tr></table></figure></p>
<h3 id="通过slot通信"><a href="#通过slot通信" class="headerlink" title="通过slot通信"></a>通过slot通信</h3><p>关于slot的使用就不介绍了，下面简单举个栗子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;slot msg=&quot;hi&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 父组件</span><br><span class="line">&lt;child&gt; </span><br><span class="line">  &lt;div slot-scope=&quot;scope&quot;&gt;&#123;&#123; scope.msg &#125;&#125;&lt;/div&gt;   // hi</span><br><span class="line">&lt;/child&gt;</span><br></pre></td></tr></table></figure></p>
<p>在slot插槽上绑定的数据可以通过<code>slot-scope</code>拿到，这里也支持解构的写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;child&gt; </span><br><span class="line">  &lt;div slot-scope=&quot;&#123; msg &#125;&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;   // hi</span><br><span class="line">&lt;/child&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="设置中间件"><a href="#设置中间件" class="headerlink" title="设置中间件"></a>设置中间件</h3><p>创建一个事件中心，相当于中间件，可以用它来传递事件和接收事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure></p>
<p>发送数据的组件触发<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"send"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  send() &#123;</span><br><span class="line">    vm.$emit(<span class="string">'change'</span>,<span class="string">'hello'</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接收数据的组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  vm.$on(<span class="string">'change'</span>, (msg) =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.msg = msg;	<span class="comment">//hello</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在vue文件中需要使用中间件通信时，创建中间件，如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'Vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure></p>
<p>使用时在组件中import导入即可</p>
<h3 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h3><p>当我们需要在父组件中访问子组件时，可以使用<code>$children</code>或者<code>$ref</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件1</span></span><br><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    msg: <span class="string">'这是子组件1的信息'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子组件2</span></span><br><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    msg: <span class="string">'这是子组件2的信息'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>$children</code>返回所有子组件的实例，是一个数组</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showmsg"</span>&gt;</span>显示子组件信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  showmsg () &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.$children.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[i].msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>ref</code>为子组件指定一个索引ID,可以在父组件使用<code>$refs</code>访问到</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showmsg"</span>&gt;</span>显示子组件信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child1</span> <span class="attr">ref</span>=<span class="string">'c1'</span>&gt;</span><span class="tag">&lt;/<span class="name">child1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child2</span> <span class="attr">ref</span>=<span class="string">'c2'</span>&gt;</span><span class="tag">&lt;/<span class="name">child2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  showmsg () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.c1.msg)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.c2.msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在调用子组件方法时，可以通过传参的方式把数据传到子组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">this</span>.$refs.child.show(<span class="string">'hi'</span>)</span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">show(msg)&#123;</span><br><span class="line">	<span class="keyword">this</span>.msg = msg  <span class="comment">//hi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Promise方式"><a href="#Promise方式" class="headerlink" title="Promise方式"></a>Promise方式</h3><p>子组件中定义父组件需要调用的方法，并返回一个promise对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    msg : <span class="string">'hello'</span>,</span><br><span class="line">    promise : &#123;</span><br><span class="line">      resolve: <span class="literal">null</span>,</span><br><span class="line">      reject : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">methods: &#123;</span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.promise.resolve = resolve;</span><br><span class="line">      <span class="keyword">this</span>.promise.reject = reject;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  send () &#123;</span><br><span class="line">    <span class="keyword">this</span>.promise.resolve(<span class="keyword">this</span>.msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用send方法时，执行promise的resolve方法，向父组件返回msg，父组件调用show方法拿到返回值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用的方法中</span></span><br><span class="line"><span class="keyword">this</span>.$refs.child.show().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)  <span class="comment">//hello</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>result就是子组件返回的数据，即msg</p>
<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>将数据存放在store中，另一组件获取state中的数据，或者watch state中数据的变化，来进行相应的操作<br><a href="/2017/11/28/vuex/">‘Vuex简单入门’</a></p>
<h3 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h3><p>在子组件中使用<code>$parent</code>可以获取到父组件的对象，使用方法同<code>$children</code></p>
<h3 id="访问根组件"><a href="#访问根组件" class="headerlink" title="访问根组件"></a>访问根组件</h3><p>使用<code>$root</code>可以获取当前组件树的根Vue实例。如果当前实例没有父实例，此实例将会是其自已</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记录贴:那些年踩过的坑]]></title>
      <url>/2017/09/30/%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>记录一下遇到的问题和解决方法，我有预感，这一篇会很长。<br><a id="more"></a></p>
<h3 id="表单提交不刷新页面"><a href="#表单提交不刷新页面" class="headerlink" title="表单提交不刷新页面"></a>表单提交不刷新页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"myForm"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">target</span>=<span class="string">"formsubmit"</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"formsubmit"</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>form表单提交到iframe里面处理，而这个iframe是隐藏的，所以提交表单的时候当前页面没有发生任何变化。form的target属性指向iframe的name值，这样就实现了提交到隐藏的iframe中。<br>提交时使用js提交<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#myForm'</span>).attr(<span class="string">'action'</span>, url).submit();</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>也可以通过设置target=”_blank”在新页面提交表单</p>
</blockquote>
<h3 id="ie8-ajax请求无效"><a href="#ie8-ajax请求无效" class="headerlink" title="ie8 ajax请求无效"></a>ie8 ajax请求无效</h3><p>设置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.support.cors = <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>$.support.cors判断浏览器是否支持跨域访问，在ie8中默认值是false，需要手动开启</p>
<h3 id="dataTables中文配置"><a href="#dataTables中文配置" class="headerlink" title="dataTables中文配置"></a>dataTables中文配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"language"</span>    : &#123;</span><br><span class="line">    <span class="string">"paginate"</span>  : &#123;</span><br><span class="line">        <span class="string">"next"</span>    : <span class="string">"下一页"</span>,</span><br><span class="line">        <span class="string">"previous"</span>: <span class="string">'上一页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"lengthMenu"</span>: <span class="string">"显示 _MENU_ 条/页"</span>,</span><br><span class="line">    <span class="string">"info"</span>      : <span class="string">"共_TOTAL_条记录"</span>,</span><br><span class="line">    <span class="string">"infoEmpty"</span> : <span class="string">"共0条记录"</span>,</span><br><span class="line">    <span class="string">"emptyTable"</span>: <span class="string">"没有查询到数据"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dataTables数据为空时报错"><a href="#dataTables数据为空时报错" class="headerlink" title="dataTables数据为空时报错"></a>dataTables数据为空时报错</h3><p>在配置columns时加上<code>defaultContent:&#39;&#39;</code></p>
<h3 id="select默认选中第一个"><a href="#select默认选中第一个" class="headerlink" title="select默认选中第一个"></a>select默认选中第一个</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"select option:first"</span>).prop(<span class="string">"selected"</span>, <span class="string">"selected"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="checkbox的值"><a href="#checkbox的值" class="headerlink" title="checkbox的值"></a>checkbox的值</h3><p>checkbox不能通过val()拿到值，需要判断<code>checked</code>属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;input[type=&quot;chekcbox&quot;]&apos;).attr(&apos;checked&apos;, true)	//选中</span><br><span class="line">$(&apos;input[type=&quot;chekcbox&quot;]&apos;).removeAttr(&apos;checked&apos;)	//取消选中</span><br></pre></td></tr></table></figure></p>
<h3 id="ie8设置固定定位和透明"><a href="#ie8设置固定定位和透明" class="headerlink" title="ie8设置固定定位和透明"></a>ie8设置固定定位和透明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">position: fixed;</span><br><span class="line">_position: absolute;</span><br><span class="line">_clear: both;</span><br><span class="line">_top:expression(<span class="built_in">eval</span>(<span class="built_in">document</span>.compatMode &amp;&amp; <span class="built_in">document</span>.compatMode==<span class="string">'CSS1Compat'</span>) ? documentElement.scrollTop   +(documentElement.clientHeight-<span class="keyword">this</span>.clientHeight) - <span class="number">1</span>   : <span class="built_in">document</span>.body.scrollTop   +(<span class="built_in">document</span>.body.clientHeight-<span class="keyword">this</span>.clientHeight) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">opacity: <span class="number">0</span>;</span><br><span class="line">-ms-filter:<span class="string">"alpha(opacity=0)"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="设置表单不可选"><a href="#设置表单不可选" class="headerlink" title="设置表单不可选"></a>设置表单不可选</h3><p>表单元素自带的有两个属性readonly和disabled，都可以设置内容无法改变</p>
<ul>
<li>disabled </li>
</ul>
<ol>
<li>在ie9以下浏览器中，字体颜色会变得十分浅，只能用readonly</li>
<li>设置<code>disabled</code>,<code>disabled=&quot;true&quot;</code>和<code>disabled=&quot;false&quot;</code>都会生效，所以想要取消disabled属性，需要写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input[disabled]'</span>).removeAttr(<span class="string">'disabled'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>readonly<br>对于select生效，但是因为select本身就是readonly的，依旧可以改变所选项，如果希望select不可改变<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'select[readonly]'</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.defaultIndex = <span class="keyword">this</span>.selectedIndex;</span><br><span class="line">&#125;).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.selectedIndex = <span class="keyword">this</span>.defaultIndex;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="input回车切换焦点"><a href="#input回车切换焦点" class="headerlink" title="input回车切换焦点"></a>input回车切换焦点</h3><p>这里必须先吐槽一句了，你老老实实用Tab键不行么?我#￥！@#！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body'</span>).on(<span class="string">'focus'</span>, <span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> input = $(<span class="string">'input'</span>);</span><br><span class="line">    input.unbind(<span class="string">'keydown'</span>);</span><br><span class="line">    input.keydown(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">            input.eq(input.index(<span class="keyword">this</span>) + <span class="number">1</span>).focus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>因为有动态生成的input标签，所以这里把事件绑在了body上，focus时获取所有input的对象集合，回车切换到下一个。</p>
<blockquote>
<p>在绑定keydown事件之前一定要先解绑，不然会重复绑定，然后执行2，4，8，16……别问我为什么知道，我浏览器就是这么卡死的。</p>
</blockquote>
<h3 id="表单提交对象"><a href="#表单提交对象" class="headerlink" title="表单提交对象"></a>表单提交对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input'</span>).val(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>数组在赋值的时候会自动转化成字符串 [1,2,3] =&gt; 1,2,3，对象直接赋值会显示object，需要转换一下格式，跟localStorage一个道理，后台拿到字符串后转为JSON格式即可。</p>
<h3 id="git-clone-403"><a href="#git-clone-403" class="headerlink" title="git clone 403"></a>git clone 403</h3><p>git clone和push的时候碰到403的错误，用户权限不足，，在地址前加上用户名跟密码即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://[用户名]:[密码][地址]</span><br><span class="line">//for example</span><br><span class="line">https://liyu:123@github.com/gitliyu/gitliyu.github.io.git</span><br></pre></td></tr></table></figure></p>
<h3 id="事件委派的重复绑定"><a href="#事件委派的重复绑定" class="headerlink" title="事件委派的重复绑定"></a>事件委派的重复绑定</h3><p>在使用jquery对于一些动态生成的dom元素进行事件绑定时，通常需要绑定在父级上进行委派，常用的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对a链接添加点击事件</span></span><br><span class="line">$(<span class="string">'body'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.target.tagName == <span class="string">'A'</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'body'</span>).on(<span class="string">'click'</span>, <span class="string">'a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>第二种方式当然是没有问题的，在使用第一种方式时，由于比较懒，直接把事件绑在了body而非父级上，在页面局部刷新时(jquery load或pjax)，由于body没有刷新而模板页的js文件重新执行，会出现事件重复绑定,需要在每次绑定事件前解绑<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body'</span>).unbind();</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>感觉这个问题出现的太过巧合，除了我估计也没人遇到了</p>
</blockquote>
<h3 id="target和currentTarget"><a href="#target和currentTarget" class="headerlink" title="target和currentTarget"></a>target和currentTarget</h3><p>以点击事件为例，target指的是点击的dom对象，可以用来委派事件&amp;判断点击对象，currentTarget指的是所点击的绑定该点击事件的dom对象，防止事件冒泡和默认事件的组织。<br>举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;li onclick=<span class="string">"fn(e)"</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">"###"</span>&gt;link&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>li&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.target.tagName);</span><br><span class="line">        <span class="built_in">console</span>.log(e.currentTarget.tagName);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在以上代码中，点击a标签时，会分别输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">LI</span><br></pre></td></tr></table></figure></p>
<h3 id="富文本编辑器过滤标签"><a href="#富文本编辑器过滤标签" class="headerlink" title="富文本编辑器过滤标签"></a>富文本编辑器过滤标签</h3><p>在使用富文本编辑器时，为了保留格式，直接使用v-model取得的value值都带有html标签，在项目中使用到的vue-quill-editor，虽然有提供获取纯文本的方法，但是默认的返回值为”\n”，一个换行符，并且仍然会有部分标签，无法进行非空判断。<br>解决方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text = text.replace(<span class="regexp">/(&lt;[^&gt;]*&gt;|&lt;\/[^&gt;]*&gt;|\s+)/gm</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure></p>
<p>过滤掉字符串中的html标签和空格</p>
<h3 id="隐藏input-number的按钮"><a href="#隐藏input-number的按钮" class="headerlink" title="隐藏input number的按钮"></a>隐藏input number的按钮</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-outer-spin-button</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-inner-spin-button</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="减法出现小数"><a href="#减法出现小数" class="headerlink" title="减法出现小数"></a>减法出现小数</h3><p>js对于浮点型不够准确，因此在计算浮点数的减法时经常出现问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">171.2</span> - <span class="number">85</span>)   <span class="comment">// 86.19999999999999</span></span><br></pre></td></tr></table></figure></p>
<p>解决方法：</p>
<ul>
<li>parseInt(), Math.Floor(), Math.Round()等方法取整，不常用</li>
<li>toFixed(2), 保留有效位数</li>
<li>扩大倍数之后在进行减法计算，既然浮点型运算有问题，那就换成整型来计算</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log((171.2 - 85).toFixed(1))	// &apos;86.2&apos;</span><br><span class="line">console.log((171.2 * 10 - 85 * 10) / 10)	// 86.2</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 经验总结 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Crypto-JS加密]]></title>
      <url>/2017/09/21/Crypto-JS%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<p>CryptoJS (crypto.js) 为 JavaScript 提供了各种各样的加密算法。目前已支持的算法包括： MD5 SHA-1 SHA-256 AES等，这里以AES和base64为例简单介绍一下使用方法。<br><a id="more"></a></p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install crypto-js</span><br></pre></td></tr></table></figure>
<h3 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h3><p><a href="https://code.google.com/archive/p/crypto-js/" target="_blank" rel="noopener">‘https://code.google.com/p/crypto-js’</a><br>这个地址是需要翻墙才能下载</p>
<h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p><a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener">‘https://github.com/brix/crypto-js’</a></p>
<p>这里要提到的是，官网和github下载的文件略有差异，首先介绍官网下载的压缩包，分为<code>rollups</code>和 <code>components</code>两个文件夹。</p>
<ul>
<li>rollups下面是整合后的js，每一个可以单独通过js引用使用。</li>
<li>componets下面刚包括所有的组件源码，以及各组件压缩后的js文件。</li>
</ul>
<p>以AES为例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"rollups/aes.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    //or</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/core.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cipher-core.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/aes.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>github上的js文件，和官网的components文件夹相同</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="依赖node-js"><a href="#依赖node-js" class="headerlink" title="依赖node.js"></a>依赖node.js</h3><p>npm安装后<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SHA256 = <span class="built_in">require</span>(<span class="string">"crypto-js/sha256"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(SHA256(<span class="string">"Message"</span>));</span><br></pre></td></tr></table></figure></p>
<p>官方文档和github都有详细说明，这里不过多介绍。</p>
<h3 id="引入js文件"><a href="#引入js文件" class="headerlink" title="引入js文件"></a>引入js文件</h3><ul>
<li>aes</li>
</ul>
<p>使用aes加密时，首先要定义密钥与盐<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key = CryptoJS.enc.Utf8.parse(<span class="string">"5DquhGQAB9xdRUSp"</span>);	<span class="comment">//密钥</span></span><br><span class="line"><span class="keyword">var</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">"szWDBBzTYBQX2apH"</span>);	<span class="comment">//盐</span></span><br></pre></td></tr></table></figure></p>
<p>由前台或者后台随机生成，之后定义加密和解密的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Encrypt</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> srcs = CryptoJS.enc.Utf8.parse(word);</span><br><span class="line">    <span class="keyword">var</span> encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;<span class="attr">iv</span>: iv&#125;);</span><br><span class="line">    <span class="keyword">return</span> encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Decrypt</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> decrypt = CryptoJS.AES.decrypt(word, key, &#123;<span class="attr">iv</span>: iv&#125;);</span><br><span class="line">    <span class="keyword">return</span> decrypt.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>base64</li>
</ul>
<p>base64加密和md5加密方式类似，直接调用加密即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EncryptBase64</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = CryptoJS.enc.Utf8.parse(word);</span><br><span class="line">    <span class="keyword">return</span> CryptoJS.enc.Base64.stringify(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DecryptBase64</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> words = CryptoJS.enc.Base64.parse(word);</span><br><span class="line">    <span class="keyword">return</span> words.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>最后来验证一下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> word = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Encrypt(word)); <span class="comment">//oCUAMtH+jfKEt8e2VYci/Cz9GDXFY+tCt2ONjsKpGa0=</span></span><br><span class="line"><span class="built_in">console</span>.log(Decrypt(Encrypt(word)));	<span class="comment">//&#123;"name":"张三"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(EncryptBase64(word));	<span class="comment">//eyJuYW1lIjoi5byg5LiJIn0=</span></span><br><span class="line"><span class="built_in">console</span>.log(DecryptBase64(EncryptBase64(word)));	<span class="comment">//&#123;"name":"张三"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(EncryptBase64(Encrypt(word)));	<span class="comment">//b0NVQU10SCtqZktFdDhlMlZZY2kvQ3o5R0RYRlkrdEN0Mk9OanNLcEdhMD0=</span></span><br><span class="line"><span class="built_in">console</span>.log(Decrypt(DecryptBase64(EncryptBase64(Encrypt(word)))));	<span class="comment">//&#123;"name":"张三"&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> crypto </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Datatables分页]]></title>
      <url>/2017/09/18/datatables%E5%88%86%E9%A1%B5/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;dataTables是自带有分页功能的，在设置”paging”: true之后，就可以开启前端分页。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是有一个弊端，就是只能对表格的数据进行分页，而在数据量过多时，要通过一次请求拿到所有数据显然是不现实的，这时候就需要后台进行分页，而前端通过请求页码得到单页数据，这时候要如何实现分页呢？在踩了几天的坑之后，终于实现了分页，下面来简单的总结一下。<br><a id="more"></a></p>
<ul>
<li>首先来看一下后台接口的数据格式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request</span></span><br><span class="line">&#123;</span><br><span class="line">    pageNo: <span class="number">1</span>,</span><br><span class="line">    pageSize: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//response</span></span><br><span class="line">&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        list: [……],</span><br><span class="line">        totalCount: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    status: <span class="string">"200"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在请求时需要发送页码和每页的数据条数，接口返回的list就是需要的数据，totalCount则是数据的总数。</p>
<ul>
<li>声明一下需要发送的数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendData = &#123;</span><br><span class="line">    pageNo: <span class="number">1</span>,</span><br><span class="line">    pageSize: <span class="number">10</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>接下来配置一下dataTbles，使用ajax方式拿到数据</li>
</ul>
<p>具体的配置不多介绍，需要注意的是，首先要开启服务器模式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"serverSide"</span>  : <span class="literal">true</span>,</span><br><span class="line"><span class="string">"processing"</span>  : <span class="literal">true</span>,</span><br></pre></td></tr></table></figure></p>
<p>之后配置一下datatable的ajax配置项，这里是直接使用jQuery的ajax方法发送的请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ajax"</span> : <span class="function"><span class="keyword">function</span> (<span class="params">data, callback</span>) </span>&#123;	<span class="comment">//data是表格数据，callback写入返回的数据</span></span><br><span class="line">	$.ajax(&#123;</span><br><span class="line">        url        : url,</span><br><span class="line">        dataType   : <span class="string">"json"</span>,</span><br><span class="line">        contentType: <span class="string">"application/json"</span>,</span><br><span class="line">        headers    : &#123;</span><br><span class="line">            token: token</span><br><span class="line">        &#125;,</span><br><span class="line">        data       : <span class="built_in">JSON</span>.stringify(sendData),</span><br><span class="line">        type       : <span class="string">"post"</span>,</span><br><span class="line">        success    : <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.status == <span class="number">200</span>)&#123;	</span><br><span class="line">                callback(&#123;</span><br><span class="line">                    recordsTotal   : res.data.totalCount,	<span class="comment">//返回数据的总数</span></span><br><span class="line">                    recordsFiltered: res.data.totalCount,	<span class="comment">//返回数据数量不进行过滤，每次查询均视为全部结果</span></span><br><span class="line">                    data           : res.data.list</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里实现之后应该就可以实现分页了，但是还有一个问题，就是在切换页跟每页条数的时候，数据都不会发生变化，这是因为每次发送的sendData都没有变化。</p>
<ul>
<li>最后一步，换页的实现<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//page切换事件</span></span><br><span class="line">$(<span class="string">'#table'</span>).on(<span class="string">'page.dt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    sendData.pageNo = table.page() + <span class="number">1</span>;		<span class="comment">//获取当前page</span></span><br><span class="line">    sendData.pageSize = table.page.len();	<span class="comment">//获取当前page size</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//page size切换事件</span></span><br><span class="line">$(<span class="string">'#table'</span>).on(<span class="string">'length.dt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    sendData.pageNo = <span class="number">1</span>;</span><br><span class="line">    sendData.pageSize = table.page.len();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样就完成了后台分页的前端实现。</p>
<blockquote>
<p>最后记录下dataTables刷新数据用到的方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更改table ajax请求的参数</span></span><br><span class="line">table.settings()[<span class="number">0</span>].ajax.data = sendData; </span><br><span class="line"><span class="comment">//刷新表格数据</span></span><br><span class="line">table.ajax.reload();</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> dataTables </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Require.js的使用]]></title>
      <url>/2017/08/14/requirejs/</url>
      <content type="html"><![CDATA[<p><img src="/img/bg2012110701.png" alt=""><br>require.js的诞生是为了解决两大问题</p>
<ul>
<li>实现js文件的异步加载，避免网页失去响应；</li>
<li>管理模块之间的依赖性，便于代码的编写和维护。</li>
</ul>
<a id="more"></a>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>首先，点击<a href="http://requirejs.org/docs/download.html" target="_blank" rel="noopener">‘下载’</a>require.js.<br>这里可以采用网页底部加载的方式，或者<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>async属性表明这个文件需要异步加载，避免网页失去响应。IE不支持这个属性，只支持defer，所以把defer也写上。</p>
<h4 id="定义模块目录"><a href="#定义模块目录" class="headerlink" title="定义模块目录"></a>定义模块目录</h4><ol>
<li><p>data-main指定网页中的主模块，在require.js加载完成后加载js目录下的main.js，默认后缀为js，所以写main即可,其他模块也是按照datamain的目录js/查找</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">data-main</span>=<span class="string">"js/main"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义baseUrl作为模块目录路径，config的使用见下文</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    baseUrl: <span class="string">'js</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这样的话，在页面引用时<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'js/main.js&gt;&lt;/script&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="主模块的写法"><a href="#主模块的写法" class="headerlink" title="主模块的写法"></a>主模块的写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>, <span class="string">'underscore'</span>, <span class="string">'backbone'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$, _, Backbone</span>)</span>&#123;</span><br><span class="line">　　<span class="comment">// main.js内容</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>require()函数接受两个参数。<br>第一个参数是一个数组，表示所依赖的模块，依次填入依赖的模块名，异步加载依赖模块；<br>第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块返回的模块对象会以参数形式传入该函数，参数的顺序和加载的顺序相同，从而在回调函数内部就可以使用这些模块。</p>
<h4 id="模块的加载"><a href="#模块的加载" class="headerlink" title="模块的加载"></a>模块的加载</h4><p>使用require.config()方法，我们可以对模块的加载行为进行自定义。require.config()就写在主模块（main.js）的头部或者单独文件。</p>
<blockquote>
<p>需要单独定义requireConfig文件时，要在main.js之前引用，或作为main的依赖模块引入</p>
</blockquote>
<p>使用baseUrl和path配置模块路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    baseUrl: <span class="string">"js"</span>,  </span><br><span class="line">    paths: &#123;</span><br><span class="line">        <span class="string">"jquery"</span>: <span class="string">"lib/jquery"</span>,</span><br><span class="line">        <span class="string">"模块名"</span>: <span class="string">"模块路径"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>path用于映射放于baseUrl下的模块名，模块路径不止可以是字符串，还可以是数组，写法如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path: &#123;</span><br><span class="line">    <span class="string">'jquery'</span>: [</span><br><span class="line">        <span class="string">"lib/jquery"</span>，</span><br><span class="line">        <span class="string">"//cdn.bootcss.com/jquery/2.2.4/jquery"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会对数组内容按顺序加载，第一个加载失败后会加载第二个，作为备用路径</p>
<blockquote>
<p>模块加载之后会立刻执行</p>
</blockquote>
<h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><ul>
<li>map<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map:  &#123;</span><br><span class="line">    <span class="string">'*'</span>： &#123;</span><br><span class="line">        <span class="string">'jquery'</span>: <span class="string">'libs/jquery'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'app/module1'</span>: &#123;</span><br><span class="line">        <span class="string">'jquery'</span>: <span class="string">'lib/jquery1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'app/module2'</span>: &#123;</span><br><span class="line">        <span class="string">'jquery'</span>: <span class="string">'lib/jquery2'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>使用map就可以实现，在加载不同的模块时，依赖不同版本的jquery</p>
<ul>
<li>waitSeconds<br>下载js等待的时间，默认为7s，如果设置为0，则禁用等待超时，会一直加载</li>
<li>urlArgs<br>加载文件时，在文件名后面增加额外的query参数</li>
<li>deps<br>依赖模块，在加载requireConfig之后作为依赖模块加载</li>
</ul>
<h4 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h4><p>使用define方法定义AMD规范模块，如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中</p>
<ol>
<li>函数式定义<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'name'</span>，[<span class="string">'依赖模块'</span>]， <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add : <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x+y;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;            </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>模块名可以不写，依赖模块可有可无，可以直接define(function(){}),可以返回任何值，函数方法，对象，变量</p>
<blockquote>
<p>在加载依赖模块之后，使用name.add(x, y)即可调用。</p>
</blockquote>
<ol>
<li>定义对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(&#123;</span><br><span class="line">    name: <span class="string">'zhangsan'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'男'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="加载非规范模块"><a href="#加载非规范模块" class="headerlink" title="加载非规范模块"></a>加载非规范模块</h4><p>加载不支持AMD的库,在用require()加载之前，要先用require.config()方法，定义它们的一些特征<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">　　shim: &#123;</span><br><span class="line">　　　　<span class="string">'name'</span>: &#123; </span><br><span class="line">　　　　　　deps: [<span class="string">'jquery'</span>],</span><br><span class="line">　　　　　　exports: <span class="string">'obj'</span>,</span><br><span class="line">           init: <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> $;</span><br><span class="line">           &#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>name, 模块名</li>
<li>deps数组，依赖的模块。</li>
<li>exports值（输出的变量名），表明这个模块外部调用时的名称，即模块对象名；</li>
<li>init,初始化函数，返回的对象代替exports作为模块对象</li>
</ul>
<p>以bootstrap为例，在没有返回对象和init函数的情况下，在加载时可以直接写deps数组<br>shim: {<br>    ‘bootstrap’: [‘jquery’]<br>}</p>
<h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    baseUrl: <span class="string">"js"</span>,  </span><br><span class="line">    paths: &#123;</span><br><span class="line">        <span class="string">"jquery"</span>: <span class="string">"lib/jquery"</span>,</span><br><span class="line">        <span class="string">'api'</span>: <span class="string">'app/api'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'app/user'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>, <span class="string">'api'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$, api</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        api.getUser().then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(user);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//api.js</span></span><br><span class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getUser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> def = $.deferred();</span><br><span class="line">            <span class="built_in">require</span>([<span class="string">'user'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">                def.resolve(user);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> def;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//user.js</span></span><br><span class="line">define(&#123;</span><br><span class="line">    name: <span class="string">'zhangsan'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'男'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;button id=<span class="string">'btn'</span>&gt;打印用户信息&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> require </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo引用自定义js与css]]></title>
      <url>/2017/08/09/hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;这里以Yelee主题为例，介绍一下引用自定义的js文件和样式的写法，不同主题的目录结构大致类似<br><a id="more"></a></p>
<h4 id="引入js"><a href="#引入js" class="headerlink" title="引入js"></a>引入js</h4><p>在<code>themes\yelee\source\js</code>目录下新建js文件，之后找到<code>themes\yelee\layout</code>下的layout.ejs文件<br><img src="/img/TIM图片20170809160616.png" alt="&#39;layout.ejs&#39;"><br>在其中使用script标签引入即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&apos;text/javascript&apos; src=&apos;/js/myjs.js&apos;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>当然，在其他位置的ejs文件或者md文件中引入也可以使用</p>
<blockquote>
<p>注意这里的路径为绝对路径，source下的js文件夹经过hexo渲染后在根目录下</p>
</blockquote>
<h4 id="引入自定义样式文件"><a href="#引入自定义样式文件" class="headerlink" title="引入自定义样式文件"></a>引入自定义样式文件</h4><p>在<code>themes\yelee\source\css</code>目录下新建mycss.styl文件，之后在同目录下的style.styl底部使用引入即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;mycss&quot;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS实现贪吃蛇]]></title>
      <url>/2017/08/03/js%E5%AE%9E%E7%8E%B0%E8%B4%AA%E5%90%83%E8%9B%87/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;使用canvas和原生js，二十行代码实现贪吃蛇小游戏<br><a id="more"></a></p>
<p><iframe src="/snake/index.html" frameborder="0" width="500" height="500"></iframe><br>之前在csdn博客上看到的文章，感觉这个思路真的很新颖，我对代码进行了部分修改，并且添加了注释。<a href="http://bbs.csdn.net/topics/390988009" target="_blank" rel="noopener">‘原文地址’</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"can"</span> width=<span class="string">"400"</span> height=<span class="string">"400"</span> style=<span class="string">"background:Black"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> sn=[<span class="number">42</span>,<span class="number">41</span>],dz=<span class="number">43</span>,fx=<span class="number">1</span>,n,ctx=<span class="built_in">document</span>.getElementById(<span class="string">"can"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">/*  sn，存放蛇的数组，最左侧为蛇头，通过改变数据的方式改变位置</span></span><br><span class="line"><span class="comment">    dz，食物，初始位置为蛇头右侧，自动触发并之后随机</span></span><br><span class="line"><span class="comment">    fx，移动方向，初始向右</span></span><br><span class="line"><span class="comment">    n，用来存储移动方向/下次移动的位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">t,c</span>)</span>&#123;<span class="comment">//</span></span><br><span class="line">        ctx.fillStyle=c;</span><br><span class="line">        ctx.fillRect(t%<span class="number">20</span>*<span class="number">20</span>+<span class="number">1</span>,~~(t/<span class="number">20</span>)*<span class="number">20</span>+<span class="number">1</span>,<span class="number">18</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="comment">/*  这里可以把canvas理解为400个20*20的小块</span></span><br><span class="line"><span class="comment">        参数分别为x,y,width,height</span></span><br><span class="line"><span class="comment">        18+1+1 这里相当于2px的padding</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.onkeydown=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;fx=  sn[<span class="number">1</span>]-sn[<span class="number">0</span>]==(n=[<span class="number">-1</span>,<span class="number">-20</span>,<span class="number">1</span>,<span class="number">20</span>][(e||event).keyCode<span class="number">-37</span>]||fx)?fx:n&#125;;</span><br><span class="line">    <span class="comment">/*  键盘按下时，n=[-1,-20,1,20] 左，上，右，下</span></span><br><span class="line"><span class="comment">        键盘和蛇移动方向一致，满足n=[-1,-20,1,20][(e||event).keyCode-37]</span></span><br><span class="line"><span class="comment">        蛇的移动方向不变，否则按照键盘方向移动</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    !<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        sn.unshift(n=sn[<span class="number">0</span>]+fx);</span><br><span class="line">        <span class="comment">//获取到新的蛇头位置</span></span><br><span class="line">        <span class="keyword">if</span>(sn.indexOf(n,<span class="number">1</span>)&gt;<span class="number">0</span> || n&lt;<span class="number">0</span>||n&gt;<span class="number">399</span> || fx==<span class="number">1</span>&amp;&amp;n%<span class="number">20</span>==<span class="number">0</span>||fx==<span class="number">-1</span>&amp;&amp;n%<span class="number">20</span>==<span class="number">19</span> ) <span class="keyword">return</span> alert(<span class="string">"GAME OVER"</span>);</span><br><span class="line">        <span class="comment">/*  触碰自身</span></span><br><span class="line"><span class="comment">            n&lt;0 || n&gt;399 超出画布范围，即触碰上下边缘</span></span><br><span class="line"><span class="comment">            fx==1&amp;&amp;n%20==0||fx==-1&amp;&amp;n%20==19 向右撞到右侧，向左撞到左侧</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        draw(n,<span class="string">"Lime"</span>);<span class="comment">//画出蛇头</span></span><br><span class="line">        <span class="keyword">if</span>(n==dz)&#123;<span class="comment">//头部触碰食物时不移除尾部，随机生成食物</span></span><br><span class="line">            <span class="keyword">while</span>(sn.indexOf(dz=~~(<span class="built_in">Math</span>.random()*<span class="number">400</span>))&gt;=<span class="number">0</span>);</span><br><span class="line">            draw(dz,<span class="string">"Yellow"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            draw(sn.pop(),<span class="string">"Black"</span>);<span class="comment">//尾部移除并改变为黑色</span></span><br><span class="line">        setTimeout(<span class="built_in">arguments</span>.callee,<span class="number">100</span>);</span><br><span class="line">    &#125;();<span class="comment">//自运行函数，定时器运行自身</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 实用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> canvas </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo使用技巧(持续更新ing)]]></title>
      <url>/2017/08/03/Hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;总结了一些在搭建hexo博客方面遇到的一些问题和使用技巧<br><a id="more"></a></p>
<h4 id="hexo命令简写"><a href="#hexo命令简写" class="headerlink" title="hexo命令简写"></a>hexo命令简写</h4><p>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo p == hexo publish   #发布草稿<br>hexo s == hexo server      #本地服务器预览<br>hexo g == hexo generate  #生成<br>hexo d == hexo deploy    #部署<br>hexo c == hexo clean     #清除缓存<br>hexo d -g                   #生成之后部署</p>
<h4 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以上是文章摘要</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">以下是内容</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Yelee 中可以使用 description: “我是摘要”</p>
</blockquote>
<h4 id="分类以及多标签"><a href="#分类以及多标签" class="headerlink" title="分类以及多标签"></a>分类以及多标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories: html</span><br><span class="line">tags: </span><br><span class="line">	- js</span><br><span class="line">	- css</span><br></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [html,js,css]</span><br></pre></td></tr></table></figure></p>
<h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><ul>
<li>本地路径，在<code>/source</code>目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为<code>/img/图片名称</code></li>
<li>使用网络路径<blockquote>
<p><code>/source</code>为根目录，使用绝对路径时获取到的是source文件夹下的内容</p>
</blockquote>
</li>
</ul>
<h4 id="上传html"><a href="#上传html" class="headerlink" title="上传html"></a>上传html</h4><p>在<code>/source</code>目录下新建项目文件夹，在html头部添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>可以避免hexo的渲染，从而实现展示效果，使用 <code>站点地址/文件夹name</code>即可访问到</p>
<h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>修改<code>hero-generator-index</code>插件，在文件:<code>node_modules/hexo-generator-index/lib/generator.js</code>内添加代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">        <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; </span><br><span class="line">    <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意添加到return之前</p>
</blockquote>
<p>使用<code>top</code>值对文章进行排序，在文章中添加top值即可，数值越大文章越靠前，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo文章置顶</span><br><span class="line">categories: 插件工具</span><br><span class="line">tags: hexo</span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<h4 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h4><p>打开<code>\themes\yelee\source\css\ _variables\base.styl</code>文件，将<code>$font-size-base</code>改成<code>16px</code>，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-size-base = 16px</span><br></pre></td></tr></table></figure></p>
<h4 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h4><p>打开<code>themes/yelee/source/css/_custom/custom.styl</code>,在里面写下如下代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword2.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword1.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这里的url必须是ico格式</p>
</blockquote>
<h4 id="开启qq临时对话"><a href="#开启qq临时对话" class="headerlink" title="开启qq临时对话"></a>开启qq临时对话</h4><p>添加链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;http://wpa.qq.com/msgrd?v=3&amp;uin=1042625709&amp;site=qq&amp;menu=yes&apos;</span><br></pre></td></tr></table></figure></p>
<p>PC端和手机QQ都适用</p>
<h4 id="代码块写法"><a href="#代码块写法" class="headerlink" title="代码块写法"></a>代码块写法</h4><p>之前在用markdown写代码块的时候一直用的三个点包裹代码的形式，后来发现这么写的hexo中代码不会高亮<br>纠正写法，在写代码块的时候，要加上对应的代码类型<br><img src="/img/TIM图片20170929155934.png" alt=""></p>
<p><br><br><br></p>
<blockquote>
<p>持续更新ing</p>
</blockquote>
<p><br><br><br></p>
]]></content>
      
        <categories>
            
            <category> 实用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客畅言评论支持]]></title>
      <url>/2017/08/03/Hexo%E5%8D%9A%E5%AE%A2%E7%95%85%E8%A8%80%E8%AF%84%E8%AE%BA/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;由于多说和网易云跟帖的关闭，很多博客的评论系统受到了影响，这里通过使用Yelee主题举例说明将多说评论替换为畅言的步骤，以及畅言评论的设置问题。<br><a id="more"></a></p>
<h3 id="代码安装"><a href="#代码安装" class="headerlink" title="代码安装"></a>代码安装</h3><p>1.修改文件 <code>\themes\yelee\layout\_partial\comments\duoshuo.ejs</code> 为如下内容，并重命名为 changyan.ejs。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--PC和WAP自适应版--&gt;</span><br><span class="line">&lt;div id=<span class="string">"SOHUCS"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="keyword">var</span> appid = <span class="string">'&lt;%=appid%&gt;'</span>; </span><br><span class="line"><span class="keyword">var</span> conf = <span class="string">'&lt;%=conf%&gt;'</span>; </span><br><span class="line"><span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth; </span><br><span class="line"><span class="keyword">if</span> (width &lt; <span class="number">960</span>) &#123; </span><br><span class="line"><span class="built_in">window</span>.document.write(<span class="string">'&lt;script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="//changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id='</span> + appid + <span class="string">'&amp;conf='</span> + conf + <span class="string">'"&gt;&lt;\/script&gt;'</span>); &#125; <span class="keyword">else</span> &#123; <span class="keyword">var</span> loadJs=<span class="function"><span class="keyword">function</span>(<span class="params">d,a</span>)</span>&#123;<span class="keyword">var</span> c=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>]||<span class="built_in">document</span>.head||<span class="built_in">document</span>.documentElement;<span class="keyword">var</span> b=<span class="built_in">document</span>.createElement(<span class="string">"script"</span>);b.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);b.setAttribute(<span class="string">"charset"</span>,<span class="string">"UTF-8"</span>);b.setAttribute(<span class="string">"src"</span>,d);<span class="keyword">if</span>(<span class="keyword">typeof</span> a===<span class="string">"function"</span>)&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;b.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> e=b.readyState;<span class="keyword">if</span>(e===<span class="string">"loaded"</span>||e===<span class="string">"complete"</span>)&#123;b.onreadystatechange=<span class="literal">null</span>;a()&#125;&#125;&#125;<span class="keyword">else</span>&#123;b.onload=a&#125;&#125;c.appendChild(b)&#125;;loadJs(<span class="string">"//changyan.sohu.com/upload/changyan.js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">window</span>.changyan.api.config(&#123;<span class="attr">appid</span>:appid,<span class="attr">conf</span>:conf&#125;)&#125;); &#125; &#125;)(); <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这一部分是畅言安装的通用代码，在html中插入这段代码即可加入评论框。<br>没有多说的主题可以直接添加changyan.ejs，或者修改主题支持的评论，下同。</p>
</blockquote>
<p>2.修改 <code>\themes\yelee\layout\_partial\article.ejs</code> ，把原来多说位置的代码改为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">  &lt;% <span class="keyword">if</span> (theme.changyan.on) &#123; %&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">'comments/changyan'</span>, &#123;</span><br><span class="line">      appid: theme.changyan.appid,</span><br><span class="line">      conf: theme.changyan.conf</span><br><span class="line">    &#125;) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>对于畅言实验室中的拓展功能，比如表情评论，打赏等功能，同样将代码添加到这部分就行，以表情评论为例</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">  &lt;% <span class="keyword">if</span> (theme.changyan.on) &#123; %&gt;</span><br><span class="line">    &lt;div id=<span class="string">"cyEmoji"</span> role=<span class="string">"cylabs"</span> data-use=<span class="string">"emoji"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span> src=<span class="string">"https://changyan.sohu.com/js/changyan.labs.https.js?appid=xxxxxx"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>3.修改样式文件 <code>\themes\yelee\source\css\_partial\main.styl</code> ，查找 duoshou，替换为如下样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#SOHUCS</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: inherit <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4.修改样式文件 <code>\themes\yelee\source\css\_partial\mobile.styl</code> ，查找 duoshou，替换为如下样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#SOHUCS</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>5.将theme的 <code>_config.yml</code> 中 duoshuo 的部分修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">changyan:</span><br><span class="line">  on: on</span><br><span class="line">  appid: </span><br><span class="line">  conf:</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这里的appid和conf是在畅言的后台获取，见下文。</p>
</blockquote>
<h3 id="畅言设置"><a href="#畅言设置" class="headerlink" title="畅言设置"></a>畅言设置</h3><p>1.点击访问畅言官网并注册<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言</a></p>
<blockquote>
<p>没有备案的域名可以找一个已备案域名提交审核，将自己的域名添加到域名白名单即可。</p>
</blockquote>
<p>2.注册成功后进入到后台页面<br><img src="/img/TIM图片20170803134014.png" alt=""><br>分别写入appid和conf即可。</p>
<p>3.在后台的设置选项中，可以对主题样式和评论进行设置。</p>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> yelee </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS常用尺寸和坐标]]></title>
      <url>/2017/08/01/js%E5%B0%BA%E5%AF%B8/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;js在获取宽高,距离以及坐标上有很多不同的方式，在这里对常用的方式进行一下汇总<br><a id="more"></a><br>先放一张图<br><img src="/img/size.png" alt=""></p>
<h3 id="元素大小"><a href="#元素大小" class="headerlink" title="元素大小"></a>元素大小</h3><ul>
<li>width和height<br>可以获取元素行内样式style的大小</li>
<li>width()和height()<br>可以获取元素实际大小</li>
<li>clientWidth和clientHeight<br>可以获取元素可视区的大小，可以得到元素内容及内边距所占据的空间大小。<br>border,margin无效，padding生效，有滚动条的话会减去滚动条，只考虑可视区域本身。</li>
<li>offsetWidth和offsetHeight<br>返回元素的实际大小，包含边框，内边距和滚动条，即border，padding均生效，有无滚动条不影响，margin不生效。</li>
<li>scrollWidth和scrollHeight<br>可以获取滚动内容(可见内容)的元素大小，即overflow部分本身的高度。<br>margin无效，padding和滚动条生效，Firefox和Opera中border生效， IE、Chrome和Safari中不生效。<h3 id="元素周边距离"><a href="#元素周边距离" class="headerlink" title="元素周边距离"></a>元素周边距离</h3></li>
<li>clientLeft和clientTop获取边框大小<br>可以获取元素左边框和上边框的值</li>
<li>offsetLeft和offsetTop<br>可以获取当前元素相对于父元素的位置</li>
<li>scrollTop()和scrollLeft()<br>获取和整个滚动区域顶部和左侧的距离</li>
<li>offset()<br>获取匹配元素在当前视口的相对偏移，返回的对象包含两个整型属性：top 和 left</li>
<li>position()<br>获取匹配元素相对父元素的偏移，返回类型同上</li>
</ul>
<h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><ul>
<li>clientWidth和clientHeight<br>元素可视区域尺寸</li>
<li>offsetWidth和offsetHeight<br>跟一般元素的计算方式一样，这里是body元素</li>
<li>scrollWidth和scrollHeight<br>有滚动时，大于window视窗可见尺寸，包含整个滚动区域</li>
</ul>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><ul>
<li>innerWidth和innerHeight<br>窗口中文档显示区域的尺寸，不包括边框，滚动条和菜单栏等部分所占尺寸，该属性可读可写。</li>
<li>outerWidth和outerHeight<br>窗口本身的尺寸，包含边框，滚动条，菜单栏等尺寸，该属性可读可写。</li>
<li>screenTop和screenLeft<br>网页正文部分的上方和左侧</li>
<li>screen.width和screen.height<br>屏幕分辨率的宽高</li>
<li>screen.availWidth和screen.availHeight<br>屏幕可用工作区宽高</li>
</ul>
<h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><ul>
<li>e.pageX<br>相对整个页面的坐标</li>
<li>e.layerX<br>相对当前坐标系的实际大小的坐标</li>
<li>e.offsetX<br>相对当前坐标系的实际大小的坐标</li>
<li>e.clientX<br>相对当前坐标系的可视区域的坐标</li>
<li>e.screenX<br>相对于屏幕的水平坐标。</li>
</ul>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><ul>
<li>ev.touches[0].pageX<br>start/move事件获取坐标</li>
<li>ev.changedTouches[0].pageX<br>end事件获取坐标</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> 实用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm常用命令]]></title>
      <url>/2017/08/01/npm%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;npm是node的包管理工具，在前端开发中起到了不可忽视的作用，这里对npm的常用命令进行了汇总<br><a id="more"></a><br>安装nodejs的依赖包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;name&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>例如npm install express 就会默认安装express的最新版本，也可以通过在后面加版本号的方式安装指定版本，如npm install express@3.0.6</p>
</blockquote>
<p>将包安装到全局环境中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;name&gt; -g</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>但是代码中，直接通过require()的方式是没有办法调用全局安装的包的。全局的安装是供命令行使用的，就好像全局安装了vmarket后，就可以在命令行中直接运行vm命令。</p>
</blockquote>
<p>安装的同时，将信息写入package.json中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;name&gt; --save</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>项目路径中如果有package.json文件时，直接使用npm install方法就可以根据dependencies配置安装所有的依赖包<br>这样代码提交到github时，就不用提交node_modules这个文件夹了。</p>
</blockquote>
<p>创建package.json文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></p>
<p>移除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm remove &lt;name&gt;</span><br></pre></td></tr></table></figure></p>
<p>更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;name&gt;</span><br></pre></td></tr></table></figure></p>
<p>列出当前安装的所有包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure></p>
<p>查看当前包的安装路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root</span><br></pre></td></tr></table></figure></p>
<p>查看全局的包的安装路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root -g</span><br></pre></td></tr></table></figure></p>
<p>帮助<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm help</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果要单独查看install命令的帮助，可以使用的npm help install</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 插件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular学习笔记:通信方式]]></title>
      <url>/2017/07/28/angular%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;日常开发中，难免会有不同作用域之间的数据需求。对于controller之间通信有不同的方式可以做到。</p>
<p>用 Angular 进行开发，基本上都会遇到 Controller 之间通信的问题，本文对此进行一个总结。<br><a id="more"></a></p>
<h4 id="一-rootscope"><a href="#一-rootscope" class="headerlink" title="一.$rootscope"></a>一.$rootscope</h4><p>通过$rootscope定义的全局变量, 在各个controller里面都可以显示，也都可以修改。</p>
<h4 id="二-作用域继承"><a href="#二-作用域继承" class="headerlink" title="二.作用域继承"></a>二.作用域继承</h4><p>在controller的父子关系中，子controller可以继承到父级所有的$scope数据，子级中再声明时，会覆盖父级同名属性，只适用于父级向子级通信，而无法向上传递数据。</p>
<h4 id="三-watch"><a href="#三-watch" class="headerlink" title="三.$watch"></a>三.$watch</h4><ul>
<li>父作用域监视子作用域<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.controller(<span class="string">"Parent"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">    $scope.VM = &#123;<span class="attr">a</span>: <span class="string">"a"</span>, <span class="attr">b</span>: <span class="string">"b"</span>&#125;;</span><br><span class="line">    $scope.$watch(<span class="string">"VM.a"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// react</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>子作用域监视父作用域<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.controller(<span class="string">"child"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">    $scope.$parent.$watch($scope.VM.a, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//react</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="四-消息机制"><a href="#四-消息机制" class="headerlink" title="四.消息机制"></a>四.消息机制</h4><p>$on、$emit和$broadcast使得event、data在controller之间的传递变的简单。<br>$emit只能向parent controller传递event与data<br>$broadcast只能向child controller传递event与data<br>$on用于接收event与data<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$scope.$broadcast(<span class="string">'to-child'</span>, <span class="string">'child'</span>);</span><br><span class="line">$scope.$emit(<span class="string">'to-parent'</span>, <span class="string">'parent'</span>);		<span class="comment">//事件名，事件对象</span></span><br><span class="line"></span><br><span class="line">父级中</span><br><span class="line">$scope.$on(<span class="string">'to-parent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event,data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ParentCtrl'</span>, data);       <span class="comment">//父级能得到$emit发送的parent</span></span><br><span class="line">&#125;);</span><br><span class="line">子级中</span><br><span class="line">$scope.$on(<span class="string">'to-child'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event,data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ChildCtrl'</span>, data);         <span class="comment">//子级能得到$broadcast发送的child</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>使用$rootscope可以接受到所有$emit的数据</p>
</blockquote>
<h4 id="五-专用service"><a href="#五-专用service" class="headerlink" title="五.专用service"></a>五.专用service</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">myApp.factory(<span class="string">'myService'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">"I'm data from a service"</span> &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FirstCtrl</span>(<span class="params">$scope, Data</span>) </span>&#123;</span><br><span class="line">    $scope.data = myService.message;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SecondCtrl</span>(<span class="params">$scope, Data</span>) </span>&#123;</span><br><span class="line">    $scope.data = myService.message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> angular </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular学习笔记:$watch]]></title>
      <url>/2017/07/25/angular$watch/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;当angular数据模型发生变化时，我们需要如果需要根据他的变化触发其他的事件。$watch是一个scope函数，用于监听模型变化，当你的模型部分发生变化时它会通知你。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;$watch(watchObj, callback, objectEquality);<br><a id="more"></a></p>
<h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><ol>
<li>watchObj：监听的对象，它可以是一个angular表达式如’name’,或函数如function(){return $scope.name}。</li>
<li>callback:当watchExpression变化时会被调用的函数或者表达式,它接收3个参数：newValue(新值), oldValue(旧值), scope(作用域的引用)</li>
<li>objectEquality：是否深度监听，如果设置为true,它告诉Angular检查所监控的对象中每一个属性的变化. 如果你希望监控数组的个别元素或者对象的属性而不是一个普通的值, 那么你应该使用它</li>
</ol>
<blockquote>
<p>$watch()执行时会先调用一次传入的回调，可以认为是初始化。</p>
</blockquote>
<h4 id="监听方式"><a href="#监听方式" class="headerlink" title="监听方式"></a>监听方式</h4><p>监听model是否发生了变化，注意这里的watch提供三种api监听</p>
<ol>
<li>scope.$watch(watchExpression, listener)只监听对应的值或者reference是否变化，如果变化就触发注册的回调函数（也就是那个listener）</li>
<li>scope.$watchCollection(watchExpression, listener)监听对应的值或者reference以及集合里是否发生变化（例如集合增加或者减少，但是不包括集合里面的值变化）</li>
<li>scope.$watch (watchExpression, listener, true)<br>监听对应的值或者reference以及集合里是否发生变化并且还包括里面的值是否发生变化，下图可以比较清晰的看出其中的区别<br><img src="/img/watch.png" alt=""></li>
</ol>
<h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子:"></a>举个栗子:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">html:</span><br><span class="line">&lt;input type=<span class="string">"text"</span> ng-model=<span class="string">'num'</span>&gt;</span><br><span class="line">&lt;span&gt;当前折扣为&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">js:</span></span><br><span class="line"><span class="regexp">$scope.$watch('num',function(newNum)&#123;</span></span><br><span class="line"><span class="regexp">    if(newNum &gt; 100)&#123;</span></span><br><span class="line"><span class="regexp">        $scope.msg = '8折'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>
<p>监听num，当num大于100时，msg为8折</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> angular </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular学习笔记:表单验证]]></title>
      <url>/2017/07/19/angular%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;前端数据校验的意义在于改善用户体验，用户不用等到將数据提交到服务器后才知道哪些数据是不合法的。使用angular对表单元素进行校验是相当方便的，我们来看一下可以在input元素上使用的所有校验选项,可以验证必填项，长度和正则匹配等.<br><a id="more"></a></p>
<h4 id="属性值验证"><a href="#属性值验证" class="headerlink" title="属性值验证"></a>属性值验证</h4><ol>
<li><p>必填项验证<br>某个表单输入是否已填写，只要在输入字段元素上添加HTML5标记required即可：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最小长度<br>验证表单输入的文本长度是否大于某个最小值，在输入字段上使用指令ng-minleng= “{number}”：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-minlength</span>=<span class="string">"5"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最大长度<br>验证表单输入的文本长度是否小于或等于某个最大值，在输入字段上使用指令ng-maxlength=”{number}”：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-maxlength</span>=<span class="string">"20"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模式匹配<br>使用ng-pattern=”/PATTERN/“来确保输入能够匹配指定的正则表达式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-pattern</span>=<span class="string">"/[a-zA-Z]/"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>PS：</p>
<ul>
<li>使用input的type属性，可以对email，number，url进行验证</li>
<li>form中添加novalidate属性,使表单自带的验证无效</li>
</ul>
</blockquote>
<h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><ol>
<li><p>未修改过的表单<br>布尔值属性，表示用户是否修改了表单。如果为ture，表示没有修改过；false表示修改过：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formName.inputFieldName.$pristine;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改的表单<br>布尔型属性，当且仅当用户实际已经修改的表单。不管表单是否通过验证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formName.inputFieldName.$dirty</span><br></pre></td></tr></table></figure>
</li>
<li><p>经过验证的表单<br>布尔型属性，它指示表单是否通过验证。如果表单当前通过验证，他将为true：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formName.inputFieldName.$valid</span><br></pre></td></tr></table></figure>
</li>
<li><p>未通过验证的表单</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formName.inputFieldName.$invalid</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>PS：ng-disabled=”formName.inputFieldName.$invalid”  表单验证不通过时按钮失效</p>
</blockquote>
<h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子:"></a>举个栗子:</h4><p>在表单验证出错时，可以通过ng-show显示报错信息<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"userForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">ng-model</span>=<span class="string">"user.username"</span> <span class="attr">ng-minlength</span>=<span class="string">"3"</span> <span class="attr">ng-maxlength</span>=<span class="string">"8"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"userForm.username.$error.minlength"</span>&gt;</span>Username is too short.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"userForm.username.$error.maxlength"</span>&gt;</span>Username is too long.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"userForm.username.$error.required"</span>&gt;</span>Your username is required.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>也可以使用ng-message<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-messages</span>=<span class="string">"userForm.name.$error"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-message</span>=<span class="string">"minlength"</span>&gt;</span>Username is too short.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-message</span>=<span class="string">"maxlength"</span>&gt;</span>Username is too long.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-message</span>=<span class="string">"required"</span>&gt;</span>Your username is required.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> angular </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
